/**
 * Copyright (c) 2021 OceanBase
 * OceanBase CE is licensed under Mulan PubL v2.
 * You can use this software according to the terms and conditions of the Mulan PubL v2.
 * You may obtain a copy of Mulan PubL v2 at:
 *          http://license.coscl.org.cn/MulanPubL-2.0
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PubL v2 for more details.
 */

#ifdef STAT_EVENT_ADD_DEF
/**
 * STAT_EVENT_ADD_DEF(def, name, stat_class, stat_id, summary_in_session, can_visible, enable, explanation)
 * STAT_EVENT_SET_DEF(def, name, stat_class, stat_id, summary_in_session, can_visible, enable, explanation)
 * @param def name of this stat
 * @param name Name of this stat. Display on v$statname.
 * @param stat_class Every stats belongs to a class on deps/oblib/src/lib/statistic_event/ob_stat_class.h
 * @param stat_id Identifier of an stat ATTENTION: please add id placeholder on master.
 * @param summary_in_session Stat recorded for user session process mark this flag true.
 * @param can_visible Indicate whether this stat can be queried on gv$sysstat and gv$sesstat.
 * @param enable Indicate whether this stat is enabled. Marked it false it you merely need it as an placeholder.
 * @param explanation Explain stat's meaning and basic implementation.
 * NOTICE: do not reuse stat id or rename stat event!
*/

// NETWORK
STAT_EVENT_ADD_DEF(RPC_PACKET_IN, "rpc packet in", ObStatClassIds::NETWORK, 10000, true, true, true, "Cumulative number of RPC packets received by the tenant. The value increases by one when the tenant receives an RPC request, or after sending an RPC request and receiving a response packet.")
STAT_EVENT_ADD_DEF(RPC_PACKET_IN_BYTES, "rpc packet in bytes", ObStatClassIds::NETWORK, 10001, false, true, true, "Cumulative size (in bytes) of RPC packets received by the tenant. Each time the tenant receives an RPC request, or receives a response packet after sending an RPC request, the size of the RPC request or response packet is added to the total.")
STAT_EVENT_ADD_DEF(RPC_PACKET_OUT, "rpc packet out", ObStatClassIds::NETWORK, 10002, true, true, true, "Cumulative number of RPC packets sent by the tenant. Each time the tenant sends an RPC request, or sends a response packet after receiving an RPC request, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(RPC_PACKET_OUT_BYTES, "rpc packet out bytes", ObStatClassIds::NETWORK, 10003, false, true, true, "Cumulative size (in bytes) of RPC packets sent by the tenant. Each time the tenant sends an RPC request, or sends a response packet after receiving an RPC request, the size of the RPC request or response packet is added to the total.")
STAT_EVENT_ADD_DEF(RPC_DELIVER_FAIL, "rpc deliver fail", ObStatClassIds::NETWORK, 10004, false, true, true, "Total number of failed attempts to forward RPC requests to the tenant worker queue. When RPC I/O fails to forward an RPC request to the tenant queue, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(RPC_NET_DELAY, "rpc net delay", ObStatClassIds::NETWORK, 10005, false, true, true, "Cumulative network transmission delay (in microseconds) for RPC requests received by the tenant. After the RPC I/O thread parses an RPC request, it obtains the current timestamp, subtracts the send timestamp from the packet header, and adds the difference to RPC_NET_DELAY.")
STAT_EVENT_ADD_DEF(RPC_NET_FRAME_DELAY, "rpc net frame delay", ObStatClassIds::NETWORK, 10006, false, true, true, "Cumulative network framework processing time (in microseconds) for RPC requests received by the tenant. When the RPC I/O thread forwards an RPC request to the tenant queue, it obtains the current timestamp, subtracts the timestamp recorded when parsing the RPC packet, and adds the difference to RPC_NET_FRAME_DELAY.")
STAT_EVENT_ADD_DEF(MYSQL_PACKET_IN, "mysql packet in", ObStatClassIds::NETWORK, 10007, false, true, true, "Cumulative number of SQL request packets received by the tenant. Each time the network thread decodes a complete SQL request packet, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MYSQL_PACKET_IN_BYTES, "mysql packet in bytes", ObStatClassIds::NETWORK, 10008, false, true, true, "Cumulative size (in bytes) of SQL request packets received by the tenant. This value represents the size of the raw data packets received by the network thread, obtained according to protocol rules.")
STAT_EVENT_ADD_DEF(MYSQL_PACKET_OUT, "mysql packet out", ObStatClassIds::NETWORK, 10009, false, true, true, "Cumulative number of SQL request response packets for the tenant. Each time the network thread sends a complete encoded response packet, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(MYSQL_PACKET_OUT_BYTES, "mysql packet out bytes", ObStatClassIds::NETWORK, 10010, false, true, true, "Cumulative size (in bytes) of SQL request response packets for the tenant. This value accumulates the size of the encoded result set during the encoding of response packets.")
STAT_EVENT_ADD_DEF(MYSQL_DELIVER_FAIL, "mysql deliver fail", ObStatClassIds::NETWORK, 10011, false, true, true, "Cumulative number of failed attempts to enqueue tenant SQL login requests into the login queue and other requests into the worker thread queue. For login requests, this value increases by one when the login request thread queue is full. For other requests, it increases by one when the tenant worker thread queue is full.")
STAT_EVENT_ADD_DEF(RPC_COMPRESS_ORIGINAL_PACKET_CNT, "rpc compress original packet cnt", ObStatClassIds::NETWORK, 10012, false, true, true, "Cumulative number of RPC requests sent by the tenant that specify compression. When sending an RPC, if compressor_type is set, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(RPC_COMPRESS_COMPRESSED_PACKET_CNT, "rpc compress compressed packet cnt", ObStatClassIds::NETWORK, 10013, false, true, true, "Cumulative number of compressed RPC requests sent by the tenant. When sending an RPC, if the RPC has a compressor_type set and the compression is successful (the size after compression is less than the size before compression), this count is incremented by 1.")
STAT_EVENT_ADD_DEF(RPC_COMPRESS_ORIGINAL_SIZE, "rpc compress original size", ObStatClassIds::NETWORK, 10014, false, true, true, "Cumulative original size (in bytes) of RPC requests sent by the tenant that specify compression. When sending an RPC, if compressor_type is set, the original size of the RPC packet is added to RPC_COMPRESS_ORIGINAL_SIZE.")
STAT_EVENT_ADD_DEF(RPC_COMPRESS_COMPRESSED_SIZE, "rpc compress compressed size", ObStatClassIds::NETWORK, 10015, false, true, true, "Cumulative size of compressed RPC requests sent by the tenant (compressed size, in bytes). When sending an RPC, if compressor_type is set and compression succeeds, the compressed size is added to RPC_COMPRESS_COMPRESSED_SIZE.")

STAT_EVENT_ADD_DEF(RPC_STREAM_COMPRESS_ORIGINAL_PACKET_CNT, "rpc stream compress original packet cnt", ObStatClassIds::NETWORK, 10016, false, true, true, "Retained in the code, but no longer used since V4.x.")
STAT_EVENT_ADD_DEF(RPC_STREAM_COMPRESS_COMPRESSED_PACKET_CNT, "rpc stream compress compressed packet cnt", ObStatClassIds::NETWORK, 10017, false, true, true, "Retained in the code, but no longer used since V4.x.")
STAT_EVENT_ADD_DEF(RPC_STREAM_COMPRESS_ORIGINAL_SIZE, "rpc stream compress original size", ObStatClassIds::NETWORK, 10018, false, true, true, "Retained in the code, but no longer used since V4.x (bytes).")
STAT_EVENT_ADD_DEF(RPC_STREAM_COMPRESS_COMPRESSED_SIZE, "rpc stream compress compressed size", ObStatClassIds::NETWORK, 10019, false, true, true, "Retained in the code, but no longer used since V4.x (bytes).")

// QUEUE
STAT_EVENT_ADD_DEF(REQUEST_QUEUED_COUNT, "REQUEST_QUEUED_COUNT", QUEUE, "REQUEST_QUEUED_COUNT", true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(REQUEST_ENQUEUE_COUNT, "request enqueue count", ObStatClassIds::QUEUE, 20000, false, true, true, "Total number of times tenant requests have entered the queue. Each time a request is placed into the worker thread queue, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REQUEST_DEQUEUE_COUNT, "request dequeue count", ObStatClassIds::QUEUE, 20001, false, true, true, "Total number of times tenant requests have exited the queue. Each time a request leaves the worker thread queue, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REQUEST_QUEUE_TIME, "request queue time", ObStatClassIds::QUEUE, 20002, false, true, true, "Total waiting time (in microseconds) for all tenant requests in the queue. Each time a worker thread obtains a request, it calculates the queue waiting time by subtracting the time the request entered the queue from the current time, and adds this to the request_queue_time value.")

// TRANS
STAT_EVENT_ADD_DEF(TRANS_COMMIT_LOG_SYNC_TIME, "trans commit log sync time", ObStatClassIds::TRANS, 30000, false, true, true, "Total time (in microseconds) from clog submission to majority success for this tenant on this machine. When a clog achieves majority and the transaction layer is notified, the time spent from clog submission to majority success is calculated and accumulated in this count.")
STAT_EVENT_ADD_DEF(TRANS_COMMIT_LOG_SYNC_COUNT, "trans commit log sync count", ObStatClassIds::TRANS, 30001, false, true, true, "Number of clogs successfully committed and completed by majority for this tenant on this machine. Each time a clog is successfully committed and achieves majority, the transaction layer receives a callback and this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TRANS_COMMIT_LOG_SUBMIT_COUNT, "trans commit log submit count", ObStatClassIds::TRANS, 30002, false, true, true, "Number of clog submissions for this tenant on this machine. Each time a clog is successfully submitted (not guaranteed to be majority successful), this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TRANS_SYSTEM_TRANS_COUNT, "trans system trans count", ObStatClassIds::TRANS, 30003, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(TRANS_USER_TRANS_COUNT, "trans user trans count", ObStatClassIds::TRANS, 30004, false, true, true, "")
STAT_EVENT_ADD_DEF(TRANS_START_COUNT, "trans start count", ObStatClassIds::TRANS, 30005, false, true, true, "Number of transactions started for this tenant on this machine. Each time a transaction is successfully started on the observer where the session is created, this count is incremented.")
STAT_EVENT_ADD_DEF(TRANS_TOTAL_USED_TIME, "trans total used time", ObStatClassIds::TRANS, 30006, false, true, true, "Total duration (in microseconds) of transactions for this tenant on this machine. Each time a transaction ends on the observer where the session is created, the transaction duration is added to this count.")
STAT_EVENT_ADD_DEF(TRANS_COMMIT_COUNT, "trans commit count", ObStatClassIds::TRANS, 30007, false, true, true, "Number of successfully committed transactions for this tenant on this machine. Each time a transaction is successfully committed on the OBServer where the session is connected, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TRANS_COMMIT_TIME, "trans commit time", ObStatClassIds::TRANS, 30008, false, true, true, "Total commit duration (in microseconds) for transactions for this tenant on this machine. Each time a transaction is successfully committed on the observer where the session is created, the commit duration is added to this count.")
STAT_EVENT_ADD_DEF(TRANS_ROLLBACK_COUNT, "trans rollback count", ObStatClassIds::TRANS, 30009, false, true, true, "Number of successfully rolled back transactions for this tenant on this machine. Each time a transaction rollback succeeds on the observer where the session is created, this count is incremented.")
STAT_EVENT_ADD_DEF(TRANS_ROLLBACK_TIME, "trans rollback time", ObStatClassIds::TRANS, 30010, false, true, true, "Total rollback duration (in microseconds) for transactions for this tenant on this machine. Each time a transaction rollback succeeds on the observer where the session is created, the rollback duration is added to this count.")
STAT_EVENT_ADD_DEF(TRANS_TIMEOUT_COUNT, "trans timeout count", ObStatClassIds::TRANS, 30011, false, true, true, "Number of timeout transactions for this tenant on this machine. Each time a transaction times out on the observer where the session is created, this count is incremented.")
STAT_EVENT_ADD_DEF(TRANS_LOCAL_COUNT, "trans local trans count", ObStatClassIds::TRANS, 30012, false, true, true, "Number of completed standalone transactions (including both Commit and Rollback) for this tenant on this machine. Each time a transaction ends on the observer where the session is created, if the number of participants equals 1, this count is incremented.")
STAT_EVENT_ADD_DEF(TRANS_DIST_COUNT, "trans distribute trans count", ObStatClassIds::TRANS, 30013, false, true, true, "Number of completed distributed transactions (including both Commit and Rollback) for this tenant on this machine. Each time a transaction ends on the observer where the session is created, if the number of participants is greater than 1, this count is incremented.")
STAT_EVENT_ADD_DEF(TRANS_DISTRIBUTED_STMT_COUNT, "trans distributed stmt count", TRANS, 30014, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(TRANS_LOCAL_STMT_COUNT, "trans local stmt count", TRANS, 30015, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(TRANS_REMOTE_STMT_COUNT, "trans remote stmt count", TRANS, 30016, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(TRANS_READONLY_COUNT, "trans without participant count", ObStatClassIds::TRANS, 30017, false, true, true, "Number of completed read-only transactions (including both Commit and Rollback) for this tenant on this machine. Each time a transaction ends on the observer where the session is created, if the number of participants equals 0, this count is incremented.")
STAT_EVENT_ADD_DEF(REDO_LOG_REPLAY_COUNT, "redo log replay count", ObStatClassIds::TRANS, 30018, false, true, true, "Number of transaction Redo logs replayed within a tenant. Each time a transaction Redo log is replayed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDO_LOG_REPLAY_TIME, "redo log replay time", ObStatClassIds::TRANS, 30019, false, true, true, "Total time (in microseconds) spent replaying transaction Redo logs within a tenant. Each time a Redo log is replayed, the time taken for that replay is recorded and accumulated in this count.")
STAT_EVENT_ADD_DEF(PREPARE_LOG_REPLAY_COUNT, "prepare log replay count", ObStatClassIds::TRANS, 30020, false, true, true, "Number of transaction Prepare logs replayed within a tenant. Each time a transaction Prepare log is replayed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(PREPARE_LOG_REPLAY_TIME, "prepare log replay time", ObStatClassIds::TRANS, 30021, false, true, true, "Total time (in microseconds) spent replaying transaction Prepare logs within a tenant. Each time a Prepare log is replayed, the time taken for that replay is recorded and accumulated in this count.")
STAT_EVENT_ADD_DEF(COMMIT_LOG_REPLAY_COUNT, "commit log replay count", ObStatClassIds::TRANS, 30022, false, true, true, "Number of transaction Commit logs replayed within a tenant. Each time a transaction Commit log is replayed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(COMMIT_LOG_REPLAY_TIME, "commit log replay time", ObStatClassIds::TRANS, 30023, false, true, true, "Total time (in microseconds) spent replaying transaction Commit logs within a tenant. Each time a Commit log is replayed, the time taken for that replay is recorded and accumulated in this count.")
STAT_EVENT_ADD_DEF(ABORT_LOG_REPLAY_COUNT, "abort log replay count", ObStatClassIds::TRANS, 30024, false, true, true, "Number of Abort logs for transactions replayed within the tenant. Each time an Abort log for a transaction is replayed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(ABORT_LOG_REPLAY_TIME, "abort log replay time", ObStatClassIds::TRANS, 30025, false, true, true, "Total time (in microseconds) spent replaying transaction Abort logs within a tenant. Each time an Abort log is replayed, the time taken for that replay is recorded and accumulated in this count.")
STAT_EVENT_ADD_DEF(CLEAR_LOG_REPLAY_COUNT, "clear log replay count", ObStatClassIds::TRANS, 30026, false, true, true, "Number of transaction Clear logs replayed within a tenant. Each time a transaction Clear log is replayed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(CLEAR_LOG_REPLAY_TIME, "clear log replay time", ObStatClassIds::TRANS, 30027, false, true, true, "Total time (in microseconds) spent replaying transaction Clear logs within a tenant. Each time a Clear log is replayed, the time taken for that replay is recorded and accumulated in this count.")
STAT_EVENT_ADD_DEF(GTS_REQUEST_TOTAL_COUNT, "gts request total count", ObStatClassIds::TRANS, 30053, false, true, true, "Total number of GTS requests processed by the GTS server. Each time the GTS server finishes processing a GTS request, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(GTS_ACQUIRE_TOTAL_TIME, "gts acquire total time", ObStatClassIds::TRANS, 30054, false, true, true, "Total wait time for asynchronous GTS retrieval (in microseconds). Each time GTS is retrieved, the wait time is added to this count. (Currently not implemented, so this metric is not meaningful.)")
STAT_EVENT_ADD_DEF(GTS_ACQUIRE_TOTAL_WAIT_COUNT, "gts acquire total wait count", ObStatClassIds::TRANS, 30056, false, true, true, "Total number of asynchronous GTS retrievals. Each time GTS is retrieved asynchronously, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(GTS_WAIT_ELAPSE_TOTAL_TIME, "gts wait elapse total time", ObStatClassIds::TRANS, 30063, false, true, true, "Total wait time (in microseconds) for GTS to be pushed forward in asynchronous scenarios. Each time the condition for GTS to be pushed forward is met, the wait time is added to this count.")
STAT_EVENT_ADD_DEF(GTS_WAIT_ELAPSE_TOTAL_COUNT, "gts wait elapse total count", ObStatClassIds::TRANS, 30064, false, true, true, "")
STAT_EVENT_ADD_DEF(GTS_WAIT_ELAPSE_TOTAL_WAIT_COUNT, "gts wait elapse total wait count", ObStatClassIds::TRANS, 30065, false, true, true, "Total number of waits for GTS to be pushed forward in asynchronous scenarios. Each time the condition for GTS to be pushed forward is met, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(GTS_RPC_COUNT, "gts rpc count", ObStatClassIds::TRANS, 30066, false, true, true, "Total number of GTS retrievals by the GTS client via RPC. Each time the GTS client sends an RPC request for GTS, this count is incremented by 1. (Currently not maintained and can be removed.)")
STAT_EVENT_ADD_DEF(GTS_TRY_ACQUIRE_TOTAL_COUNT, "gts try acquire total count", ObStatClassIds::TRANS, 30067, false, true, true, "")
STAT_EVENT_ADD_DEF(GTS_TRY_WAIT_ELAPSE_TOTAL_COUNT, "gts try wait elapse total count", ObStatClassIds::TRANS, 30068, false, true, true, "")
STAT_EVENT_ADD_DEF(TRANS_ELR_ENABLE_COUNT, "trans early lock release enable count", ObStatClassIds::TRANS, 30077, false, true, true, "")
STAT_EVENT_ADD_DEF(TRANS_ELR_UNABLE_COUNT, "trans early lock release unable count", ObStatClassIds::TRANS, 30078, false, true, true, "")
STAT_EVENT_ADD_DEF(READ_ELR_ROW_COUNT, "read elr row count", ObStatClassIds::TRANS, 30079, false, true, true, "Total number of rows with early row lock release during MemTable writes. During MemTable writes, this metric records the number of rows where row locks are successfully released early.")
STAT_EVENT_ADD_DEF(TRANS_LOCAL_TOTAL_USED_TIME, "local trans total used time", ObStatClassIds::TRANS, 30080, false, true, true, "Total duration (in microseconds) of completed standalone transactions (including both Commit and Rollback) for this tenant on this machine. Each time a transaction ends on the observer where the session is created, if the number of participants equals 1, the transaction duration is added to this count.")
STAT_EVENT_ADD_DEF(TRANS_DIST_TOTAL_USED_TIME, "distributed trans total used time", ObStatClassIds::TRANS, 30081, false, true, true, "Total duration (in microseconds) of completed distributed transactions (including both Commit and Rollback) for this tenant on this machine. Each time a transaction ends on the observer where the session is created, if the number of participants is greater than 1, the transaction duration is added to this count.")
STAT_EVENT_ADD_DEF(TX_DATA_HIT_MINI_CACHE_COUNT, "tx data hit mini cache count", ObStatClassIds::TRANS, 30082, false, true, true, "Number of MINI Cache hits when reading transaction data tables. MINI Cache is the fastest cache for TxData. Higher hit counts indicate better performance. (MINI Cache is a request-level cache, with one per Access Context.) Each time a TxData is read from the MINI Cache, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TX_DATA_HIT_KV_CACHE_COUNT, "tx data hit kv cache count", ObStatClassIds::TRANS, 30083, false, true, true, "Number of KV Cache hits when reading transaction data. The performance of KV Cache is slightly weaker than MINI Cache. Most reads are expected to hit either the KV or MINI Cache. Each time a TxData is read from the KV Cache, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TX_DATA_READ_TX_CTX_COUNT, "tx data read tx ctx count", ObStatClassIds::TRANS, 30084, false, true, true, "Number of transaction context table hits when reading transaction data. Each time a TxData is read from the transaction context table, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TX_DATA_READ_TX_DATA_MEMTABLE_COUNT, "tx data read tx data memtable count", ObStatClassIds::TRANS, 30085, false, true, true, "Number of MemTable reads when cache is missed while reading transaction data. Each time a TxData is read from the transaction data table MemTable, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TX_DATA_READ_TX_DATA_SSTABLE_COUNT, "tx data read tx data sstable count", ObStatClassIds::TRANS, 30086, false, true, true, "Number of SSTable reads when reading transaction data. Reading TxData from the SSTable is the slowest read operation, so this metric is expected to not be high. Each time a TxData is read from the SSTable of the transaction data table, this count is incremented by 1.")
// XA TRANS
STAT_EVENT_ADD_DEF(XA_START_TOTAL_COUNT, "xa start total count", ObStatClassIds::TRANS, 30200, false, true, true, "Total number of xa_start statement executions for XA transactions, including both successes and failures. After executing the xa_start logic on the transaction side, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_START_TOTAL_USED_TIME, "xa start total used time", ObStatClassIds::TRANS, 30201, false, true, true, "Total execution time (in microseconds) of xa_start statements for XA transactions, including both successes and failures. After executing the xa_start logic on the transaction side, the locally consumed time is added to this count.")
STAT_EVENT_ADD_DEF(XA_START_REMOTE_COUNT, "xa start with rpc total count", ObStatClassIds::TRANS, 30202, false, true, true, "Total number of successful remote xa_start statement executions for XA transactions. After executing the xa_start logic on the transaction side, if xa_start is executed remotely and succeeds, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_START_FAIL_COUNT, "failed xa start total count", ObStatClassIds::TRANS, 30203, false, true, true, "Total number of failed xa_start statement executions for XA transactions. After executing the xa_start logic on the transaction side, if execution fails, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_END_TOTAL_COUNT, "xa end total count", ObStatClassIds::TRANS, 30204, false, true, true, "Total number of xa_end statement executions for XA transactions, including both successes and failures. After executing the xa_end logic on the transaction side, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_END_TOTAL_USED_TIME, "xa end total used count", ObStatClassIds::TRANS, 30205, false, true, true, "Total execution time (in microseconds) of xa_end statements for XA transactions. After executing the xa_end logic on the transaction side, the locally consumed time is added to this count.")
STAT_EVENT_ADD_DEF(XA_END_REMOTE_COUNT, "xa end with rpc total count", ObStatClassIds::TRANS, 30206, false, true, true, "Total number of successful remote xa_end statement executions for XA transactions. After executing the xa_end logic on the transaction side, if it is a remote execution and succeeds, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_END_FAIL_COUNT, "failed xa end total count", ObStatClassIds::TRANS, 30207, false, true, true, "Total number of failed xa_end statement executions for XA transactions. When processing xa_end on the transaction side, if an error occurs during execution, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_PREPARE_TOTAL_COUNT, "xa prepare total count", ObStatClassIds::TRANS, 30208, false, true, true, "Total number of xa_prepare statement executions for XA transactions, including both successes and failures. After executing the xa_prepare logic on the transaction side, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_PREPARE_TOTAL_USED_TIME, "xa prepare total used time", ObStatClassIds::TRANS, 30209, false, true, true, "Total execution time (in microseconds) of xa_prepare statements for XA transactions, including both successes and failures. After executing the xa_prepare logic on the transaction side, the locally consumed time is added to this count.")
STAT_EVENT_ADD_DEF(XA_PREPARE_REMOTE_COUNT, "xa prepare with rpc total count", ObStatClassIds::TRANS, 30210, false, true, true, "Total number of successful remote xa_prepare statement executions for XA transactions. After executing the xa_start logic on the transaction side, if the xa_prepare is executed remotely and succeeds, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_PREPARE_FAIL_COUNT, "failed xa prepare total count", ObStatClassIds::TRANS, 30211, false, true, true, "Total number of failed xa_prepare statement executions for XA transactions. After executing the xa_prepare logic on the transaction side, if execution fails, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_COMMIT_TOTAL_COUNT, "xa commit total count", ObStatClassIds::TRANS, 30212, false, true, true, "Total number of xa_commit statement executions for XA transactions, including both successes and failures. After executing the xa_commit logic on the transaction side, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_COMMIT_TOTAL_USED_TIME, "xa commit total used time", ObStatClassIds::TRANS, 30213, false, true, true, "Total execution time (in microseconds) of xa_commit statements for XA transactions. After executing the xa_commit logic on the transaction side, the locally consumed time is added to this count.")
STAT_EVENT_ADD_DEF(XA_COMMIT_REMOTE_COUNT, "xa commit with rpc total count", ObStatClassIds::TRANS, 30214, false, true, true, "Total number of successful remote xa_commit statement executions for XA transactions. After executing the xa_commit logic on the transaction side, if it is a remote execution and succeeds, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_COMMIT_FAIL_COUNT, "failed xa commit total count", ObStatClassIds::TRANS, 30215, false, true, true, "Total number of failed xa_commit statement executions for XA transactions. When processing xa_commit on the transaction side, if an error occurs during execution, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_ROLLBACK_TOTAL_COUNT, "xa rollback total count", ObStatClassIds::TRANS, 30216, false, true, true, "Total number of xa_rollback statement executions for XA transactions, including both successes and failures. After executing the xa_rollback logic on the transaction side, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_ROLLBACK_TOTAL_USED_TIME, "xa rollback total used time", ObStatClassIds::TRANS, 30217, false, true, true, "Total execution time (in microseconds) of xa_rollback statements for XA transactions, including both successes and failures. After executing the xa_rollback logic on the transaction side, the locally consumed time is added to this count.")
STAT_EVENT_ADD_DEF(XA_ROLLBACK_REMOTE_COUNT, "xa rollback with rpc total count", ObStatClassIds::TRANS, 30218, false, true, true, "Total number of successful remote xa_rollback statement executions for XA transactions. After executing the xa_start logic on the transaction side, if the xa_rollback is executed remotely and succeeds, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_ROLLBACK_FAIL_COUNT, "failed xa rollback total count", ObStatClassIds::TRANS, 30219, false, true, true, "Total number of failed xa_rollback statement executions for XA transactions. After executing the xa_rollback logic on the transaction side, if execution fails, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_TRANS_START_COUNT, "started xa trans count", ObStatClassIds::TRANS, 30220, false, true, true, "Total number of successfully started XA transactions. After successfully starting an XA transaction on the transaction side, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_READ_ONLY_TRANS_TOTAL_COUNT, "read only xa trans total count", ObStatClassIds::TRANS, 30221, false, true, true, "Total number of read-only XA transactions. When committing an XA transaction on the transaction side, if the XA transaction is read-only, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_ONE_PHASE_COMMIT_TOTAL_COUNT, "xa trans with one phase commit total count", ObStatClassIds::TRANS, 30222, false, true, true, "Total number of one-phase committed XA transactions. When committing an XA transaction on the transaction side, if one-phase commit is used, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_INNER_SQL_TOTAL_COUNT, "inner sql total count in xa statement", ObStatClassIds::TRANS, 30223, false, true, true, "Total number of inner SQL executions during XA transaction logic execution. When executing XA logic on the transaction side, each inner SQL execution increments this count by 1.")
STAT_EVENT_ADD_DEF(XA_INNER_SQL_TEN_MS_COUNT, "total count of inner sql (latency >= 10ms) in xa statement", ObStatClassIds::TRANS, 30224, false, true, true, "Total number of inner SQL executions exceeding 10ms during XA transaction logic execution. When executing XA logic on the transaction side, if an inner SQL execution takes more than 10ms, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_INNER_SQL_TWENTY_MS_COUNT, "total count of inner sql (latency >= 20ms) in xa statement", ObStatClassIds::TRANS, 30225, false, true, true, "Total number of inner SQL executions exceeding 20ms during XA transaction logic execution. When executing XA logic on the transaction side, if an inner SQL execution takes more than 20ms, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_INNER_SQL_TOTAL_USED_TIME, "inner sql total used time in xa statement", ObStatClassIds::TRANS, 30226, false, true, true, "Total inner SQL execution time (in microseconds) during XA transaction logic execution. When executing XA logic on the transaction side, after each inner SQL execution, the time consumed is added to this count.")
STAT_EVENT_ADD_DEF(XA_INNER_RPC_TOTAL_COUNT, "inner rpc total count in xa statement", ObStatClassIds::TRANS, 30227, false, true, true, "Total number of RPC calls during XA transaction logic execution. When executing XA logic on the transaction side, each RPC call increments this count by 1.")
STAT_EVENT_ADD_DEF(XA_INNER_RPC_TEN_MS_COUNT, "total count of inner rpc (latency >= 10ms) in xa statement", ObStatClassIds::TRANS, 30228, false, true, true, "Total number of RPC calls exceeding 10ms during XA transaction logic execution. When executing XA logic on the transaction side, if an RPC call takes more than 10ms, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_INNER_RPC_TWENTY_MS_COUNT, "total count of inner rpc (latency >= 20ms) in xa statement", ObStatClassIds::TRANS, 30229, false, true, true, "Total number of RPC calls exceeding 20ms during XA transaction logic execution. When executing XA logic on the transaction side, if an RPC call takes more than 20ms, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(XA_INNER_RPC_TOTAL_USED_TIME, "inner rpc total used time in xa statement", ObStatClassIds::TRANS, 30230, false, true, true, "Total RPC execution time (in microseconds) during XA transaction logic execution. When executing XA logic on the transaction side, after each RPC call, the time consumed by the RPC is added to this count.")
// DBLINK TRANS
STAT_EVENT_ADD_DEF(DBLINK_TRANS_COUNT, "dblink trans total count", ObStatClassIds::TRANS, 30231, false, true, true, "Total number of DBLink transactions. Each time a DBLink transaction is started, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(DBLINK_TRANS_FAIL_COUNT, "failed dblink trans total count", ObStatClassIds::TRANS, 30232, false, true, true, "Total number of failed DBLink transactions. Each time a DBLink transaction is started and fails, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(DBLINK_TRANS_PROMOTION_COUNT, "dblink trans promotion total count", ObStatClassIds::TRANS, 30233, false, true, true, "Total number of regular transactions upgraded to DBLink transactions. Each time a regular transaction is upgraded to a DBLink transaction, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(DBLINK_TRANS_CALLBACK_COUNT, "dblink trans callback total count", ObStatClassIds::TRANS, 30234, false, true, true, "Total reverse recovery count for DBLink transactions. Each time a reverse recovery is executed during a DBLink transaction, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(DBLINK_TRANS_COMMIT_COUNT, "dblink trans commit total count", ObStatClassIds::TRANS, 30235, false, true, true, "Total number of DBLink transaction commits. Each time a DBLink transaction executes a commit statement, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(DBLINK_TRANS_COMMIT_USED_TIME, "dblink trans commit total used time", ObStatClassIds::TRANS, 30236, false, true, true, "Total commit duration (in microseconds) for DBLink transactions. Each time a DBLink transaction completes a commit statement, the duration of that commit is added to this count.")
STAT_EVENT_ADD_DEF(DBLINK_TRANS_COMMIT_FAIL_COUNT, "failed dblink trans commit total count", ObStatClassIds::TRANS, 30237, false, true, true, "Total number of failed DBLink transaction commits. Each time a DBLink transaction executes a commit statement and fails, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(DBLINK_TRANS_ROLLBACK_COUNT, "dblink trans rollback total count", ObStatClassIds::TRANS, 30238, false, true, true, "Total number of DBLink transaction rollbacks. Each time a DBLink transaction executes a rollback statement, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(DBLINK_TRANS_ROLLBACK_USED_TIME, "dblink trans rollback total used time", ObStatClassIds::TRANS, 30239, false, true, true, "Total rollback duration (in microseconds) for DBLink transactions. Each time a DBLink transaction completes a rollback statement, the duration of that rollback is added to this count.")
STAT_EVENT_ADD_DEF(DBLINK_TRANS_ROLLBACK_FAIL_COUNT, "failed dblink trans rollback total count", ObStatClassIds::TRANS, 30240, false, true, true, "Total number of failed DBLink transaction rollbacks. Each time a DBLink transaction executes a rollback statement and fails, this count is incremented by 1.")

// SQL
STAT_EVENT_ADD_DEF(PLAN_CACHE_HIT, "PLAN_CACHE_HIT", SQL, "PLAN_CACHE_HIT", true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(PLAN_CACHE_MISS, "PLAN_CACHE_MISS", SQL, "PLAN_CACHE_MISS", true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SQL_SELECT_COUNT, "sql select count", ObStatClassIds::SQL, 40000, false, true, true, "Number of SQL SELECT executions.")
STAT_EVENT_ADD_DEF(SQL_SELECT_TIME, "sql select time", ObStatClassIds::SQL, 40001, false, true, true, "Total time (in microseconds) spent on SQL SELECT execution.")
STAT_EVENT_ADD_DEF(SQL_INSERT_COUNT, "sql insert count", ObStatClassIds::SQL, 40002, false, true, true, "Total number of INSERT statements executed by users.")
STAT_EVENT_ADD_DEF(SQL_INSERT_TIME, "sql insert time", ObStatClassIds::SQL, 40003, false, true, true, "Total execution time (in microseconds) of INSERT statements executed by users.")
STAT_EVENT_ADD_DEF(SQL_REPLACE_COUNT, "sql replace count", ObStatClassIds::SQL, 40004, false, true, true, "Total number of REPLACE statements executed by users.")
STAT_EVENT_ADD_DEF(SQL_REPLACE_TIME, "sql replace time", ObStatClassIds::SQL, 40005, false, true, true, "Total execution time (in microseconds) of REPLACE statements executed by users.")
STAT_EVENT_ADD_DEF(SQL_UPDATE_COUNT, "sql update count", ObStatClassIds::SQL, 40006, false, true, true, "Total number of UPDATE statements executed by users.")
STAT_EVENT_ADD_DEF(SQL_UPDATE_TIME, "sql update time", ObStatClassIds::SQL, 40007, false, true, true, "Total execution time (in microseconds) of UPDATE statements executed by users.")
STAT_EVENT_ADD_DEF(SQL_DELETE_COUNT, "sql delete count", ObStatClassIds::SQL, 40008, false, true, true, "Total number of DELETE statements executed by users.")
STAT_EVENT_ADD_DEF(SQL_DELETE_TIME, "sql delete time", ObStatClassIds::SQL, 40009, false, true, true, "Total execution time (in microseconds) of DELETE statements executed by users.")
STAT_EVENT_ADD_DEF(SQL_OTHER_COUNT, "sql other count", ObStatClassIds::SQL, 40018, false, true, true, "Number of SQL executions excluding SELECT, INSERT, REPLACE, UPDATE, DELETE, COMMIT, and ROLLBACK.")
STAT_EVENT_ADD_DEF(SQL_OTHER_TIME, "sql other time", ObStatClassIds::SQL, 40019, false, true, true, "Total execution time (in microseconds) of SQL excluding SELECT, INSERT, REPLACE, UPDATE, DELETE, COMMIT, and ROLLBACK.")
STAT_EVENT_ADD_DEF(SQL_PS_PREPARE_COUNT, "ps prepare count", ObStatClassIds::SQL, 40020, false, true, true, "Number of times PREPARE is performed for PREPARE STATEMENT.")
STAT_EVENT_ADD_DEF(SQL_PS_PREPARE_TIME, "ps prepare time", ObStatClassIds::SQL, 40021, false, true, true, "Total time (in microseconds) spent performing PREPARE for PREPARE STATEMENT.")
STAT_EVENT_ADD_DEF(SQL_PS_EXECUTE_COUNT, "ps execute count", ObStatClassIds::SQL, 40022, false, true, true, "Number of times EXECUTE is performed for PREPARE STATEMENT.")
STAT_EVENT_ADD_DEF(SQL_PS_CLOSE_COUNT, "ps close count", ObStatClassIds::SQL, 40023, false, true, true, "Number of times CLOSE is executed for PREPARE STATEMENT.")
STAT_EVENT_ADD_DEF(SQL_PS_CLOSE_TIME, "ps close time", ObStatClassIds::SQL, 40024, false, true, true, "Total execution time (in microseconds) of CLOSE for PREPARE STATEMENT.")
STAT_EVENT_ADD_DEF(SQL_COMMIT_COUNT, "sql commit count", ObStatClassIds::SQL, 40025, false, true, true, "Number of COMMIT executions in SQL statements.")
STAT_EVENT_ADD_DEF(SQL_COMMIT_TIME, "sql commit time", ObStatClassIds::SQL, 40026, false, true, true, "Total execution time (in microseconds) of COMMIT.")
STAT_EVENT_ADD_DEF(SQL_ROLLBACK_COUNT, "sql rollback count", ObStatClassIds::SQL, 40027, false, true, true, "Number of ROLLBACK executions.")
STAT_EVENT_ADD_DEF(SQL_ROLLBACK_TIME, "sql rollback time", ObStatClassIds::SQL, 40028, false, true, true, "Total time (in microseconds) spent on ROLLBACK execution.")

STAT_EVENT_ADD_DEF(SQL_OPEN_CURSORS_CURRENT, "opened cursors current", ObStatClassIds::SQL, 40030, true, true, true, "Current number of opened cursors. The count is incremented by 1 for each cursor opened and decremented by 1 for each cursor closed.")
STAT_EVENT_ADD_DEF(SQL_OPEN_CURSORS_CUMULATIVE, "opened cursors cumulative", ObStatClassIds::SQL, 40031, true, true, true, "Cumulative number of opened cursors. This count is incremented by 1 for each cursor opened.")

STAT_EVENT_ADD_DEF(SQL_LOCAL_COUNT, "sql local count", ObStatClassIds::SQL, 40010, false, true, true, "Number of LOCAL executions of SQL.")
STAT_EVENT_ADD_DEF(SQL_REMOTE_COUNT, "sql remote count", ObStatClassIds::SQL, 40011, false, true, true, "Number of SQL REMOTE executions.")
STAT_EVENT_ADD_DEF(SQL_DISTRIBUTED_COUNT, "sql distributed count", ObStatClassIds::SQL, 40012, false, true, true, "Number of distributed executions of SQL statements.")
STAT_EVENT_ADD_DEF(ACTIVE_SESSIONS, "active sessions", ObStatClassIds::SQL, 40013, false, true, true, "Number of active sessions. The number of active sessions. The count is increments by 1 for each new connection and decremented by 1 for each disconnection.")
STAT_EVENT_ADD_DEF(SQL_SINGLE_QUERY_COUNT, "single query count", ObStatClassIds::SQL, 40014, false, true, true, "Total number of statements sent via a non-multiple query protocol.")
STAT_EVENT_ADD_DEF(SQL_MULTI_QUERY_COUNT, "multiple query count", ObStatClassIds::SQL, 40015, false, true, true, "Total number of statements sent via the multiple query protocol.")
STAT_EVENT_ADD_DEF(SQL_MULTI_ONE_QUERY_COUNT, "multiple query with one stmt count", ObStatClassIds::SQL, 40016, false, true, true, "Number of statements sent via the multiple query protocol but actually containing only one SQL statement.")

STAT_EVENT_ADD_DEF(SQL_INNER_SELECT_COUNT, "sql inner select count", ObStatClassIds::SQL, 40100, false, true, true, "")
STAT_EVENT_ADD_DEF(SQL_INNER_SELECT_TIME, "sql inner select time", ObStatClassIds::SQL, 40101, false, true, true, "")
STAT_EVENT_ADD_DEF(SQL_INNER_INSERT_COUNT, "sql inner insert count", ObStatClassIds::SQL, 40102, false, true, true, "Total number of INSERT statements executed by inner SQL. Inner SQL refers to SQL statements not sent by users, but by OceanBase internally, typically for querying or modifying internal tables.")
STAT_EVENT_ADD_DEF(SQL_INNER_INSERT_TIME, "sql inner insert time", ObStatClassIds::SQL, 40103, false, true, true, "Total execution time (in microseconds) of INSERT statements executed by inner SQL. Inner SQL refers to SQL statements not sent by users, but by OceanBase internally, typically for querying or modifying internal tables.")
STAT_EVENT_ADD_DEF(SQL_INNER_REPLACE_COUNT, "sql inner replace count", ObStatClassIds::SQL, 40104, false, true, true, "Total number of REPLACE statements executed by inner SQL. Inner SQL refers to SQL statements not sent by users, but by OceanBase internally, typically for querying or modifying internal tables.")
STAT_EVENT_ADD_DEF(SQL_INNER_REPLACE_TIME, "sql inner replace time", ObStatClassIds::SQL, 40105, false, true, true, "Total execution time (in microseconds) of REPLACE statements executed by inner SQL. Inner SQL refers to SQL statements not sent by users, but by OceanBase internally, typically for querying or modifying internal tables.")
STAT_EVENT_ADD_DEF(SQL_INNER_UPDATE_COUNT, "sql inner update count", ObStatClassIds::SQL, 40106, false, true, true, "Total number of UPDATE statements executed by inner SQL. Inner SQL refers to SQL statements not sent by users, but by OceanBase internally, typically for querying or modifying internal tables.")
STAT_EVENT_ADD_DEF(SQL_INNER_UPDATE_TIME, "sql inner update time", ObStatClassIds::SQL, 40107, false, true, true, "Total execution time (in microseconds) of UPDATE statements executed by inner SQL. Inner SQL refers to SQL statements not sent by users, but by OceanBase internally, typically for querying or modifying internal tables.")
STAT_EVENT_ADD_DEF(SQL_INNER_DELETE_COUNT, "sql inner delete count", ObStatClassIds::SQL, 40108, false, true, true, "Total number of DELETE statements executed by inner SQL. Inner SQL refers to SQL statements not sent by users, but by OceanBase internally, typically for querying or modifying internal tables.")
STAT_EVENT_ADD_DEF(SQL_INNER_DELETE_TIME, "sql inner delete time", ObStatClassIds::SQL, 40109, false, true, true, "Total execution time (in microseconds) of DELETE statements executed by inner SQL. Inner SQL refers to SQL statements not sent by users, but by OceanBase internally, typically for querying or modifying internal tables.")
STAT_EVENT_ADD_DEF(SQL_INNER_OTHER_COUNT, "sql inner other count", ObStatClassIds::SQL, 40110, false, true, true, "")
STAT_EVENT_ADD_DEF(SQL_INNER_OTHER_TIME, "sql inner other time", ObStatClassIds::SQL, 40111, false, true, true, "")
STAT_EVENT_ADD_DEF(SQL_USER_LOGONS_CUMULATIVE, "user logons cumulative", ObStatClassIds::SQL, 40112, false, true, true, "Cumulative number of user logins.")
STAT_EVENT_ADD_DEF(SQL_USER_LOGOUTS_CUMULATIVE, "user logouts cumulative", ObStatClassIds::SQL, 40113, false, true, true, "Cumulative number of user logouts. Each time a user disconnects a session, the count increases by one.")
STAT_EVENT_ADD_DEF(SQL_USER_LOGONS_FAILED_CUMULATIVE, "user logons failed cumulative", ObStatClassIds::SQL, 40114, false, true, true, "Cumulative number of failed user logins. Failure occurs during the process of connecting to the observer and creating a session.")
STAT_EVENT_ADD_DEF(SQL_USER_LOGONS_COST_TIME_CUMULATIVE, "user logons time cumulative", ObStatClassIds::SQL, 40115, false, true, true, "Cumulative user login time (in microseconds). The total time spent in the process of user login and session creation.")
STAT_EVENT_ADD_DEF(SQL_LOCAL_TIME, "sql local execute time", ObStatClassIds::SQL, 40116, false, true, true, "")
STAT_EVENT_ADD_DEF(SQL_REMOTE_TIME, "sql remote execute time", ObStatClassIds::SQL, 40117, false, true, true, "Total time (in microseconds) spent on SQL REMOTE execution.")
STAT_EVENT_ADD_DEF(SQL_DISTRIBUTED_TIME, "sql distributed execute time", ObStatClassIds::SQL, 40118, false, true, true, "Total execution time (in microseconds) of distributed SQL statements.")
STAT_EVENT_ADD_DEF(SQL_FAIL_COUNT, "sql fail count", ObStatClassIds::SQL, 40119, false, true, true, "Number of failed SQL executions.")
STAT_EVENT_ADD_DEF(SQL_INNER_LOCAL_COUNT, "inner sql local count", ObStatClassIds::SQL, 40120, false, true, true, "Number of LOCAL executions of INNER SQL.")
STAT_EVENT_ADD_DEF(SQL_INNER_REMOTE_COUNT, "inner sql remote count", ObStatClassIds::SQL, 40121, false, true, true, "Number of remote executions of INNER SQL.")
STAT_EVENT_ADD_DEF(SQL_INNER_DISTRIBUTED_COUNT, "inner sql distributed count", ObStatClassIds::SQL, 40122, false, true, true, "Number of distributed executions of INNER SQL.")
STAT_EVENT_ADD_DEF(SQL_INNER_LOCAL_TIME, "inner sql local execute time", ObStatClassIds::SQL, 40123, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SQL_INNER_REMOTE_TIME, "inner sql remote execute time", ObStatClassIds::SQL, 40124, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SQL_INNER_DISTRIBUTED_TIME, "inner sql distributed execute time", ObStatClassIds::SQL, 40125, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SQL_INSERT_DUPLICATE_COUNT, "try insert duplicate count", ObStatClassIds::SQL, 40126, true, true, true, "Total number of actual conflicting rows in insertup or replace statements. If actual conflicts occur in insertup or replace statements, performance may be affected.")

// CACHE
STAT_EVENT_ADD_DEF(ROW_CACHE_HIT, "row cache hit", ObStatClassIds::CACHE, 50000, true, true, true, "Number of cache hits when the TABLE GET operator prefetches data rows. In the lookup_in_cache function, the system checks if the data row is in the cache when prefetching. If a cache hit occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(ROW_CACHE_MISS, "row cache miss", ObStatClassIds::CACHE, 50001, true, true, true, "Number of cache misses when the TABLE GET operator prefetches data rows. In the lookup_in_cache function, the system checks if the data row is in the cache when prefetching. If a cache miss occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(BLOOM_FILTER_CACHE_HIT, "bloom filter cache hit", ObStatClassIds::CACHE, 50004, true, true, true, "Number of macro block Bloom filter cache hits. This metric indicates that a macro block Bloom filter is constructed and used by SQL statements. When a user executes an insert statement, a primary key conflict check is required. If the data being checked is on disk, a common performance optimization is to construct Bloom filters for the relevant data range to avoid unnecessary I/O. These metrics are related to the Bloom filter cache.")
STAT_EVENT_ADD_DEF(BLOOM_FILTER_CACHE_MISS, "bloom filter cache miss", ObStatClassIds::CACHE, 50005, true, true, true, "Number of macro block Bloom filter cache misses. This metric indicates that the corresponding macro block Bloom filter is not constructed. When a user executes an insert statement, a primary key conflict check is required. If the data being checked is on disk, a common performance optimization is to construct Bloom filters for the relevant data range to avoid unnecessary I/O. These metrics are related to the Bloom filter cache.")
STAT_EVENT_ADD_DEF(BLOOM_FILTER_FILTS, "bloom filter filts", ObStatClassIds::CACHE, 50006, true, true, true, "Number of times the macro block Bloom filter effectively filtered out rows, meaning the corresponding row does not exist. When a user executes an insert statement, a primary key conflict check is required. If the data being checked is on disk, a common performance optimization is to construct Bloom filters for the relevant data range to avoid unnecessary I/O. These metrics are related to the Bloom filter cache.")
STAT_EVENT_ADD_DEF(BLOOM_FILTER_PASSES, "bloom filter passes", ObStatClassIds::CACHE, 50007, true, true, true, "Number of times the macro block Bloom filter did not filter out rows, meaning the corresponding row may exist. When a user executes an insert statement, a primary key conflict check is required. If the data being checked is on disk, a common performance optimization is to construct Bloom filters for the relevant data range to avoid unnecessary I/O. These metrics are related to the Bloom filter cache.")
STAT_EVENT_ADD_DEF(BLOCK_CACHE_HIT, "block cache hit", ObStatClassIds::CACHE, 50008, true, true, true, "Number of block cache hits when fetching micro blocks. When fetching a micro block, the system checks if the micro block is in the cache. If a cache hit occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(BLOCK_CACHE_MISS, "block cache miss", ObStatClassIds::CACHE, 50009, true, true, true, "Number of block cache misses when fetching micro blocks. When fetching a micro block, the system checks if the micro block is in the cache. If a cache miss occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_HIT, "location cache hit", ObStatClassIds::CACHE, 50010, false, true, true, "Number of location cache hits. The number of cache hits in ls_location_cache and tablet_ls_cache. When querying the mapping between tablet and logstream or the logstream location information, if valid data is successfully retrieved from the local cache, this count is incremented by 1. This is triggered in the get methods of ObTabletLSService and ObLSLocationService.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_MISS, "location cache miss", ObStatClassIds::CACHE, 50011, false, true, true, "Number of location cache misses. The number of cache misses in ls_location_cache and tablet_ls_cache. When querying the mapping between tablet and logstream or the logstream location information, if valid data cannot be retrieved from the local cache (due to the cache being nonexistent, expired, or invalid), this count is incremented by 1. In the get methods of ObTabletLSService and ObLSLocationService, this metric increases when is_cache_hit is false.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_WAIT, "location cache wait", ObStatClassIds::CACHE, 50012, false, true, true, "Number of location cache misses when queried via __all_virtual_proxy_schema. When querying tablet location information through the proxy virtual table (ObAllVirtualProxySchema), if the mapping between tablet and logstream or the logstream location information cannot be retrieved from the cache, this count is incremented by 1. In the fetch_tablet_location_ method, this is triggered when calls to location_service_->nonblock_get to obtain the tablet's ls_id or the logstream's location fail.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_PROXY_HIT, "location cache get hit from proxy virtual table", ObStatClassIds::CACHE, 50013, false, true, true, "Number of location cache hits when queried via __all_virtual_proxy_schema. When querying tablet location information through the proxy virtual table (ObAllVirtualProxySchema), if the mapping between tablet and logstream and the logstream location information are successfully retrieved from the cache, this count is incremented by 1. In the fetch_tablet_location_ method, this is triggered when consecutive calls to location_service_->nonblock_get to obtain the tablet's ls_id and the logstream's location are both successful.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_PROXY_MISS, "location cache get miss from proxy virtual table", ObStatClassIds::CACHE, 50014, false, true, true, "Number of location cache misses when queried via __all_virtual_proxy_schema. When querying tablet location information through the proxy virtual table (ObAllVirtualProxySchema), if the mapping between tablet and logstream or the logstream location information cannot be retrieved from the cache, this count is incremented by 1. In the fetch_tablet_location_ method, this is triggered when calls to location_service_->nonblock_get to obtain the tablet's ls_id or the logstream's location fail.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_CLEAR_LOCATION, "location cache nonblock renew", ObStatClassIds::CACHE, 50015, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_CLEAR_LOCATION_IGNORED, "location cache nonblock renew ignored", ObStatClassIds::CACHE, 50016, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_NONBLOCK_HIT, "location nonblock get hit", ObStatClassIds::CACHE, 50017, false, true, true, "Number of non-blocking location cache hits in ls-location-cache and tablet-ls-cache. When using the nonblock_get method to query the mapping between tablet and logstream or the logstream location information, if valid data is successfully retrieved from the local cache, this count is incremented by 1. This is triggered in the ObTabletLSService::nonblock_get and ObLSLocationService::nonblock_get methods when OB_SUCC(ret) is true. Unlike the regular get method, nonblock_get does not wait for cache updates and returns results immediately.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_NONBLOCK_MISS, "location nonblock get miss", ObStatClassIds::CACHE, 50018, false, true, true, "Number of non-blocking location cache misses in ls-location-cache and tablet-ls-cache. When using the nonblock_get method to query the mapping between tablet and logstream or the logstream location information, if valid data cannot be retrieved from the local cache (due to the cache being nonexistent, expired, or invalid), this count is incremented by 1. This is triggered in the ObTabletLSService::nonblock_get and ObLSLocationService::nonblock_get methods when ret is OB_CACHE_NOT_HIT. Unlike the regular get method, nonblock_get does not wait for cache updates and immediately returns a miss result.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_RPC_CHECK_LEADER, "location check leader count", ObStatClassIds::CACHE, 50019, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_RPC_CHECK_MEMBER, "location check member count", ObStatClassIds::CACHE, 50020, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_RPC_CHECK, "location cache rpc renew count", ObStatClassIds::CACHE, 50021, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_RENEW, "location cache renew", ObStatClassIds::CACHE, 50022, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_RENEW_IGNORED, "location cache renew ignored", ObStatClassIds::CACHE, 50023, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(MMAP_COUNT, "mmap count", ObStatClassIds::CACHE, 50024, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(MUNMAP_COUNT, "munmap count", ObStatClassIds::CACHE, 50025, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(MMAP_SIZE, "mmap size", ObStatClassIds::CACHE, 50026, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(MUNMAP_SIZE, "munmap size", ObStatClassIds::CACHE, 50027, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(KVCACHE_SYNC_WASH_TIME, "kvcache sync wash time", ObStatClassIds::CACHE, 50028, false, true, true, "Time spent (in microseconds) flushing cache memory synchronously due to insufficient memory. When try_flush_washable_mb is called and a cache flush is performed due to insufficient memory, the time spent is added to this metric.")
STAT_EVENT_ADD_DEF(KVCACHE_SYNC_WASH_COUNT, "kvcache sync wash count", ObStatClassIds::CACHE, 50029, false, true, true, "Number of times cache memory is flushed synchronously due to insufficient memory. When try_flush_washable_mb is called and a cache flush is performed due to insufficient memory, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_RPC_RENEW_FAIL, "location cache rpc renew fail count", ObStatClassIds::CACHE, 50030, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_SQL_RENEW, "location cache sql renew count", ObStatClassIds::CACHE, 50031, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(LOCATION_CACHE_IGNORE_RPC_RENEW, "location cache ignore rpc renew count", ObStatClassIds::CACHE, 50032, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(FUSE_ROW_CACHE_HIT, "fuse row cache hit", ObStatClassIds::CACHE, 50033, true, true, true, "Number of cache hits when the TABLE GET operator reads non-memtable rows. In the get_fuse_row_cache function, when the TABLE GET operator reads a non-memtable row, the system checks if the row corresponding to the rowkey is in the cache. If a cache hit occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(FUSE_ROW_CACHE_MISS, "fuse row cache miss", ObStatClassIds::CACHE, 50034, true, true, true, "Number of cache misses when the TABLE GET operator reads non-memtable rows. In the get_fuse_row_cache function, when the TABLE GET operator reads a non-memtable row, the system checks if the row corresponding to the rowkey is in the cache. If a cache miss occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SCHEMA_CACHE_HIT, "schema cache hit", ObStatClassIds::CACHE, 50035, false, true, true, "Number of successful schema retrievals from the schema cache. When querying schema information, if the relevant schema is successfully retrieved from the local cache, this count is incremented by 1. This is triggered in the ObSchemaCache::get_schema method when cache_.get() is successful.")
STAT_EVENT_ADD_DEF(SCHEMA_CACHE_MISS, "schema cache miss", ObStatClassIds::CACHE, 50036, false, true, true, "Number of unsuccessful schema retrievals from the schema cache. When querying schema information, if the relevant schema cannot be retrieved from the local cache (due to the cache being nonexistent, expired, or invalid), this count is incremented by 1. This is triggered in the ObSchemaCache::get_schema method when cache_.get() fails.")
STAT_EVENT_ADD_DEF(TABLET_LS_CACHE_HIT, "tablet ls cache hit", ObStatClassIds::CACHE, 50037, false, true, true, "Number of cache hits when reading tablets. In the get_from_cache function, the system checks if the tablet is in the cache when reading. If a cache hit occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLET_LS_CACHE_MISS, "tablet ls cache miss", ObStatClassIds::CACHE, 50038, false, true, true, "Number of cache misses when reading tablets. In the get_from_cache function, the system checks if the tablet is in the cache when reading. If a cache miss occurs, this count is incremented by 1.")
// obsoleted part from INDEX_CLOG_CACHE_HIT to USER_TABLE_STAT_CACHE_MISS
STAT_EVENT_ADD_DEF(INDEX_CLOG_CACHE_HIT, "index clog cache hit", ObStatClassIds::CACHE, 50039, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(INDEX_CLOG_CACHE_MISS, "index clog cache miss", ObStatClassIds::CACHE, 50040, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(USER_TAB_COL_STAT_CACHE_HIT, "user tab col stat cache hit", ObStatClassIds::CACHE, 50041, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(USER_TAB_COL_STAT_CACHE_MISS, "user tab col stat cache miss", ObStatClassIds::CACHE, 50042, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(USER_TABLE_STAT_CACHE_HIT, "user table stat cache hit", ObStatClassIds::CACHE, 50043, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(USER_TABLE_STAT_CACHE_MISS, "user table stat cache miss", ObStatClassIds::CACHE, 50044, false, true, false, "Deprecated since V4.4.1.")
// obsoleted part from CLOG_CACHE_HIT to USER_TABLE_STAT_CACHE_MISS
STAT_EVENT_ADD_DEF(OPT_TABLE_STAT_CACHE_HIT, "opt table stat cache hit", ObStatClassIds::CACHE, 50045, false, true, true, "Table-level/partition-level statistics cache hit rate (%). If a cache hit occurs, the statistics are read directly from memory. Only the KV cache module collects this metric.")
STAT_EVENT_ADD_DEF(OPT_TABLE_STAT_CACHE_MISS, "opt table stat cache miss", ObStatClassIds::CACHE, 50046, false, true, true, "Table-level/partition-level statistics cache miss rate (%). If a cache miss occurs, statistics need to be loaded from internal tables into memory. Only the KV cache module collects this metric.")
STAT_EVENT_ADD_DEF(OPT_COLUMN_STAT_CACHE_HIT, "opt column stat cache hit", ObStatClassIds::CACHE, 50047, false, true, true, "Column-level statistics cache hit rate (%). If a cache hit occurs, the statistics are read directly from memory. Only the KV cache module collects this metric.")
STAT_EVENT_ADD_DEF(OPT_COLUMN_STAT_CACHE_MISS, "opt column stat cache miss", ObStatClassIds::CACHE, 50048, false, true, true, "Column-level statistics cache miss rate (%). If a cache miss occurs, statistics need to be loaded from internal tables into memory. Only the KV cache module collects this metric.")
STAT_EVENT_ADD_DEF(TMP_PAGE_CACHE_HIT, "tmp page cache hit", ObStatClassIds::CACHE, 50049, false, true, true, "Number of page cache hits when reading temporary files. For temporary files on shared storage, block cache is not used. Instead, an 8 KB page-based cache is applied. Before reading data, the system first checks the KV cache. If a cache hit occurs, the data is read directly from the cache and the cache hit count is incremented by 1.")
STAT_EVENT_ADD_DEF(TMP_PAGE_CACHE_MISS, "tmp page cache miss", ObStatClassIds::CACHE, 50050, false, true, true, "Number of page cache misses when reading temporary files. For temporary files on shared storage, block cache is not used. Instead, an 8 KB page-based cache is applied. Before reading data, the system first checks the KV cache. If a cache miss occurs, an I/O operation is triggered and the cache miss count is incremented by 1.")
STAT_EVENT_ADD_DEF(TMP_BLOCK_CACHE_HIT, "tmp block cache hit", ObStatClassIds::CACHE, 50051, false, true, true, "Number of 2 MB block cache hits when reading temporary files. Before reading data from disk, the system first checks the KV cache to determine if the required data is in the cache. If a cache hit occurs, the data is read directly from the cache and the cache hit count is incremented by 1.")
STAT_EVENT_ADD_DEF(TMP_BLOCK_CACHE_MISS, "tmp block cache miss", ObStatClassIds::CACHE, 50052, false, true, true, "Number of block cache misses when reading temporary files.")
STAT_EVENT_ADD_DEF(SECONDARY_META_CACHE_HIT, "secondary meta cache hit", ObStatClassIds::CACHE, 50053, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SECONDARY_META_CACHE_MISS, "secondary meta cache miss", ObStatClassIds::CACHE, 50054, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(OPT_DS_STAT_CACHE_HIT, "opt ds stat cache hit", ObStatClassIds::CACHE, 50055, false, true, true, "Dynamic sampling statistics cache hit rate (%). If a cache hit occurs, results are read directly from memory. Only the KV cache module collects this metric.")
STAT_EVENT_ADD_DEF(OPT_DS_STAT_CACHE_MISS, "opt ds stat cache miss", ObStatClassIds::CACHE, 50056, false, true, true, "Dynamic sampling statistics cache miss rate (%). If a cache miss occurs, a sampling SQL collection needs to be initiated. Only the KV cache module collects this metric.")
STAT_EVENT_ADD_DEF(STORAGE_META_CACHE_HIT, "storage meta cache hit", ObStatClassIds::CACHE, 50057, true, true, true, "Number of cache hits for level-two and level-three metadata in storage. Tablets (data shards) store some relatively large metadata items (over 1 KB), such as table schemas and multiple sstables. These metadata items are accessed on demand and do not need to be kept in memory at all times. To manage the memory lifecycle of these structures, we use a kvcache approach. This metric records how often the metadata kvcache is successfully accessed.")
STAT_EVENT_ADD_DEF(STORAGE_META_CACHE_MISS, "storage meta cache miss", ObStatClassIds::CACHE, 50058, true, true, true, "Number of cache misses for level-two and level-three metadata in storage. Tablets (data shards) store some relatively large metadata items (over 1 KB), such as table schemas and multiple sstables. These metadata items are accessed on demand and do not need to be kept in memory at all times. To manage the memory lifecycle of these structures, we use a kvcache approach. This metric records how often the metadata kvcache is not successfully accessed.")
STAT_EVENT_ADD_DEF(TABLET_CACHE_HIT, "tablet cache hit", ObStatClassIds::CACHE, 50059, true, true, true, "Number of storage tablet shard cache hits. A tablet is a data shard and serves as a common structure in many processes. When a tenant supports a large number of partitions, limited memory cannot keep all tablets resident in memory at all times. Therefore, we use kvcache to manage and maintain the memory lifecycle of tablets. These metrics are related to the cache hit rate for tablets.")
STAT_EVENT_ADD_DEF(TABLET_CACHE_MISS, "tablet cache miss", ObStatClassIds::CACHE, 50060, true, true, true, "Number of storage tablet shard cache misses. A tablet is a data shard and serves as a common structure in many processes. When a tenant supports a large number of partitions, limited memory cannot keep all tablets resident in memory at all times. Therefore, we use kvcache to manage and maintain the memory lifecycle of tablets. These metrics are related to the cache hit rate for tablets.")

STAT_EVENT_ADD_DEF(SCHEMA_HISTORY_CACHE_HIT, "schema history cache hit", ObStatClassIds::CACHE, 50061, false, true, true, "Number of schema history cache hits. The schema history cache stores mappings from <schema_type, tenant_id, schema_id, schema_version> to precise_schema_version to avoid repeated queries to the system table for precise version numbers. If the precise schema version is successfully retrieved from the history cache, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SCHEMA_HISTORY_CACHE_MISS, "schema history cache miss", ObStatClassIds::CACHE, 50062, false, true, true, "Number of schema history cache misses. The schema history cache stores mappings from <schema_type, tenant_id, schema_id, schema_version> to precise_schema_version to avoid repeated queries to the system table for precise version numbers. If the corresponding precise schema version cannot be retrieved from the history cache (due to the cache being nonexistent, expired, or invalid), this count is incremented by 1.")
STAT_EVENT_ADD_DEF(OPT_SYSTEM_STAT_CACHE_HIT, "opt system stat cache hit", ObStatClassIds::CACHE, 50063, false, true, true, "Cost model system parameter cache hit rate (%). If a cache hit occurs, the cached results are read directly from memory. Only the KV cache module collects this metric.")
STAT_EVENT_ADD_DEF(OPT_SYSTEM_STAT_CACHE_MISS, "opt system stat cache miss", ObStatClassIds::CACHE, 50064, false, true, true, "Cost model system parameter cache miss rate (%). If a cache miss occurs, cost model-related parameters need to be loaded from internal tables. Only the KV cache module collects this metric.")

STAT_EVENT_ADD_DEF(LOG_KV_CACHE_HIT, "log kv cache hit", ObStatClassIds::CACHE, 50065, false, true, true, "Number of  cold cache hits. When reading logs from PALF, if the hot cache misses, the system attempts to read from the cold cache. Each time the requested log is found in the cold cache, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(LOG_KV_CACHE_MISS, "log kv cache miss", ObStatClassIds::CACHE, 50066, false, true, true, "Number of  cold cache misses. When reading logs from PALF, if the hot cache misses, the system attempts to read from the cold cache. Each time the requested log is not found in the cold cache, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(DATA_BLOCK_CACHE_MISS, "data block cache miss", ObStatClassIds::CACHE, 50067, true, true, true, "Number of block cache misses when fetching data micro blocks. When fetching a data micro block, the system checks if the data micro block is in the cache. If a cache miss occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(INDEX_BLOCK_CACHE_MISS, "index block cache miss", ObStatClassIds::CACHE, 50068, true, true, true, "Number of block cache misses when fetching intermediate index micro blocks. When fetching an intermediate index micro block, the system checks if the micro block is in the cache. If a cache miss occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(MULTI_VERSION_FUSE_ROW_CACHE_HIT, "multi version fuse row cache hit", ObStatClassIds::CACHE, 50069, true, true, true, "Number of cache hits when the TABLE GET operator reads rows from a materialized view. In the get_fuse_row_cache function, if the table is a materialized view, the system checks if the row corresponding to the rowkey is in the cache. If a cache hit occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(MULTI_VERSION_FUSE_ROW_CACHE_MISS, "multi version fuse row cache miss", ObStatClassIds::CACHE, 50070, true, true, true, "Number of cache misses when the TABLE GET operator reads rows from a materialized view. In the get_fuse_row_cache function, if the table is a materialized view, the system checks if the row corresponding to the rowkey is in the cache. If a cache miss occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(BACKUP_INDEX_CACHE_HIT, "backup index cache hit", ObStatClassIds::CACHE, 50071, true, true, true, "Number of backup index cache hits. The backup index is stored in the cache. During recovery, the system first attempts to read the backup index from the cache. If not found, it will then read the backup index from the backup storage medium.")
STAT_EVENT_ADD_DEF(BACKUP_INDEX_CACHE_MISS, "backup index cache miss", ObStatClassIds::CACHE, 50072, true, true, true, "Number of backup index cache misses. The backup index is stored in the cache. During recovery, the system first attempts to read the backup index from the cache. If not found, it will then read the backup index from the backup storage medium.")
STAT_EVENT_ADD_DEF(BACKUP_META_CACHE_HIT, "backup meta cache hit", ObStatClassIds::CACHE, 50073, true, true, true, "Number of backup metadata cache hits. The backup metadata is stored in the cache. During recovery, the system first attempts to read the backup metadata from the cache. If not found, it will then read the backup metadata from the backup storage medium.")
STAT_EVENT_ADD_DEF(BACKUP_META_CACHE_MISS, "backup meta cache miss", ObStatClassIds::CACHE, 50074, true, true, true, "Number of backup metadata cache misses. The backup metadata is stored in the cache. During recovery, the system first attempts to read the backup metadata from the cache. If not found, it will then read the backup metadata from the backup storage medium.")
STAT_EVENT_ADD_DEF(TRUNCATE_INFO_CACHE_HIT, "truncate info cache hit", ObStatClassIds::CACHE, 50075, true, true, true, "Number of cache hits when reading truncate info. In the get_truncate_info_array function, the system checks if the truncate info is in the cache when reading. If a cache hit occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TRUNCATE_INFO_CACHE_MISS, "truncate info cache miss", ObStatClassIds::CACHE, 50076, true, true, true, "Number of cache misses when reading truncate info. In the get_truncate_info_array function, the system checks if the truncate info is in the cache when reading. If a cache miss occurs, this count is incremented by 1.")

STAT_EVENT_ADD_DEF(EXDATA_PAGE_CACHE_MISS, "external data page cache miss", ObStatClassIds::CACHE, 50077, false, true, true, "")
STAT_EVENT_ADD_DEF(EXDATA_PAGE_CACHE_HIT, "external data page cache hit", ObStatClassIds::CACHE, 50078, false, true, true, "")

// STORAGE
STAT_EVENT_ADD_DEF(MEMSTORE_LOGICAL_READS, "MEMSTORE_LOGICAL_READS", STORAGE, "MEMSTORE_LOGICAL_READS", true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(MEMSTORE_LOGICAL_BYTES, "MEMSTORE_LOGICAL_BYTES", STORAGE, "MEMSTORE_LOGICAL_BYTES", true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SSTABLE_LOGICAL_READS, "SSTABLE_LOGICAL_READS", STORAGE, "SSTABLE_LOGICAL_READS", true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SSTABLE_LOGICAL_BYTES, "SSTABLE_LOGICAL_BYTES", STORAGE, "SSTABLE_LOGICAL_BYTES", true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(IO_READ_COUNT, "io read count", ObStatClassIds::STORAGE, 60000, true, true, true, "Total read I/O IOPS. After each read I/O operation completes, IO_READ_COUNT is incremented by 1.")
STAT_EVENT_ADD_DEF(IO_READ_DELAY, "io read delay", ObStatClassIds::STORAGE, 60001, true, true, true, "Total read I/O latency (in microseconds). IO_READ_DELAY accumulates the hardware service latency of each read I/O operation. This latency is measured from the time the request is dispatched to the disk until the disk completes processing and returns.")
STAT_EVENT_ADD_DEF(IO_READ_BYTES, "io read bytes", ObStatClassIds::STORAGE, 60002, true, true, true, "Total read I/O bandwidth (in bytes). This tracks the total amount of read I/O. By measuring the change over a given period, you can calculate the average read I/O per second. After each read I/O operation completes, its bandwidth is counted and accumulated in IO_READ_BYTES.")
STAT_EVENT_ADD_DEF(IO_WRITE_COUNT, "io write count", ObStatClassIds::STORAGE, 60003, true, true, true, "Total write I/O IOPS. After each write I/O operation completes, IO_WRITE_COUNT is incremented by 1.")
STAT_EVENT_ADD_DEF(IO_WRITE_DELAY, "io write delay", ObStatClassIds::STORAGE, 60004, true, true, true, "Total write I/O latency (in microseconds). IO_WRITE_DELAY accumulates the hardware service latency of each write I/O operation. This latency is measured from the time the request is dispatched to the disk until the disk completes processing and returns.")
STAT_EVENT_ADD_DEF(IO_WRITE_BYTES, "io write bytes", ObStatClassIds::STORAGE, 60005, true, true, true, "Total write I/O bandwidth (in bytes). This tracks the total amount of write I/O. By measuring the change over a given period, you can calculate the average value. After each write I/O operation completes, its bandwidth is counted and accumulated in IO_WRITE_BYTES.")
STAT_EVENT_ADD_DEF(MEMSTORE_SCAN_COUNT, "memstore scan count", ObStatClassIds::STORAGE, 60006, true, true, true, "Number of range queries to the MemTable. Each time a range query to the MemTable begins, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_SCAN_SUCC_COUNT, "memstore scan succ count", ObStatClassIds::STORAGE, 60007, true, true, true, "Number of successful range queries to the MemTable. Each time a range query to the MemTable is successful, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_SCAN_FAIL_COUNT, "memstore scan fail count", ObStatClassIds::STORAGE, 60008, true, true, true, "Number of failed range queries to the MemTable. Each time a range query to the MemTable fails for any reason, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_GET_COUNT, "memstore get count", ObStatClassIds::STORAGE, 60009, true, true, true, "Number of point queries to the MemTable. Each time a point query to the MemTable begins, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_GET_SUCC_COUNT, "memstore get succ count", ObStatClassIds::STORAGE, 60010, true, true, true, "Number of successful point queries to the MemTable. Each time a point query to the MemTable is successful, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_GET_FAIL_COUNT, "memstore get fail count", ObStatClassIds::STORAGE, 60011, true, true, true, "Number of failed point queries to the MemTable. Each time a point query to the MemTable fails for any reason, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_APPLY_COUNT, "memstore apply count", ObStatClassIds::STORAGE, 60012, true, true, true, "Number of writes to the MemTable. Each time a write to the MemTable begins, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_APPLY_SUCC_COUNT, "memstore apply succ count", ObStatClassIds::STORAGE, 60013, true, true, true, "Number of successful writes to the MemTable. Each time a write to the MemTable is successful, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_APPLY_FAIL_COUNT, "memstore apply fail count", ObStatClassIds::STORAGE, 60014, true, true, true, "Number of failed writes to the MemTable. Each time a write to the MemTable fails (for any reason), this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_GET_TIME, "memstore get time", ObStatClassIds::STORAGE, 60016, true, true, true, "Total time (in microseconds) spent on point queries to the MemTable. After each point query operation, regardless of success or failure, this value increases by the time taken for the query.")
STAT_EVENT_ADD_DEF(MEMSTORE_SCAN_TIME, "memstore scan time", ObStatClassIds::STORAGE, 60017, true, true, true, "Total time (in microseconds) spent on range queries to the MemTable. After each range query operation, regardless of success or failure, this value increases by the time taken for the query.")
STAT_EVENT_ADD_DEF(MEMSTORE_APPLY_TIME, "memstore apply time", ObStatClassIds::STORAGE, 60018, true, true, true, "Total time (in microseconds) spent on write operations to the MemTable. After each write operation, regardless of success or failure, this value increases by the time taken for the write.")
STAT_EVENT_ADD_DEF(MEMSTORE_READ_LOCK_SUCC_COUNT, "memstore read lock succ count", ObStatClassIds::STORAGE, 60019, true, true, true, "Number of rows successfully read from the MemTable. Each time a row is successfully read from the MemTable, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_READ_LOCK_FAIL_COUNT, "memstore read lock fail count", ObStatClassIds::STORAGE, 60020, true, true, true, "Number of rows where MemTable reads failed due to read lock conflict timeout. During MemTable reads, if the data being read is in the process of being committed but the commit status and version are not yet determined (for example, when the commit log or a distributed transaction is pending—a typically short-lived state), the operation waits on a read lock. If the read fails due to a timeout from this conflict, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(MEMSTORE_WRITE_LOCK_SUCC_COUNT, "memstore write lock succ count", ObStatClassIds::STORAGE, 60021, true, true, true, "Number of rows successfully written to the MemTable. During the writing process to the MemTable, checks for lock conflicts, lost updates, and primary key conflicts are performed. If none of these conflicts occur, this value will be incremented by 1. (Note: Success in the MemTable does not guarantee success in the SSTable.)")
STAT_EVENT_ADD_DEF(MEMSTORE_WRITE_LOCK_FAIL_COUNT, "memstore write lock fail count", ObStatClassIds::STORAGE, 60022, true, true, true, "Number of rows that failed to write to the MemTable due to conflicts. During the writing process to the MemTable, checks for lock conflicts, lost updates, and primary key conflicts are performed. If any of these conflicts occur, this value will be incremented by 1. (Note: This does not include checks on SSTable.)")
STAT_EVENT_ADD_DEF(MEMSTORE_WAIT_WRITE_LOCK_TIME, "memstore wait write lock time", ObStatClassIds::STORAGE, 60023, true, true, true, "Total wait time (in microseconds) due to write lock conflicts on the MemTable. During the writing process of the MemTable, if a lock conflict occurs, the request will be placed in the lock conflict queue. This value will increase by the time from when it is placed in the lock conflict queue until it is awakened.")
STAT_EVENT_ADD_DEF(MEMSTORE_WAIT_READ_LOCK_TIME, "memstore wait read lock time", ObStatClassIds::STORAGE, 60024, true, true, true, "Total wait time (in microseconds) due to read lock conflicts on the MemTable. During the reading process of the MemTable, if the data being read is in a committed state but the commit status and version number are not yet determined (for example, if it is in a pending commit log or pending distributed transaction state, which is usually brief), the operation will wait on the read lock. This value will increase by the waiting time.")
STAT_EVENT_ADD_DEF(IO_READ_MICRO_INDEX_COUNT, "io read micro index count", ObStatClassIds::STORAGE, 60025, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(IO_READ_MICRO_INDEX_BYTES, "io read micro index bytes", ObStatClassIds::STORAGE, 60026, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(IO_READ_PREFETCH_MICRO_COUNT, "io prefetch micro block count", ObStatClassIds::STORAGE, 60027, false, true, true, "Total micro block cache I/O count. To optimize query performance, micro blocks that need to be accessed from disk are prefetched and loaded into memory as part of the micro block cache. This metric records how many times micro blocks are loaded from disk into the cache. Combined with the cache hit rate for internal tables, it helps evaluate the effectiveness of query performance optimizations.")
STAT_EVENT_ADD_DEF(IO_READ_PREFETCH_MICRO_BYTES, "io prefetch micro block bytes", ObStatClassIds::STORAGE, 60028, false, true, true, "Total micro block cache I/O bytes. To optimize query performance, micro blocks that need to be accessed from disk are prefetched and loaded into memory as part of the micro block cache. This metric records the total number of times the system loads micro blocks from disk into the micro block cache. Combined with the cache hit rate for internal tables, it helps evaluate the effectiveness of query performance optimizations in the system.")
STAT_EVENT_ADD_DEF(IO_READ_UNCOMP_MICRO_COUNT, "io read uncompress micro block count", ObStatClassIds::STORAGE, 60029, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(IO_READ_UNCOMP_MICRO_BYTES, "io read uncompress micro block bytes", ObStatClassIds::STORAGE, 60030, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(STORAGE_READ_ROW_COUNT, "storage read row count", ObStatClassIds::STORAGE, 60031, false, true, true, "Number of times rows are processed after being fused by the TABLE SCAN operator under the non-pushdown path. Each time the process_fuse_row function is called, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(STORAGE_DELETE_ROW_COUNT, "storage delete row count", ObStatClassIds::STORAGE, 60032, false, true, true, "Number of rows actually deleted by DML statements. Each time a row is deleted in the storage engine, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(STORAGE_INSERT_ROW_COUNT, "storage insert row count", ObStatClassIds::STORAGE, 60033, false, true, true, "Number of rows actually inserted by DML statements. Each time a row is inserted in the storage engine, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(STORAGE_UPDATE_ROW_COUNT, "storage update row count", ObStatClassIds::STORAGE, 60034, false, true, true, "Number of rows updated by the update operation. Each time the update_rows function is called, this count is incremented by the number of rows updated.")
STAT_EVENT_ADD_DEF(MEMSTORE_ROW_PURGE_COUNT, "memstore row purge count", ObStatClassIds::STORAGE, 60037, false, true, true, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(MEMSTORE_ROW_COMPACTION_COUNT, "memstore row compaction count", ObStatClassIds::STORAGE, 60038, false, true, true, "Number of times sparse multi-version rows in the MemTable are merged into compact versions. MemTable rows may contain sparse multi-versions that only record changed columns. When the number of versions increases, the MemTable generates a compact single version to improve read performance. Each time a compact version is generated, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(IO_READ_QUEUE_DELAY, "io read queue delay", ObStatClassIds::STORAGE, 60039, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(IO_WRITE_QUEUE_DELAY, "io write queue delay", ObStatClassIds::STORAGE, 60040, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(IO_READ_CB_QUEUE_DELAY, "io read callback queuing delay", ObStatClassIds::STORAGE, 60041, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(IO_READ_CB_PROCESS_DELAY, "io read callback process delay", ObStatClassIds::STORAGE, 60042, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(BANDWIDTH_IN_THROTTLE, "bandwidth in throttle size", ObStatClassIds::STORAGE, 60051, false, true, true, "Cumulative inbound traffic (in bytes) for backup and restore network RPCs. When backup and restore sends RPCs, the inbound traffic is accumulated in this count.")
STAT_EVENT_ADD_DEF(BANDWIDTH_OUT_THROTTLE, "bandwidth out throttle size", ObStatClassIds::STORAGE, 60052, false, true, true, "Cumulative outbound traffic (in bytes) for backup and restore network RPCs. When backup and restore sends RPCs, the outbound traffic is accumulated in this count.")
STAT_EVENT_ADD_DEF(MEMSTORE_READ_ROW_COUNT, "memstore read row count", ObStatClassIds::STORAGE, 60056, true, true, true, "Number of rows read from the MemTable before filtering. This metric will be renamed to DELTA_READ_ROW_CNT in V4.4.1 by the feature branch fuse_row_cache_opt. Each time a row is read from the MemTable, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SSSTORE_READ_ROW_COUNT, "ssstore read row count", ObStatClassIds::STORAGE, 60057, true, true, true, "Number of major MemTable, minor MemTable, and mini MemTable rows read under the pushdown/non-pushdown path during queries. There is an issue with the collection method, which will be fixed in V4.4.1. Under the pushdown path: Includes filtered rows, representing the total number of sstable rows within the range processed by the pushdown path. Rowstore includes rows skipped by the skip index. Columnstore does not include rows skipped by the skip index. Under the non-pushdown path: Includes filtered rows, but excludes uncommitted rows, rolled-back rows, and multi-version rows within micro blocks.")
STAT_EVENT_ADD_DEF(MEMSTORE_WRITE_BYTES, "memstore write bytes", ObStatClassIds::STORAGE, 60058, true, true, true, "Total amount of data (in bytes) successfully written to the MemTable. After a successful write to the MemTable, the size of the primary key and the amount of data will be counted and added to this value.")
STAT_EVENT_ADD_DEF(MEMSTORE_DUMP_UNCOMMITTED_SSTABLE_CNT, "memstore dump uncommitted sstable cnt", ObStatClassIds::STORAGE, 60059, false, true, true, "When the MemTables are dumped to an SSTable, if the SSTable contains uncommitted rows, this count is incremented by 1.")

STAT_EVENT_ADD_DEF(MEMSTORE_WRITE_LOCK_WAKENUP_COUNT, "memstore write lock wakenup count in lock_wait_mgr", ObStatClassIds::STORAGE, 60068, false, true, true, "Number of times a request was awakened after a write lock conflict. During the writing process to the MemTable, if a lock conflict occurs, the request will be placed in the lock conflict queue. If the request is awakened, this value will be incremented by 1.")


STAT_EVENT_ADD_DEF(EXIST_ROW_EFFECT_READ, "exist row effect read", ObStatClassIds::STORAGE, 60075, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(EXIST_ROW_EMPTY_READ, "exist row empty read", ObStatClassIds::STORAGE, 60076, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(GET_ROW_EFFECT_READ, "get row effect read", ObStatClassIds::STORAGE, 60077, false, true, true, "Number of valid rows read from micro blocks by the TABLE GET operator. In the ObMicroBlockRowGetter::get_block_row function, if the row flag of the read row is not DF_NOT_EXIST, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(GET_ROW_EMPTY_READ, "get row empty read", ObStatClassIds::STORAGE, 60078, false, true, true, "Number of invalid rows read from micro blocks by the TABLE GET operator (unit: rows). In the ObMicroBlockRowGetter::get_block_row function, if the row flag of the read row is DF_NOT_EXIST, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SCAN_ROW_EFFECT_READ, "scan row effect read", ObStatClassIds::STORAGE, 60079, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SCAN_ROW_EMPTY_READ, "scan row empty read", ObStatClassIds::STORAGE, 60080, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(BANDWIDTH_IN_SLEEP_US, "bandwidth in sleep us", ObStatClassIds::STORAGE, 60081, false, true, true, "Total sleep time (in microseconds) due to bandwidth limits while receiving RPCs during backup and restore network operations. When the network usage for backup and restore exceeds the limit, data transmission is intermittently paused to reduce bandwidth consumption.")
STAT_EVENT_ADD_DEF(BANDWIDTH_OUT_SLEEP_US, "bandwidth out sleep us", ObStatClassIds::STORAGE, 60082, false, true, true, "Total sleep time (in microseconds) due to bandwidth limits while sending RPCs during backup and restore network operations. When the network usage for backup and restore exceeds the limit, data transmission is intermittently paused to reduce bandwidth consumption.")

STAT_EVENT_ADD_DEF(MEMSTORE_WRITE_LOCK_WAIT_TIMEOUT_COUNT, "memstore write lock wait timeout count", ObStatClassIds::STORAGE, 60083, false, true, true, "Number of times a write lock conflict was not awakened due to a timeout. During the writing process to the MemTable, if a lock conflict occurs, the request will be placed in the lock conflict queue. If the request times out before being awakened, this value will be incremented by 1.")

STAT_EVENT_ADD_DEF(DATA_BLOCK_READ_CNT, "accessed data micro block count by io", ObStatClassIds::STORAGE, 60084, true, true, true, "Number of data micro blocks fetched by I/O due to cache misses. When fetching a data micro block, if it is not found in the cache and must be read by performing an I/O operation, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(DATA_BLOCK_CACHE_HIT, "data micro block cache hit", ObStatClassIds::STORAGE, 60085, true, true, true, "Number of block cache hits when fetching data micro blocks. When fetching a data micro block, the system checks whether the data micro block is in the cache. If a cache hit occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(INDEX_BLOCK_READ_CNT, "accessed index micro block count by io", ObStatClassIds::STORAGE, 60086, true, true, true, "Number of intermediate index micro blocks fetched by I/O due to cache misses. When fetching an intermediate index micro block, if it is not found in the cache and must be read by performing an I/O operation, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(INDEX_BLOCK_CACHE_HIT, "index micro block cache hit", ObStatClassIds::STORAGE, 60087, true, true, true, "Number of block cache hits when fetching intermediate index micro blocks. When fetching an intermediate index micro block, the system checks whether the micro block is in the cache. If a cache hit occurs, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(BLOCKSCAN_BLOCK_CNT, "blockscaned data micro block count", ObStatClassIds::STORAGE, 60088, true, true, true, "Number of micro blocks opened under the pushdown path. Includes micro blocks skipped by the skip index for both rowstore and columnstore tables. For columnstore tables, micro blocks from multiple column groups are summed. Rowstore: When opening a micro block, if the pushdown path can be used, this count is incremented by 1. Columnstore: When a micro block is opened under the pushdown path, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(BLOCKSCAN_ROW_CNT, "blockscaned row count", ObStatClassIds::STORAGE, 60089, true, true, true, "Total number of rows within the range in micro blocks opened under the pushdown path. Includes filtered rows. Pushdown micro blocks do not contain uncommitted, rolled-back, or multi-version rows within the block. Rowstore does not have multi-version rows across blocks (no rowkey overlap), but columnstore may have multi-version rows across blocks. Rowstore includes rows skipped by the skip index. Columnstore does not include rows skipped by the skip index, and row counts for multiple column groups are not summed. Rowstore: When opening a micro block, if the pushdown path can be used, add the total row count of that block to this count. Columnstore: After filtering or projection ends, add the total processed row count to this count.")
STAT_EVENT_ADD_DEF(PUSHDOWN_STORAGE_FILTER_ROW_CNT, "storage filtered row count", ObStatClassIds::STORAGE, 60090, true, true, true, "Total number of rows filtered by pushdown/non-pushdown filters. There is an issue with the collection method, which will be fixed in V4.4.1. When filtering is performed, this count is incremented by the number of rows filtered out. Rowstore includes rows skipped by the skip index. Columnstore does not include rows skipped by the skip index.")
STAT_EVENT_ADD_DEF(MINOR_SSSTORE_READ_ROW_COUNT, "minor ssstore read row count", ObStatClassIds::STORAGE, 60091, true, true, true, "Number of minor MemTable and mini MemTable rows read under the pushdown/non-pushdown path during queries. There is an issue with the collection method, which will be fixed in V4.4.1. Under the pushdown path: Includes filtered rows, representing the total number of minor/mini MemTable rows within the range processed by the pushdown path. Under the non-pushdown path: Includes filtered rows, but excludes uncommitted rows, rolled-back rows, and multi-version rows within micro blocks.")
STAT_EVENT_ADD_DEF(MAJOR_SSSTORE_READ_ROW_COUNT, "major ssstore read row count", ObStatClassIds::STORAGE, 60092, true, true, true, "Number of major SSTable rows read under pushdown/non-pushdown paths. There is an issue with the collection method, which will be fixed in V441. Under the pushdown path: Includes filtered rows, representing the total number of major SSTable rows within the range processed by the pushdown path. Rowstore includes rows skipped by the skip index. Columnstore does not include rows skipped by the skip index. Under the non-pushdown path: Includes filtered rows, but excludes uncommitted rows, rolled-back rows, and multi-version rows within micro blocks.")
STAT_EVENT_ADD_DEF(STORAGE_WRITING_THROTTLE_TIME, "storage waiting throttle time", ObStatClassIds::STORAGE, 60093, true, true, true, "Total throttling duration (in microseconds) for memory allocations in certain modules. To dynamically match the system’s minor compaction speed, if the minor compaction speed cannot keep up with the memory write speed, memory allocations in some modules will be throttled. This metric accumulates the total duration of such throttling. When the memory usage of modules such as MemTable (TxData, Mds) exceeds a certain threshold, threads will sleep for a period after each memory allocation, and the total sleep time will be accumulated in this metric value.")
STAT_EVENT_ADD_DEF(IO_READ_DEVICE_TIME, "io read execute time", ObStatClassIds::STORAGE, 60094, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(IO_WRITE_DEVICE_TIME, "io write execute time", ObStatClassIds::STORAGE, 60095, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(TX_TABLE_READ_CNT, "read count of transaction status table", ObStatClassIds::STORAGE, 60096, true, true, true, "")
STAT_EVENT_ADD_DEF(OUTROW_LOB_CNT, "outrow lob count", ObStatClassIds::STORAGE, 60097, true, false, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PRIVATE_WRITE_COUNT, "remote private write count", ObStatClassIds::STORAGE, 60098, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PRIVATE_WRITE_BYTES, "remote private write bytes", ObStatClassIds::STORAGE, 60099, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PRIVATE_WRITE_DELAY, "remote private write delay", ObStatClassIds::STORAGE, 60100, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PRIVATE_READ_COUNT, "remote private read count", ObStatClassIds::STORAGE, 60101, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PRIVATE_READ_BYTES, "remote private read bytes", ObStatClassIds::STORAGE, 60102, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PRIVATE_READ_DELAY, "remote private read delay", ObStatClassIds::STORAGE, 60103, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PUBLIC_WRITE_COUNT, "remote public write count", ObStatClassIds::STORAGE, 60104, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PUBLIC_WRITE_BYTES, "remote public write bytes", ObStatClassIds::STORAGE, 60105, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PUBLIC_WRITE_DELAY, "remote public write delay", ObStatClassIds::STORAGE, 60106, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PUBLIC_READ_COUNT, "remote public read count", ObStatClassIds::STORAGE, 60107, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PUBLIC_READ_BYTES, "remote public read bytes", ObStatClassIds::STORAGE, 60108, true, true, true, "")
STAT_EVENT_ADD_DEF(IO_REMOTE_PUBLIC_READ_DELAY, "remote public read delay", ObStatClassIds::STORAGE, 60109, true, true, true, "")
// backup & restore
STAT_EVENT_ADD_DEF(BACKUP_IO_READ_COUNT, "backup io read count", ObStatClassIds::STORAGE, 69000, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_IO_READ_BYTES, "backup io read bytes", ObStatClassIds::STORAGE, 69001, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_IO_WRITE_COUNT, "backup io write count", ObStatClassIds::STORAGE, 69002, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_IO_WRITE_BYTES, "backup io write bytes", ObStatClassIds::STORAGE, 69003, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_DELETE_COUNT, "backup delete count", ObStatClassIds::STORAGE, 69010, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")

STAT_EVENT_ADD_DEF(BACKUP_IO_READ_DELAY, "backup io read delay", ObStatClassIds::STORAGE, 69012, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_IO_WRITE_DELAY, "backup io write delay", ObStatClassIds::STORAGE, 69013, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(COS_IO_READ_DELAY, "cos io read delay", ObStatClassIds::STORAGE, 69014, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(COS_IO_WRITE_DELAY, "cos io write delay", ObStatClassIds::STORAGE, 69015, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(COS_IO_LS_DELAY, "cos io list delay", ObStatClassIds::STORAGE, 69016, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(BACKUP_DELETE_DELAY, "backup delete delay", ObStatClassIds::STORAGE, 69017, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")

STAT_EVENT_ADD_DEF(BACKUP_IO_LS_COUNT, "backup io list count", ObStatClassIds::STORAGE, 69019, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_IO_READ_FAIL_COUNT, "backup io read failed count", ObStatClassIds::STORAGE, 69020, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_IO_WRITE_FAIL_COUNT, "backup io write failed count", ObStatClassIds::STORAGE, 69021, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_IO_DEL_FAIL_COUNT, "backup io delete failed count", ObStatClassIds::STORAGE, 69022, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_IO_LS_FAIL_COUNT, "backup io list failed count", ObStatClassIds::STORAGE, 69023, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")

STAT_EVENT_ADD_DEF(BACKUP_TAGGING_COUNT, "backup io tagging count", ObStatClassIds::STORAGE, 69024, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")
STAT_EVENT_ADD_DEF(BACKUP_TAGGING_FAIL_COUNT, "backup io tagging failed count", ObStatClassIds::STORAGE, 69025, true, true, true, "Deprecated in V4.4.1. Please check this metric in the I/O manager.")

STAT_EVENT_ADD_DEF(COS_IO_WRITE_BYTES, "cos io write bytes", ObStatClassIds::STORAGE, 69026, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(COS_IO_WRITE_COUNT, "cos io write count", ObStatClassIds::STORAGE, 69027, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(COS_DELETE_COUNT, "cos delete count", ObStatClassIds::STORAGE, 69028, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(COS_DELETE_DELAY, "cos delete delay", ObStatClassIds::STORAGE, 69029, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(COS_IO_LS_LIMIT_COUNT, "cos list io limit count", ObStatClassIds::STORAGE, 69030, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(COS_IO_LS_COUNT, "cos io list count", ObStatClassIds::STORAGE, 69031, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(COS_IO_READ_COUNT, "cos io read count", ObStatClassIds::STORAGE, 69032, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(COS_IO_READ_BYTES, "cos io read bytes", ObStatClassIds::STORAGE, 69033, true, true, false, "Deprecated since V4.4.1.")

// DEBUG
STAT_EVENT_ADD_DEF(REFRESH_SCHEMA_COUNT, "refresh schema count", ObStatClassIds::DEBUG, 70000, false, true, true, "Number of successful schema refresh operations. Each time the OceanBase database successfully completes a schema refresh operation, this metric increases by one. In the ObServerSchemaService::refresh_schema method. This includes both full refresh (refresh_full_schema) and incremental refresh (refresh_increment_schema) modes, which are used to keep the local metadata cache consistent with the system table.")
STAT_EVENT_ADD_DEF(REFRESH_SCHEMA_TIME, "refresh schema time", ObStatClassIds::DEBUG, 70001, false, true, true, "Total time (in microseconds) spent successfully refreshing schema. When OceanBase refreshes schema, this metric accumulates the total time spent during the entire refresh process. In the ObServerSchemaService::refresh_schema method, when OB_SUCC(ret) is true, the time difference from the start to the end of the method is accumulated, including all overhead from both full refresh (refresh_full_schema) and incremental refresh (refresh_increment_schema) modes.")
STAT_EVENT_ADD_DEF(INNER_SQL_CONNECTION_EXECUTE_COUNT, "inner sql connection execute count", ObStatClassIds::DEBUG, 70002, false, true, true, "Number of INNER SQL executions. Each time an INNER SQL statement is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(INNER_SQL_CONNECTION_EXECUTE_TIME, "inner sql connection execute time", ObStatClassIds::DEBUG, 70003, false, true, true, "Total execution time (in microseconds) of INNER SQL.")
STAT_EVENT_ADD_DEF(LS_ALL_TABLE_OPERATOR_GET_COUNT, "log stream table operator get count", ObStatClassIds::DEBUG, 70006, false, true, true, "Number of times log stream information is successfully read and loaded from the __all_ls_meta_table table. Each time log stream information is successfully retrieved from the __all_ls_meta_table table using ObLSTableOperator, this count is incremented by 1. In the ObLSTableOperator::get method. The operator supports retrieving log stream information from memory, RPC, or the persistent table, which is used for location caching and metadata management.")
STAT_EVENT_ADD_DEF(LS_ALL_TABLE_OPERATOR_GET_TIME, "log stream table operator get time", ObStatClassIds::DEBUG, 70007, false, true, true, "Total time spent successfully reading and loading log stream information from the __all_ls_meta_table table (in microseconds). When obtaining log stream information from the __all_ls_meta_table table using ObLSTableOperator, this metric accumulates the total time spent during the entire retrieval process. In the ObLSTableOperator::get method, the time difference from the start to the end of the method is accumulated, including all overhead from fetching log stream information from memory, RPC, or the persistent table.")

//CLOG 80001 ~ 90000
STAT_EVENT_ADD_DEF(PALF_WRITE_IO_COUNT, "palf write io count to disk",  ObStatClassIds::CLOG, 80001, true, true, true, "Number of clog write operations. Each time a clog write succeeds, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(PALF_WRITE_SIZE, "palf write size to disk",  ObStatClassIds::CLOG, 80002, true, true, true, "Total size (in bytes) of clog writes. Each time a clog write succeeds, the size of the write is added to this count.")
STAT_EVENT_ADD_DEF(PALF_WRITE_TIME, "palf write total time to disk", ObStatClassIds::CLOG, 80003, true, true, true, "Total time spent (in microseconds) writing clog to disk. Each time a clog write to disk succeeds, the time spent is added to this count.")
STAT_EVENT_ADD_DEF(PALF_READ_COUNT_FROM_HOT_CACHE, "palf read count from hot cache", ObStatClassIds::CLOG, 80004, true, true, true, "Number of  hot cache hits when reading logs. When reading logs from PALF, the system first tries to read from the hot cache. Each time the requested log is found in the hot cache, this count is incremented by 1.") // FARM COMPAT WHITELIST
STAT_EVENT_ADD_DEF(PALF_READ_SIZE_FROM_HOT_CACHE, "palf read size from hot cache", ObStatClassIds::CLOG, 80005, true, true, true, "Total size (in bytes) of clog read from the hot cache. When reading logs from PALF, the system first tries to read from the hot cache. Each time the requested log is found in the hot cache, the size of the log read is added to this count.") // FARM COMPAT WHITELIST
STAT_EVENT_ADD_DEF(PALF_READ_TIME_FROM_HOT_CACHE, "palf read total time from hot cache", ObStatClassIds::CLOG, 80006, true, true, true, "Total time spent (in microseconds) reading clog from the hot cache. When reading logs from PALF, the system first tries to read from the hot cache. Each time the requested log is found in the hot cache, the time spent reading the log is added to this count.") // FARM COMPAT WHITELIST
STAT_EVENT_ADD_DEF(PALF_READ_IO_COUNT_FROM_DISK, "palf read io count from disk", ObStatClassIds::CLOG, 80007, true, true, true, "Number of clog read operations from disk. Each time a clog is successfully read from disk, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(PALF_READ_SIZE_FROM_DISK, "palf read size from disk", ObStatClassIds::CLOG, 80008, true, true, true, "Total size (in bytes) of clog reads from disk. Each time a clog is successfully read from disk, the size of the read is added to this count.")
STAT_EVENT_ADD_DEF(PALF_READ_TIME_FROM_DISK, "palf read total time from disk", ObStatClassIds::CLOG, 80009, true, true, true, "Total time spent (in microseconds) reading clog from disk. Each time a clog is successfully read from disk, the time spent is added to this count.")
STAT_EVENT_ADD_DEF(PALF_HANDLE_RPC_REQUEST_COUNT, "palf handle rpc request count", ObStatClassIds::CLOG, 80010, true, true, true, "Number of RPCs processed by the PALF layer. Each time PALF processes an RPC, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(ARCHIVE_READ_LOG_SIZE, "archive read log size", ObStatClassIds::CLOG, 80011, true, true, true, "Total amount (in bytes) of CLOG read during log archiving. The log archiving module periodically accumulates the total amount of logs read within a unit of time. The statistics cycle is 10 seconds.")
STAT_EVENT_ADD_DEF(ARCHIVE_WRITE_LOG_SIZE, "archive write log size", ObStatClassIds::CLOG, 80012, true, true, true, "Total amount (in bytes) of CLOG written to the archive medium during log archiving. The log archiving module periodically accumulates the total amount of logs written to the archive medium within a unit of time. The statistics cycle is 10 seconds.")
STAT_EVENT_ADD_DEF(RESTORE_READ_LOG_SIZE, "restore read log size", ObStatClassIds::CLOG, 80013, true, true, true, "Total amount (in bytes) of CLOG read by the log recovery module. Each time the log recovery module triggers a remote log read, the amount read is added to this count.")
STAT_EVENT_ADD_DEF(RESTORE_WRITE_LOG_SIZE, "restore write log size", ObStatClassIds::CLOG, 80014, true, true, true, "Total amount (in bytes) of CLOG submitted by the log recovery module. Each time the log recovery module triggers a log submission, the amount submitted is added to this count.")
STAT_EVENT_ADD_DEF(CLOG_TRANS_LOG_TOTAL_SIZE, "clog trans log total size", ObStatClassIds::CLOG, 80057, false, true, true, "Amount of data (in bytes) committed by transactions to PALF. Transactions commit logs to PALF, and after the logs are successfully committed, this value is incremented by the size of those logs.")
STAT_EVENT_ADD_DEF(LOG_STORAGE_COMPRESS_ORIGINAL_SIZE, "log storage compress original size", ObStatClassIds::CLOG, 80058, false, true, true, "Total original size (in bytes) of logs before compression submitted by the upper layer to the PALF layer (cumulative). When log compression is enabled, each time the upper layer calls the PALF append interface to submit logs, the original uncompressed log size is added to this count.")
STAT_EVENT_ADD_DEF(LOG_STORAGE_COMPRESS_COMPRESSED_SIZE, "log storage compress compressed size", ObStatClassIds::CLOG, 80059, false, true, true, "Total compressed size (in bytes) of logs submitted by the upper layer to the PALF layer (cumulative). When log compression is enabled, each time the upper layer calls the PALF append interface to submit logs, the compressed log size is added to this count.")

// CLOG.EXTLOG 81001 ~ 90000
STAT_EVENT_ADD_DEF(CLOG_EXTLOG_FETCH_LOG_SIZE, "external log service fetch log size", ObStatClassIds::CLOG, 81001, false, true, true, "Total size (in bytes) of logs pulled from this node by log synchronization links (such as OBCDC or network standby). Each time an RPC from a downstream synchronization link is processed, the size of logs returned by the RPC is added to this metric.")
STAT_EVENT_ADD_DEF(CLOG_EXTLOG_FETCH_LOG_COUNT, "external log service fetch log count", ObStatClassIds::CLOG, 81002, false, true, true, "Number of logs pulled from this node by log synchronization links (such as OBCDC or network standby). Each time an RPC from a downstream synchronization link is processed, the number of logs returned by the RPC is added to this metric.")
STAT_EVENT_ADD_DEF(CLOG_EXTLOG_FETCH_RPC_COUNT, "external log service fetch rpc count", ObStatClassIds::CLOG, 81003, false, true, true, "Number of RPCs sent to pull logs from this node by log synchronization links (such as OBCDC or network standby). Each time an RPC from a downstream synchronization link is processed, this count is incremented by 1.")

// CLOG.REPLAY


// CLOG.PROXY

// ELECTION

//OBSERVER

// rootservice
STAT_EVENT_ADD_DEF(RS_RPC_SUCC_COUNT, "success rpc process", ObStatClassIds::RS, 110015, false, true, true, "Number of successful RS RPC request handlings. Each time the RootService successfully handles an RPC request, this count is incremented by 1. This includes all RPC requests sent to the RootService that are successfully executed.")
STAT_EVENT_ADD_DEF(RS_RPC_FAIL_COUNT, "failed rpc process", ObStatClassIds::RS, 110016, false, true, true, "Number of failed RS RPC request handlings. Each time the RootService fails to handle an RPC request, this count is incremented by 1. This includes all RPC requests sent to the RootService that fail to execute.")
STAT_EVENT_ADD_DEF(RS_BALANCER_SUCC_COUNT, "balancer succ execute count", ObStatClassIds::RS, 110017, false, true, true, "Number of successful RS unit balance executions. Each time the RootService load balancer successfully executes a unit balance operation, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(RS_BALANCER_FAIL_COUNT, "balancer failed execute count", ObStatClassIds::RS, 110018, false, true, true, "Number of failed RS unit balance executions. Each time the RootService load balancer fails to execute a unit balance operation, this count is incremented by 1.")

// TABLE API (19xxxx)
// -- retrieve 1900xx
STAT_EVENT_ADD_DEF(TABLEAPI_RETRIEVE_COUNT, "single retrieve execute count", ObStatClassIds::TABLEAPI, 190001, true, true, true, "Number of OBKV-TABLE Retrieve operations. Each time a Retrieve operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_RETRIEVE_TIME, "single retrieve execute time", ObStatClassIds::TABLEAPI, 190002, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Retrieve operations. Each time a Retrieve operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_RETRIEVE_COUNT, "multi retrieve execute count", ObStatClassIds::TABLEAPI, 190003, true, true, true, "Number of OBKV-TABLE Multi Retrieve operations. Each time a Multi Retrieve operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_RETRIEVE_TIME, "multi retrieve execute time", ObStatClassIds::TABLEAPI, 190004, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi Retrieve operations. Each time a Multi Retrieve operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_RETRIEVE_ROW, "multi retrieve rows", ObStatClassIds::TABLEAPI, 190005, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi Retrieve operations. Each time a Multi Retrieve operation is performed, the number of OceanBase data rows involved is accumulated.")
// -- insert 1901xx
STAT_EVENT_ADD_DEF(TABLEAPI_INSERT_COUNT, "single insert execute count", ObStatClassIds::TABLEAPI, 190101, true, true, true, "Number of OBKV-TABLE Insert operations. Each time an Insert operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_INSERT_TIME, "single insert execute time", ObStatClassIds::TABLEAPI, 190102, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Insert operations. Each time an Insert operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_INSERT_COUNT, "multi insert execute count", ObStatClassIds::TABLEAPI, 190103, true, true, true, "Number of OBKV-TABLE Multi Insert operations. Each time a Multi Insert operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_INSERT_TIME, "multi insert execute time", ObStatClassIds::TABLEAPI, 190104, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi Insert operations. Each time a Multi Insert operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_INSERT_ROW, "multi insert rows", ObStatClassIds::TABLEAPI, 190105, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi Insert operations. Each time a Multi Insert operation is performed, the number of OceanBase data rows involved is accumulated.")
// -- delete 1902xx
STAT_EVENT_ADD_DEF(TABLEAPI_DELETE_COUNT, "single delete execute count", ObStatClassIds::TABLEAPI, 190201, true, true, true, "Number of OBKV-TABLE Delete operations. Each time a Delete operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_DELETE_TIME, "single delete execute time", ObStatClassIds::TABLEAPI, 190202, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Delete operations. Each time a Delete operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_DELETE_COUNT, "multi delete execute count", ObStatClassIds::TABLEAPI, 190203, true, true, true, "Number of OBKV-TABLE Multi Delete operations. Each time a Multi Delete operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_DELETE_TIME, "multi delete execute time", ObStatClassIds::TABLEAPI, 190204, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi Delete operations. Each time a Multi Delete operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_DELETE_ROW, "multi delete rows", ObStatClassIds::TABLEAPI, 190205, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi Delete operations. Each time a Multi Delete operation is performed, the number of OceanBase data rows involved is accumulated.")
// -- update 1903xx
STAT_EVENT_ADD_DEF(TABLEAPI_UPDATE_COUNT, "single update execute count", ObStatClassIds::TABLEAPI, 190301, true, true, true, "Number of OBKV-TABLE Update operations. Each time an Update operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_UPDATE_TIME, "single update execute time", ObStatClassIds::TABLEAPI, 190302, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Update operations. Each time an Update operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_UPDATE_COUNT, "multi update execute count", ObStatClassIds::TABLEAPI, 190303, true, true, true, "Number of OBKV-TABLE Multi Update operations. Each time a Multi Update operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_UPDATE_TIME, "multi update execute time", ObStatClassIds::TABLEAPI, 190304, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi Update operations. Each time a Multi Update operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_UPDATE_ROW, "multi update rows", ObStatClassIds::TABLEAPI, 190305, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi Update operations. Each time a Multi Update operation is performed, the number of OceanBase data rows involved is accumulated.")
// -- insert_or_update 1904xx
STAT_EVENT_ADD_DEF(TABLEAPI_INSERT_OR_UPDATE_COUNT, "single insert_or_update execute count", ObStatClassIds::TABLEAPI, 190401, true, true, true, "Number of OBKV-TABLE InsertOrUpdate operations. Each time an InsertOrUpdate operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_INSERT_OR_UPDATE_TIME, "single insert_or_update execute time", ObStatClassIds::TABLEAPI, 190402, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE InsertOrUpdate operations. Each time an InsertOrUpdate operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_INSERT_OR_UPDATE_COUNT, "multi insert_or_update execute count", ObStatClassIds::TABLEAPI, 190403, true, true, true, "Number of OBKV-TABLE Multi InsertOrUpdate operations. Each time a Multi InsertOrUpdate operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_INSERT_OR_UPDATE_TIME, "multi insert_or_update execute time", ObStatClassIds::TABLEAPI, 190404, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi InsertOrUpdate operations. Each time a Multi InsertOrUpdate operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_INSERT_OR_UPDATE_ROW, "multi insert_or_update rows", ObStatClassIds::TABLEAPI, 190405, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi InsertOrUpdate operations. Each time a Multi InsertOrUpdate operation is performed, the number of OceanBase data rows involved is accumulated.")
// -- replace 1905xx
STAT_EVENT_ADD_DEF(TABLEAPI_REPLACE_COUNT, "single replace execute count", ObStatClassIds::TABLEAPI, 190501, true, true, true, "Number of OBKV-TABLE Replace operations. Each time a Replace operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_REPLACE_TIME, "single replace execute time", ObStatClassIds::TABLEAPI, 190502, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Replace operations. Each time a Replace operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_REPLACE_COUNT, "multi replace execute count", ObStatClassIds::TABLEAPI, 190503, true, true, true, "Number of OBKV-TABLE Multi Replace operations. Each time a Multi Replace operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_REPLACE_TIME, "multi replace execute time", ObStatClassIds::TABLEAPI, 190504, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi Replace operations. Each time a Multi Replace operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_REPLACE_ROW, "multi replace rows", ObStatClassIds::TABLEAPI, 190505, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi Replace operations. Each time a Multi Replace operation is performed, the number of OceanBase data rows involved is accumulated.")
// -- complex_batch_retrieve 1906xx
STAT_EVENT_ADD_DEF(TABLEAPI_BATCH_RETRIEVE_COUNT, "batch retrieve execute count", ObStatClassIds::TABLEAPI, 190601, true, true, true, "Number of OBKV-TABLE Batch Retrieve operations. Each time a Batch Retrieve operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_BATCH_RETRIEVE_TIME, "batch retrieve execute time", ObStatClassIds::TABLEAPI, 190602, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Batch Retrieve operations. Each time a Batch Retrieve operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_BATCH_RETRIEVE_ROW, "batch retrieve rows", ObStatClassIds::TABLEAPI, 190603, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Batch Retrieve operations. Each time a Batch Retrieve operation is performed, the number of OceanBase data rows involved is accumulated.")
// -- complex_batch_operation 1907xx
STAT_EVENT_ADD_DEF(TABLEAPI_BATCH_HYBRID_COUNT, "batch hybrid execute count", ObStatClassIds::TABLEAPI, 190701, true, true, true, "Number of OBKV-TABLE mixed Batch operations. Each time a mixed Batch operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_BATCH_HYBRID_TIME, "batch hybrid execute time", ObStatClassIds::TABLEAPI, 190702, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE mixed Batch operations. Each time a mixed Batch operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_BATCH_HYBRID_INSERT_OR_UPDATE_ROW, "batch hybrid insert_or_update rows", ObStatClassIds::TABLEAPI, 190707, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE mixed Batch operations. Each time a mixed Batch operation is performed, the number of OceanBase data rows involved is accumulated.")
// -- other 1908xx
STAT_EVENT_ADD_DEF(TABLEAPI_LOGIN_COUNT, "table api login count", ObStatClassIds::TABLEAPI, 190801, true, true, true, "Number of OBKV-TABLE Login operations. Each time a Login operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_TSC_VIOLATE_COUNT, "table api OB_TRANSACTION_SET_VIOLATION count", ObStatClassIds::TABLEAPI, 190802, true, true, true, "Number of OBKV-TABLE transaction conflicts. Each time a transaction conflict occurs, this count is incremented by 1.")
// -- query 1909xx
STAT_EVENT_ADD_DEF(TABLEAPI_QUERY_COUNT, "query count", ObStatClassIds::TABLEAPI, 190901, true, true, true, "Number of OBKV-TABLE Query operations. Each time a Query operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_QUERY_TIME, "query time", ObStatClassIds::TABLEAPI, 190902, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Query operations. Each time a Query operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_QUERY_ROW, "query row count", ObStatClassIds::TABLEAPI, 190903, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Query operations. Each time a Query operation is performed, the number of OceanBase data rows involved is accumulated.")
STAT_EVENT_ADD_DEF(TABLEAPI_QUERY_AND_MUTATE_COUNT, "query_and_mutate count", ObStatClassIds::TABLEAPI, 190904, true, true, true, "Number of OBKV-TABLE QueryAndMutate operations. Each time a QueryAndMutate operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_QUERY_AND_MUTATE_TIME, "query_and_mutate time", ObStatClassIds::TABLEAPI, 190905, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE QueryAndMutate operations. Each time a QueryAndMutate operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_QUERY_AND_MUTATE_ROW, "query_and_mutate row count", ObStatClassIds::TABLEAPI, 190906, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE QueryAndMutate operations. Each time a QueryAndMutate operation is performed, the number of OceanBase data rows involved is accumulated.")
// -- hbase api 1910xx
STAT_EVENT_ADD_DEF(HBASEAPI_SCAN_COUNT, "hbase scan count", ObStatClassIds::TABLEAPI, 191001, true, true, true, "Number of OBKV-HBase Get or Scan operations. Each time a Get or Scan operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(HBASEAPI_SCAN_TIME, "hbase scan time", ObStatClassIds::TABLEAPI, 191002, true, true, true, "Total time spent (in microseconds) executing OBKV-HBase Get or Scan operations. Each time a Get or Scan operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(HBASEAPI_SCAN_ROW, "hbase scan row count", ObStatClassIds::TABLEAPI, 191003, true, true, true, "Number of OceanBase data rows involved in OBKV-HBase Get or Scan operations. Each time a Get or Scan operation is performed, the number of OceanBase data rows involved is accumulated.")
STAT_EVENT_ADD_DEF(HBASEAPI_PUT_COUNT, "hbase put count", ObStatClassIds::TABLEAPI, 191004, true, true, true, "Number of OBKV-HBase Put operations. Each time a Put operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(HBASEAPI_PUT_TIME, "hbase put time", ObStatClassIds::TABLEAPI, 191005, true, true, true, "Total time spent (in microseconds) executing OBKV-HBase Put operations. Each time a Put operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(HBASEAPI_PUT_ROW, "hbase put row count", ObStatClassIds::TABLEAPI, 191006, true, true, true, "Number of OceanBase data rows involved in OBKV-HBase Put operations. Each time a Put operation is performed, the number of OceanBase data rows involved is accumulated.")
STAT_EVENT_ADD_DEF(HBASEAPI_DELETE_COUNT, "hbase delete count", ObStatClassIds::TABLEAPI, 191007, true, true, true, "Number of OBKV-HBase Delete operations. Each time a Delete operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(HBASEAPI_DELETE_TIME, "hbase delete time", ObStatClassIds::TABLEAPI, 191008, true, true, true, "Total time spent (in microseconds) executing OBKV-HBase Delete operations. Each time a Delete operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(HBASEAPI_DELETE_ROW, "hbase delete row count", ObStatClassIds::TABLEAPI, 191009, true, true, true, "Number of OceanBase data rows involved in OBKV-HBase Delete operations. Each time a Delete operation is performed, the number of OceanBase data rows involved is accumulated.")
STAT_EVENT_ADD_DEF(HBASEAPI_APPEND_COUNT, "hbase append count", ObStatClassIds::TABLEAPI, 191010, true, true, true, "Number of OBKV-HBase Append operations. Each time an Append operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(HBASEAPI_APPEND_TIME, "hbase append time", ObStatClassIds::TABLEAPI, 191011, true, true, true, "Total time spent (in microseconds) executing OBKV-HBase Append operations. Each time an Append operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(HBASEAPI_APPEND_ROW, "hbase append row count", ObStatClassIds::TABLEAPI, 191012, true, true, true, "Number of HBase rows involved in OBKV-HBase Append operations. Each time an Append operation is performed, the number of HBase rows involved is accumulated. A single HBase row may contain multiple actual data entries from OceanBase.")
STAT_EVENT_ADD_DEF(HBASEAPI_INCREMENT_COUNT, "hbase increment count", ObStatClassIds::TABLEAPI, 191013, true, true, true, "Number of OBKV-HBase Increment operations. Each time an Increment operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(HBASEAPI_INCREMENT_TIME, "hbase increment time", ObStatClassIds::TABLEAPI, 191014, true, true, true, "Total time spent (in microseconds) executing OBKV-HBase Increment operations. Each time an Increment operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(HBASEAPI_INCREMENT_ROW, "hbase increment row count", ObStatClassIds::TABLEAPI, 191015, true, true, true, "Number of HBase rows involved in OBKV-HBase Increment operations. Each time an Increment operation is performed, the number of HBase rows involved is accumulated. A single HBase row may contain multiple actual data entries from OceanBase.")
STAT_EVENT_ADD_DEF(HBASEAPI_CHECK_PUT_COUNT, "hbase check_put count", ObStatClassIds::TABLEAPI, 191016, true, true, true, "Number of OBKV-HBase CheckAndPut operations. Each time a CheckAndPut operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(HBASEAPI_CHECK_PUT_TIME, "hbase check_put time", ObStatClassIds::TABLEAPI, 191017, true, true, true, "Total time spent (in microseconds) executing OBKV-HBase CheckAndPut operations. Each time a CheckAndPut operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(HBASEAPI_CHECK_PUT_ROW, "hbase check_put row count", ObStatClassIds::TABLEAPI, 191018, true, true, true, "Number of HBase rows involved in OBKV-HBase CheckAndPut operations. Each time a CheckAndPut operation is performed, the number of HBase rows involved is accumulated. A single HBase row may contain multiple actual data entries from OceanBase.")
STAT_EVENT_ADD_DEF(HBASEAPI_CHECK_DELETE_COUNT, "hbase check_delete count", ObStatClassIds::TABLEAPI, 191019, true, true, true, "Number of OBKV-HBase CheckAndDelete operations. Each time a CheckAndDelete operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(HBASEAPI_CHECK_DELETE_TIME, "hbase check_delete time", ObStatClassIds::TABLEAPI, 191020, true, true, true, "Total time spent (in microseconds) executing OBKV-HBase CheckAndDelete operations. Each time a CheckAndDelete operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(HBASEAPI_CHECK_DELETE_ROW, "hbase check_delete row count", ObStatClassIds::TABLEAPI, 191021, true, true, true, "Number of HBase rows involved in OBKV-HBase CheckAndDelete operations. Each time a CheckAndDelete operation is performed, the number of HBase rows involved is accumulated. A single HBase row may contain multiple actual data entries from OceanBase.")
STAT_EVENT_ADD_DEF(HBASEAPI_HYBRID_COUNT, "hbase hybrid count", ObStatClassIds::TABLEAPI, 191022, true, true, true, "Number of OBKV-HBase mixed Batch operations, where the Batch contains different operation types. Each time a mixed Batch operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(HBASEAPI_HYBRID_TIME, "hbase hybrid time", ObStatClassIds::TABLEAPI, 191023, true, true, true, "Total time spent (in microseconds) executing OBKV-HBase mixed Batch operations. Each time a mixed Batch operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(HBASEAPI_HYBRID_ROW, "hbase hybrid row count", ObStatClassIds::TABLEAPI, 191024, true, true, true, "Number of OceanBase data rows involved in OBKV-HBase mixed Batch operations. Each time a mixed Batch operation is performed, the number of OceanBase data rows involved is accumulated.")
STAT_EVENT_ADD_DEF(HBASEAPI_CHECK_MUTATE_COUNT, "hbase check_mutate count", ObStatClassIds::TABLEAPI, 191025, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(HBASEAPI_CHECK_MUTATE_TIME, "hbase check_mutate time", ObStatClassIds::TABLEAPI, 191026, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(HBASEAPI_CHECK_MUTATE_ROW, "hbase check_mutate row count", ObStatClassIds::TABLEAPI, 191027, true, true, false, "Deprecated since V4.4.1.")

// -- table increment 1911xx
STAT_EVENT_ADD_DEF(TABLEAPI_INCREMENT_COUNT, "single increment execute count", ObStatClassIds::TABLEAPI, 191101, true, true, true, "Number of OBKV-TABLE Increment operations. Each time an Increment operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_INCREMENT_TIME, "single increment execute time", ObStatClassIds::TABLEAPI, 191102, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Increment operations. Each time an Increment operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_INCREMENT_COUNT, "multi increment execute count", ObStatClassIds::TABLEAPI, 191103, true, true, true, "Number of OBKV-TABLE Multi Increment operations. Each time a Multi Increment operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_INCREMENT_TIME, "multi increment execute time", ObStatClassIds::TABLEAPI, 191104, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi Increment operations. Each time a Multi Increment operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_INCREMENT_ROW, "multi increment rows", ObStatClassIds::TABLEAPI, 191105, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi Increment operations. Each time a Multi Increment operation is performed, the number of OceanBase data rows involved is accumulated.")

// -- table append 1912xx
STAT_EVENT_ADD_DEF(TABLEAPI_APPEND_COUNT, "single append execute count", ObStatClassIds::TABLEAPI, 191201, true, true, true, "Number of OBKV-TABLE Append operations. Each time an Append operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_APPEND_TIME, "single append execute time", ObStatClassIds::TABLEAPI, 191202, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Append operations. Each time an Append operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_APPEND_COUNT, "multi append execute count", ObStatClassIds::TABLEAPI, 191203, true, true, true, "Number of OBKV-TABLE Multi Append operations. Each time a Multi Append operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_APPEND_TIME, "multi append execute time", ObStatClassIds::TABLEAPI, 191204, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi Append operations. Each time a Multi Append operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_APPEND_ROW, "multi append rows", ObStatClassIds::TABLEAPI, 191205, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi Append operations. Each time a Multi Append operation is performed, the number of OceanBase data rows involved is accumulated.")

// -- table put 1913xx
STAT_EVENT_ADD_DEF(TABLEAPI_PUT_COUNT, "single put execute count", ObStatClassIds::TABLEAPI, 191301, true, true, true, "Number of OBKV-TABLE Put operations. Each time a Put operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_PUT_TIME, "single put execute time", ObStatClassIds::TABLEAPI, 191302, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Put operations. Each time a Put operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_PUT_COUNT, "multi put execute count", ObStatClassIds::TABLEAPI, 191303, true, true, true, "Number of OBKV-TABLE Multi Put operations. Each time a Multi Put operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_PUT_TIME, "multi put execute time", ObStatClassIds::TABLEAPI, 191304, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi Put operations. Each time a Multi Put operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_PUT_ROW, "multi put rows", ObStatClassIds::TABLEAPI, 191305, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi Put operations. Each time a Multi Put operation is performed, the number of OceanBase data rows involved is accumulated.")

// -- table checkAndInsertUp
STAT_EVENT_ADD_DEF(TABLEAPI_CHECK_AND_INSERT_UP_COUNT, "single check and insertUp execute count", ObStatClassIds::TABLEAPI, 191306, true, true, true, "Number of OBKV-TABLE CheckAndInsertUp operations. Each time a CheckAndInsertUp operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_CHECK_AND_INSERT_UP_TIME, "single check and insertUp execute time", ObStatClassIds::TABLEAPI, 191307, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE CheckAndInsertUp operations. Each time a CheckAndInsertUp operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_CHECK_AND_INSERT_UP_COUNT, "multi check and insertUp execute count", ObStatClassIds::TABLEAPI, 191308, true, true, true, "Number of OBKV-TABLE Multi CheckAndInsertUp operations. Each time a Multi CheckAndInsertUp operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_CHECK_AND_INSERT_UP_TIME, "multi check and insertUp execute time", ObStatClassIds::TABLEAPI, 191309, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Multi CheckAndInsertUp operations. Each time a Multi CheckAndInsertUp operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_MULTI_CHECK_AND_INSERT_UP_ROW, "multi check and insertUp rows", ObStatClassIds::TABLEAPI, 191310, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Multi CheckAndInsertUp operations. Each time a Multi CheckAndInsertUp operation is performed, the number of OceanBase data rows involved is accumulated.")

// -- table trigger 1914xx
STAT_EVENT_ADD_DEF(TABLEAPI_GROUP_TRIGGER_COUNT, "group commit trigger execute count", ObStatClassIds::TABLEAPI, 191401, true, true, true, "Number of OBKV-TABLE Group Trigger operations. Each time a Group Trigger operation is performed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(TABLEAPI_GROUP_TRIGGER_TIME, "group commit trigger execute execute time", ObStatClassIds::TABLEAPI, 191402, true, true, true, "Total time spent (in microseconds) executing OBKV-TABLE Group Trigger operations. Each time a Group Trigger operation is performed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(TABLEAPI_GROUP_TRIGGER_ROW, "group commit trigger execute rows", ObStatClassIds::TABLEAPI, 191403, true, true, true, "Number of OceanBase data rows involved in OBKV-TABLE Group Trigger operations. Each time a Group Trigger operation is performed, the number of OceanBase data rows involved is accumulated.")

// -- redis api 1915xx - 1917xx
STAT_EVENT_ADD_DEF(REDISAPI_LINDEX_COUNT, "redis lindex count", ObStatClassIds::REDISAPI, 191501, true, true, true, "Number of Redis LINDEX command operations. Each time the LINDEX command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LINDEX_TIME, "redis lindex time", ObStatClassIds::REDISAPI, 191502, true, true, true, "Total time spent (in microseconds) executing the Redis LINDEX command. Each time the LINDEX command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_LSET_COUNT, "redis lset count", ObStatClassIds::REDISAPI, 191503, true, true, true, "Number of Redis LSET command operations. Each time the LSET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LSET_TIME, "redis lset time", ObStatClassIds::REDISAPI, 191504, true, true, true, "Total time spent (in microseconds) executing the Redis LSET command. Each time the LSET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_LRANGE_COUNT, "redis lrange count", ObStatClassIds::REDISAPI, 191505, true, true, true, "Number of Redis LRANGE command operations. Each time the LRANGE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LRANGE_TIME, "redis lrange time", ObStatClassIds::REDISAPI, 191506, true, true, true, "Total time spent (in microseconds) executing the Redis LRANGE command. Each time the LRANGE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_LTRIM_COUNT, "redis ltrim count", ObStatClassIds::REDISAPI, 191507, true, true, true, "Number of Redis LTRIM command operations. Each time the LTRIM command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LTRIM_TIME, "redis ltrim time", ObStatClassIds::REDISAPI, 191508, true, true, true, "Total time spent (in microseconds) executing the Redis LTRIM command. Each time the LTRIM command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_LPUSH_COUNT, "redis lpush count", ObStatClassIds::REDISAPI, 191509, true, true, true, "Number of Redis LPUSH command operations. Each time the LPUSH command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LPUSH_TIME, "redis lpush time", ObStatClassIds::REDISAPI, 191510, true, true, true, "Total time spent (in microseconds) executing the Redis LPUSH command. Each time the LPUSH command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_LPUSHX_COUNT, "redis lpushx count", ObStatClassIds::REDISAPI, 191511, true, true, true, "Number of Redis LPUSHX command operations. Each time the LPUSHX command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LPUSHX_TIME, "redis lpushx time", ObStatClassIds::REDISAPI, 191512, true, true, true, "Total time spent (in microseconds) executing the Redis LPUSHX command. Each time the LPUSHX command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_RPUSH_COUNT, "redis rpush count", ObStatClassIds::REDISAPI, 191513, true, true, true, "Number of Redis RPUSH command operations. Each time the RPUSH command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_RPUSH_TIME, "redis rpush time", ObStatClassIds::REDISAPI, 191514, true, true, true, "Total time spent (in microseconds) executing the Redis RPUSH command. Each time the RPUSH command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_RPUSHX_COUNT, "redis rpushx count", ObStatClassIds::REDISAPI, 191515, true, true, true, "Number of Redis RPUSHX command operations. Each time the RPUSHX command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_RPUSHX_TIME, "redis rpushx time", ObStatClassIds::REDISAPI, 191516, true, true, true, "Total time spent (in microseconds) executing the Redis RPUSHX command. Each time the RPUSHX command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_LPOP_COUNT, "redis lpop count", ObStatClassIds::REDISAPI, 191517, true, true, true, "Number of Redis LPOP command operations. Each time the LPOP command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LPOP_TIME, "redis lpop time", ObStatClassIds::REDISAPI, 191518, true, true, true, "Total time spent (in microseconds) executing the Redis LPOP command. Each time the LPOP command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_RPOP_COUNT, "redis rpop count", ObStatClassIds::REDISAPI, 191519, true, true, true, "Number of Redis RPOP command operations. Each time the RPOP command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_RPOP_TIME, "redis rpop time", ObStatClassIds::REDISAPI, 191520, true, true, true, "Total time spent (in microseconds) executing the Redis RPOP command. Each time the RPOP command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_LREM_COUNT, "redis lrem count", ObStatClassIds::REDISAPI, 191521, true, true, true, "Number of Redis LREM command operations. Each time the LREM command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LREM_TIME, "redis lrem time", ObStatClassIds::REDISAPI, 191522, true, true, true, "Total time spent (in microseconds) executing the Redis LREM command. Each time the LREM command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_RPOPLPUSH_COUNT, "redis rpoplpush count", ObStatClassIds::REDISAPI, 191523, true, true, true, "Number of Redis RPOPLPUSH command operations. Each time the RPOPLPUSH command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_RPOPLPUSH_TIME, "redis rpoplpush time", ObStatClassIds::REDISAPI, 191524, true, true, true, "Total time spent (in microseconds) executing the Redis RPOPLPUSH command. Each time the RPOPLPUSH command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_LINSERT_COUNT, "redis linsert count", ObStatClassIds::REDISAPI, 191525, true, true, true, "Number of Redis LINSERT command operations. Each time the LINSERT command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LINSERT_TIME, "redis linsert time", ObStatClassIds::REDISAPI, 191526, true, true, true, "Total time spent (in microseconds) executing the Redis LINSERT command. Each time the LINSERT command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_LLEN_COUNT, "redis llen count", ObStatClassIds::REDISAPI, 191527, true, true, true, "Number of Redis LLEN command operations. Each time the LLEN command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_LLEN_TIME, "redis llen time", ObStatClassIds::REDISAPI, 191528, true, true, true, "Total time spent (in microseconds) executing the Redis LLEN command. Each time the LLEN command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SDIFF_COUNT, "redis sdiff count", ObStatClassIds::REDISAPI, 191529, true, true, true, "Number of Redis SDIFF command operations. Each time the SDIFF command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SDIFF_TIME, "redis sdiff time", ObStatClassIds::REDISAPI, 191530, true, true, true, "otal time spent (in microseconds) executing the Redis SDIFF command. Each time the SDIFF command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SDIFFSTORE_COUNT, "redis sdiffstore count", ObStatClassIds::REDISAPI, 191531, true, true, true, "Number of Redis SDIFFSTORE command operations. Each time the SDIFFSTORE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SDIFFSTORE_TIME, "redis sdiffstore time", ObStatClassIds::REDISAPI, 191532, true, true, true, "Total time spent (in microseconds) executing the Redis SDIFFSTORE command. Each time the SDIFFSTORE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SINTER_COUNT, "redis sinter count", ObStatClassIds::REDISAPI, 191533, true, true, true, "Number of Redis SINTER command operations. Each time the SINTER command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SINTER_TIME, "redis sinter time", ObStatClassIds::REDISAPI, 191534, true, true, true, "Total time spent (in microseconds) executing the Redis SINTER command. Each time the SINTER command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SINTERSTORE_COUNT, "redis sinterstore count", ObStatClassIds::REDISAPI, 191535, true, true, true, "Number of Redis SINTERSTORE command operations. Each time the SINTERSTORE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SINTERSTORE_TIME, "redis sinterstore time", ObStatClassIds::REDISAPI, 191536, true, true, true, "Total time spent (in microseconds) executing the Redis SINTERSTORE command. Each time the SINTERSTORE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SUNION_COUNT, "redis sunion count", ObStatClassIds::REDISAPI, 191537, true, true, true, "Number of Redis SUNION command operations. Each time the SUNION command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SUNION_TIME, "redis sunion time", ObStatClassIds::REDISAPI, 191538, true, true, true, "Total time spent (in microseconds) executing the Redis SUNION command. Each time the SUNION command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SUNIONSTORE_COUNT, "redis sunionstore count", ObStatClassIds::REDISAPI, 191539, true, true, true, "Number of Redis SUNIONSTORE command operations. Each time the SUNIONSTORE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SUNIONSTORE_TIME, "redis sunionstore time", ObStatClassIds::REDISAPI, 191540, true, true, true, "Total time spent (in microseconds) executing the Redis SUNIONSTORE command. Each time the SUNIONSTORE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SADD_COUNT, "redis sadd count", ObStatClassIds::REDISAPI, 191541, true, true, true, "Number of Redis SADD command operations. Each time the SADD command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SADD_TIME, "redis sadd time", ObStatClassIds::REDISAPI, 191542, true, true, true, "Total time spent (in microseconds) executing the Redis SADD command. Each time the SADD command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SCARD_COUNT, "redis scard count", ObStatClassIds::REDISAPI, 191543, true, true, true, "Number of Redis SCARD command operations. Each time the SCARD command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SCARD_TIME, "redis scard time", ObStatClassIds::REDISAPI, 191544, true, true, true, "Total time spent (in microseconds) executing the Redis SCARD command. Each time the SCARD command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SISMEMBER_COUNT, "redis sismember count", ObStatClassIds::REDISAPI, 191545, true, true, true, "Number of Redis SISMEMBER command operations. Each time the SISMEMBER command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SISMEMBER_TIME, "redis sismember time", ObStatClassIds::REDISAPI, 191546, true, true, true, "Total time spent (in microseconds) executing the Redis SISMEMBER command. Each time the SISMEMBER command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SMEMBERS_COUNT, "redis smembers count", ObStatClassIds::REDISAPI, 191547, true, true, true, "Number of Redis SMEMBERS command operations. Each time the SMEMBERS command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SMEMBERS_TIME, "redis smembers time", ObStatClassIds::REDISAPI, 191548, true, true, true, "Total time spent (in microseconds) executing the Redis SMEMBERS command. Each time the SMEMBERS command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SMOVE_COUNT, "redis smove count", ObStatClassIds::REDISAPI, 191549, true, true, true, "Number of Redis SMOVE command operations. Each time the SMOVE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SMOVE_TIME, "redis smove time", ObStatClassIds::REDISAPI, 191550, true, true, true, "Total time spent (in microseconds) executing the Redis SMOVE command. Each time the SMOVE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SPOP_COUNT, "redis spop count", ObStatClassIds::REDISAPI, 191551, true, true, true, "Number of Redis SPOP command operations. Each time the SPOP command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SPOP_TIME, "redis spop time", ObStatClassIds::REDISAPI, 191552, true, true, true, "Total time spent (in microseconds) executing the Redis SPOP command. Each time the SPOP command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SRANDMEMBER_COUNT, "redis srandmember count", ObStatClassIds::REDISAPI, 191553, true, true, true, "Number of Redis SRANDMEMBER command operations. Each time the SRANDMEMBER command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SRANDMEMBER_TIME, "redis srandmember time", ObStatClassIds::REDISAPI, 191554, true, true, true, "Total time spent (in microseconds) executing the Redis SRANDMEMBER command. Each time the SRANDMEMBER command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SREM_COUNT, "redis srem count", ObStatClassIds::REDISAPI, 191555, true, true, true, "Number of Redis SREM command operations. Each time the SREM command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SREM_TIME, "redis srem time", ObStatClassIds::REDISAPI, 191556, true, true, true, "Total time spent (in microseconds) executing the Redis SREM command. Each time the SREM command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZADD_COUNT, "redis zadd count", ObStatClassIds::REDISAPI, 191557, true, true, true, "Number of Redis ZADD command operations. Each time the ZADD command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZADD_TIME, "redis zadd time", ObStatClassIds::REDISAPI, 191558, true, true, true, "Total time spent (in microseconds) executing the Redis ZADD command. Each time the ZADD command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZCARD_COUNT, "redis zcard count", ObStatClassIds::REDISAPI, 191559, true, true, true, "Number of Redis ZCARD command operations. Each time the ZCARD command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZCARD_TIME, "redis zcard time", ObStatClassIds::REDISAPI, 191560, true, true, true, "Total time spent (in microseconds) executing the Redis ZCARD command. Each time the ZCARD command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREM_COUNT, "redis zrem count", ObStatClassIds::REDISAPI, 191561, true, true, true, "Number of Redis ZREM command operations. Each time the ZREM command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREM_TIME, "redis zrem time", ObStatClassIds::REDISAPI, 191562, true, true, true, "Total time spent (in microseconds) executing the Redis ZREM command. Each time the ZREM command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZINCRBY_COUNT, "redis zincrby count", ObStatClassIds::REDISAPI, 191563, true, true, true, "Number of Redis ZINCRBY command operations. Each time the ZINCRBY command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZINCRBY_TIME, "redis zincrby time", ObStatClassIds::REDISAPI, 191564, true, true, true, "Total time spent (in microseconds) executing the Redis ZINCRBY command. Each time the ZINCRBY command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZSCORE_COUNT, "redis zscore count", ObStatClassIds::REDISAPI, 191565, true, true, true, "Number of Redis ZSCORE command operations. Each time the ZSCORE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZSCORE_TIME, "redis zscore time", ObStatClassIds::REDISAPI, 191566, true, true, true, "Total time spent (in microseconds) executing the Redis ZSCORE command. Each time the ZSCORE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZRANK_COUNT, "redis zrank count", ObStatClassIds::REDISAPI, 191567, true, true, true, "Number of Redis ZRANK command operations. Each time the ZRANK command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZRANK_TIME, "redis zrank time", ObStatClassIds::REDISAPI, 191568, true, true, true, "Total time spent (in microseconds) executing the Redis ZRANK command. Each time the ZRANK command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREVRANK_COUNT, "redis zrevrank count", ObStatClassIds::REDISAPI, 191569, true, true, true, "Number of Redis ZREVRANK command operations. Each time the ZREVRANK command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREVRANK_TIME, "redis zrevrank time", ObStatClassIds::REDISAPI, 191570, true, true, true, "Total time spent (in microseconds) executing the Redis ZREVRANK command. Each time the ZREVRANK command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZRANGE_COUNT, "redis zrange count", ObStatClassIds::REDISAPI, 191571, true, true, true, "Number of Redis ZRANGE command operations. Each time the ZRANGE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZRANGE_TIME, "redis zrange time", ObStatClassIds::REDISAPI, 191572, true, true, true, "Total time spent (in microseconds) executing the Redis ZRANGE command. Each time the ZRANGE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREVRANGE_COUNT, "redis zrevrange count", ObStatClassIds::REDISAPI, 191573, true, true, true, "Number of Redis ZREVRANGE command operations. Each time the ZREVRANGE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREVRANGE_TIME, "redis zrevrange time", ObStatClassIds::REDISAPI, 191574, true, true, true, "Total time spent (in microseconds) executing the Redis ZREVRANGE command. Each time the ZREVRANGE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREMRANGEBYRANK_COUNT, "redis zremrangebyrank count", ObStatClassIds::REDISAPI, 191575, true, true, true, "Number of Redis ZREMRANGEBYRANK command operations. Each time the ZREMRANGEBYRANK command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREMRANGEBYRANK_TIME, "redis zremrangebyrank time", ObStatClassIds::REDISAPI, 191576, true, true, true, "Total time spent (in microseconds) executing the Redis ZREMRANGEBYRANK command. Each time the ZREMRANGEBYRANK command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZCOUNT_COUNT, "redis zcount count", ObStatClassIds::REDISAPI, 191577, true, true, true, "Number of Redis ZCOUNT command operations. Each time the ZCOUNT command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZCOUNT_TIME, "redis zcount time", ObStatClassIds::REDISAPI, 191578, true, true, true, "Total time spent (in microseconds) executing the Redis ZCOUNT command. Each time the ZCOUNT command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZRANGEBYSCORE_COUNT, "redis zrangebyscore count", ObStatClassIds::REDISAPI, 191579, true, true, true, "Number of Redis ZRANGEBYSCORE command operations. Each time the ZRANGEBYSCORE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZRANGEBYSCORE_TIME, "redis zrangebyscore time", ObStatClassIds::REDISAPI, 191580, true, true, true, "Total time spent (in microseconds) executing the Redis ZRANGEBYSCORE command. Each time the ZRANGEBYSCORE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREVRANGEBYSCORE_COUNT, "redis zrevrangebyscore count", ObStatClassIds::REDISAPI, 191581, true, true, true, "Number of Redis ZREVRANGEBYSCORE command operations. Each time the ZREVRANGEBYSCORE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREVRANGEBYSCORE_TIME, "redis zrevrangebyscore time", ObStatClassIds::REDISAPI, 191582, true, true, true, "Total time spent (in microseconds) executing the Redis ZREVRANGEBYSCORE command. Each time the ZREVRANGEBYSCORE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREMRANGEBYSCORE_COUNT, "redis zremrangebyscore count", ObStatClassIds::REDISAPI, 191583, true, true, true, "Number of Redis ZREMRANGEBYSCORE command operations. Each time the ZREMRANGEBYSCORE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZREMRANGEBYSCORE_TIME, "redis zremrangebyscore time", ObStatClassIds::REDISAPI, 191584, true, true, true, "Total time spent (in microseconds) executing the Redis ZREMRANGEBYSCORE command. Each time the ZREMRANGEBYSCORE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZINTERSTORE_COUNT, "redis zinterstore count", ObStatClassIds::REDISAPI, 191585, true, true, true, "Number of Redis ZINTERSTORE command operations. Each time the ZINTERSTORE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZINTERSTORE_TIME, "redis zinterstore time", ObStatClassIds::REDISAPI, 191586, true, true, true, "Total time spent (in microseconds) executing the Redis ZINTERSTORE command. Each time the ZINTERSTORE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_ZUNIONSTORE_COUNT, "redis zunionstore count", ObStatClassIds::REDISAPI, 191587, true, true, true, "Number of Redis ZUNIONSTORE command operations. Each time the ZUNIONSTORE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_ZUNIONSTORE_TIME, "redis zunionstore time", ObStatClassIds::REDISAPI, 191588, true, true, true, "Total time spent (in microseconds) executing the Redis ZUNIONSTORE command. Each time the ZUNIONSTORE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HSET_COUNT, "redis hset count", ObStatClassIds::REDISAPI, 191589, true, true, true, "Number of Redis HSET command operations. Each time the HSET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HSET_TIME, "redis hset time", ObStatClassIds::REDISAPI, 191590, true, true, true, "Total time spent (in microseconds) executing the Redis HSET command. Each time the HSET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HMSET_COUNT, "redis hmset count", ObStatClassIds::REDISAPI, 191591, true, true, true, "Number of Redis HMSET command operations. Each time the HMSET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HMSET_TIME, "redis hmset time", ObStatClassIds::REDISAPI, 191592, true, true, true, "Total time spent (in microseconds) executing the Redis HMSET command. Each time the HMSET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HSETNX_COUNT, "redis hsetnx count", ObStatClassIds::REDISAPI, 191593, true, true, true, "Number of Redis HSETNX command operations. Each time the HSETNX command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HSETNX_TIME, "redis hsetnx time", ObStatClassIds::REDISAPI, 191594, true, true, true, "Total time spent (in microseconds) executing the Redis HSETNX command. Each time the HSETNX command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HGET_COUNT, "redis hget count", ObStatClassIds::REDISAPI, 191595, true, true, true, "Number of Redis HGET command operations. Each time the HGET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HGET_TIME, "redis hget time", ObStatClassIds::REDISAPI, 191596, true, true, true, "Total time spent (in microseconds) executing the Redis HGET command. Each time the HGET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HMGET_COUNT, "redis hmget count", ObStatClassIds::REDISAPI, 191597, true, true, true, "Number of Redis HMGET command operations. Each time the HMGET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HMGET_TIME, "redis hmget time", ObStatClassIds::REDISAPI, 191598, true, true, true, "Total time spent (in microseconds) executing the Redis HMGET command. Each time the HMGET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HGETALL_COUNT, "redis hgetall count", ObStatClassIds::REDISAPI, 191599, true, true, true, "Number of Redis HGETALL command operations. Each time the HGETALL command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HGETALL_TIME, "redis hgetall time", ObStatClassIds::REDISAPI, 191600, true, true, true, "Total time spent (in microseconds) executing the Redis HGETALL command. Each time the HGETALL command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HVALS_COUNT, "redis hvals count", ObStatClassIds::REDISAPI, 191601, true, true, true, "Number of Redis HVALS command operations. Each time the HVALS command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HVALS_TIME, "redis hvals time", ObStatClassIds::REDISAPI, 191602, true, true, true, "Total time spent (in microseconds) executing the Redis HVALS command. Each time the HVALS command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HKEYS_COUNT, "redis hkeys count", ObStatClassIds::REDISAPI, 191603, true, true, true, "Number of Redis HKEYS command operations. Each time the HKEYS command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HKEYS_TIME, "redis hkeys time", ObStatClassIds::REDISAPI, 191604, true, true, true, "Total time spent (in microseconds) executing the Redis HKEYS command. Each time the HKEYS command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HEXISTS_COUNT, "redis hexists count", ObStatClassIds::REDISAPI, 191605, true, true, true, "Number of Redis HEXISTS command operations. Each time the HEXISTS command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HEXISTS_TIME, "redis hexists time", ObStatClassIds::REDISAPI, 191606, true, true, true, "Total time spent (in microseconds) executing the Redis HEXISTS command. Each time the HEXISTS command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HDEL_COUNT, "redis hdel count", ObStatClassIds::REDISAPI, 191607, true, true, true, "Number of Redis HDEL command operations. Each time the HDEL command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HDEL_TIME, "redis hdel time", ObStatClassIds::REDISAPI, 191608, true, true, true, "Total time spent (in microseconds) executing the Redis HDEL command. Each time the HDEL command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HINCRBY_COUNT, "redis hincrby count", ObStatClassIds::REDISAPI, 191609, true, true, true, "Number of Redis HINCRBY command operations. Each time the HINCRBY command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HINCRBY_TIME, "redis hincrby time", ObStatClassIds::REDISAPI, 191610, true, true, true, "Total time spent (in microseconds) executing the Redis HINCRBY command. Each time the HINCRBY command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HINCRBYFLOAT_COUNT, "redis hincrbyfloat count", ObStatClassIds::REDISAPI, 191611, true, true, true, "Number of Redis HINCRBYFLOAT command operations. Each time the HINCRBYFLOAT command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HINCRBYFLOAT_TIME, "redis hincrbyfloat time", ObStatClassIds::REDISAPI, 191612, true, true, true, "Total time spent (in microseconds) executing the Redis HINCRBYFLOAT command. Each time the HINCRBYFLOAT command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_HLEN_COUNT, "redis hlen count", ObStatClassIds::REDISAPI, 191613, true, true, true, "Number of Redis HLEN command operations. Each time the HLEN command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_HLEN_TIME, "redis hlen time", ObStatClassIds::REDISAPI, 191614, true, true, true, "Total time spent (in microseconds) executing the Redis HLEN command. Each time the HLEN command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_GETSET_COUNT, "redis getset count", ObStatClassIds::REDISAPI, 191615, true, true, true, "Number of Redis GETSET command operations. Each time the GETSET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_GETSET_TIME, "redis getset time", ObStatClassIds::REDISAPI, 191616, true, true, true, "Total time spent (in microseconds) executing the Redis GETSET command. Each time the GETSET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SETBIT_COUNT, "redis setbit count", ObStatClassIds::REDISAPI, 191617, true, true, true, "Number of Redis SETBIT command operations. Each time the SETBIT command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SETBIT_TIME, "redis setbit time", ObStatClassIds::REDISAPI, 191618, true, true, true, "Total time spent (in microseconds) executing the Redis SETBIT command. Each time the SETBIT command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_INCR_COUNT, "redis incr count", ObStatClassIds::REDISAPI, 191619, true, true, true, "Number of Redis INCR command operations. Each time the INCR command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_INCR_TIME, "redis incr time", ObStatClassIds::REDISAPI, 191620, true, true, true, "Total time spent (in microseconds) executing the Redis INCR command. Each time the INCR command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_INCRBY_COUNT, "redis incrby count", ObStatClassIds::REDISAPI, 191621, true, true, true, "Number of Redis INCRBY command operations. Each time the INCRBY command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_INCRBY_TIME, "redis incrby time", ObStatClassIds::REDISAPI, 191622, true, true, true, "Total time spent (in microseconds) executing the Redis INCRBY command. Each time the INCRBY command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_DECR_COUNT, "redis decr count", ObStatClassIds::REDISAPI, 191623, true, true, true, "Number of Redis DECR command operations. Each time the DECR command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_DECR_TIME, "redis decr time", ObStatClassIds::REDISAPI, 191624, true, true, true, "Total time spent (in microseconds) executing the Redis DECR command. Each time the DECR command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_DECRBY_COUNT, "redis decrby count", ObStatClassIds::REDISAPI, 191625, true, true, true, "Number of Redis DECRBY command operations. Each time the DECRBY command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_DECRBY_TIME, "redis decrby time", ObStatClassIds::REDISAPI, 191626, true, true, true, "Total time spent (in microseconds) executing the Redis DECRBY command. Each time the DECRBY command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_APPEND_COUNT, "redis append count", ObStatClassIds::REDISAPI, 191627, true, true, true, "Number of Redis APPEND command operations. Each time the APPEND command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_APPEND_TIME, "redis append time", ObStatClassIds::REDISAPI, 191628, true, true, true, "Total time spent (in microseconds) executing the Redis APPEND command. Each time the APPEND command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_BITCOUNT_COUNT, "redis bitcount count", ObStatClassIds::REDISAPI, 191629, true, true, true, "Number of Redis BITCOUNT command operations. Each time the BITCOUNT command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_BITCOUNT_TIME, "redis bitcount time", ObStatClassIds::REDISAPI, 191630, true, true, true, "Total time spent (in microseconds) executing the Redis BITCOUNT command. Each time the BITCOUNT command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_GET_COUNT, "redis get count", ObStatClassIds::REDISAPI, 191631, true, true, true, "Number of Redis GET command operations. Each time the GET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_GET_TIME, "redis get time", ObStatClassIds::REDISAPI, 191632, true, true, true, "Total time spent (in microseconds) executing the Redis GET command. Each time the GET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_GETBIT_COUNT, "redis getbit count", ObStatClassIds::REDISAPI, 191633, true, true, true, "Number of Redis GETBIT command operations. Each time the GETBIT command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_GETBIT_TIME, "redis getbit time", ObStatClassIds::REDISAPI, 191634, true, true, true, "Total time spent (in microseconds) executing the Redis GETBIT command. Each time the GETBIT command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_GETRANGE_COUNT, "redis getrange count", ObStatClassIds::REDISAPI, 191635, true, true, true, "Number of Redis GETRANGE command operations. Each time the GETRANGE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_GETRANGE_TIME, "redis getrange time", ObStatClassIds::REDISAPI, 191636, true, true, true, "Total time spent (in microseconds) executing the Redis GETRANGE command. Each time the GETRANGE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_INCRBYFLOAT_COUNT, "redis incrbyfloat count", ObStatClassIds::REDISAPI, 191637, true, true, true, "Number of Redis INCRBYFLOAT command operations. Each time the INCRBYFLOAT command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_INCRBYFLOAT_TIME, "redis incrbyfloat time", ObStatClassIds::REDISAPI, 191638, true, true, true, "Total time spent (in microseconds) executing the Redis INCRBYFLOAT command. Each time the INCRBYFLOAT command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_MGET_COUNT, "redis mget count", ObStatClassIds::REDISAPI, 191639, true, true, true, "Number of Redis MGET command operations. Each time the MGET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_MGET_TIME, "redis mget time", ObStatClassIds::REDISAPI, 191640, true, true, true, "Total time spent (in microseconds) executing the Redis MGET command. Each time the MGET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_MSET_COUNT, "redis mset count", ObStatClassIds::REDISAPI, 191641, true, true, true, "Number of Redis MSET command operations. Each time the MSET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_MSET_TIME, "redis mset time", ObStatClassIds::REDISAPI, 191642, true, true, true, "Total time spent (in microseconds) executing the Redis MSET command. Each time the MSET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SET_COUNT, "redis set count", ObStatClassIds::REDISAPI, 191643, true, true, true, "Number of Redis SET command operations. Each time the SET command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SET_TIME, "redis set time", ObStatClassIds::REDISAPI, 191644, true, true, true, "Total time spent (in microseconds) executing the Redis SET command. Each time the SET command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_PSETEX_COUNT, "redis psetex count", ObStatClassIds::REDISAPI, 191645, true, true, true, "Number of Redis PSETEX command operations. Each time the PSETEX command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_PSETEX_TIME, "redis psetex time", ObStatClassIds::REDISAPI, 191646, true, true, true, "Total time spent (in microseconds) executing the Redis PSETEX command. Each time the PSETEX command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SETEX_COUNT, "redis setex count", ObStatClassIds::REDISAPI, 191647, true, true, true, "Number of Redis SETEX command operations. Each time the SETEX command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SETEX_TIME, "redis setex time", ObStatClassIds::REDISAPI, 191648, true, true, true, "Total time spent (in microseconds) executing the Redis SETEX command. Each time the SETEX command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SETNX_COUNT, "redis setnx count", ObStatClassIds::REDISAPI, 191649, true, true, true, "Number of Redis SETNX command operations. Each time the SETNX command is executed, this count is incremented by 1. ")
STAT_EVENT_ADD_DEF(REDISAPI_SETNX_TIME, "redis setnx time", ObStatClassIds::REDISAPI, 191650, true, true, true, "Total time spent (in microseconds) executing the Redis SETNX command. Each time the SETNX command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_SETRANGE_COUNT, "redis setrange count", ObStatClassIds::REDISAPI, 191651, true, true, true, "Number of Redis SETRANGE command operations. Each time the SETRANGE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_SETRANGE_TIME, "redis setrange time", ObStatClassIds::REDISAPI, 191652, true, true, true, "Total time spent (in microseconds) executing the Redis SETRANGE command. Each time the SETRANGE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_STRLEN_COUNT, "redis strlen count", ObStatClassIds::REDISAPI, 191653, true, true, true, "Number of Redis STRLEN command operations. Each time the STRLEN command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_STRLEN_TIME, "redis strlen time", ObStatClassIds::REDISAPI, 191654, true, true, true, "Total time spent (in microseconds) executing the Redis STRLEN command. Each time the STRLEN command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_TTL_COUNT, "redis ttl count", ObStatClassIds::REDISAPI, 191655, true, true, true, "Number of Redis TTL command operations. Each time the TTL command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_TTL_TIME, "redis ttl time", ObStatClassIds::REDISAPI, 191656, true, true, true, "Total time spent (in microseconds) executing the Redis TTL command. Each time the TTL command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_PTTL_COUNT, "redis pttl count", ObStatClassIds::REDISAPI, 191657, true, true, true, "Number of Redis PTTL command operations. Each time the PTTL command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_PTTL_TIME, "redis pttl time", ObStatClassIds::REDISAPI, 191658, true, true, true, "Total time spent (in microseconds) executing the Redis PTTL command. Each time the PTTL command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_EXPIRE_COUNT, "redis expire count", ObStatClassIds::REDISAPI, 191659, true, true, true, "Number of Redis EXPIRE command operations. Each time the EXPIRE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_EXPIRE_TIME, "redis expire time", ObStatClassIds::REDISAPI, 191660, true, true, true, "Total time spent (in microseconds) executing the Redis EXPIRE command. Each time the EXPIRE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_PEXPIRE_COUNT, "redis pexpire count", ObStatClassIds::REDISAPI, 191661, true, true, true, "Number of Redis PEXPIRE command operations. Each time the PEXPIRE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_PEXPIRE_TIME, "redis pexpire time", ObStatClassIds::REDISAPI, 191662, true, true, true, "Total time spent (in microseconds) executing the Redis PEXPIRE command. Each time the PEXPIRE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_EXPIREAT_COUNT, "redis expireat count", ObStatClassIds::REDISAPI, 191663, true, true, true, "Number of Redis EXPIREAT command operations. Each time the EXPIREAT command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_EXPIREAT_TIME, "redis expireat time", ObStatClassIds::REDISAPI, 191664, true, true, true, "Total time spent (in microseconds) executing the Redis EXPIREAT command. Each time the EXPIREAT command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_PEXPIREAT_COUNT, "redis pexpireat count", ObStatClassIds::REDISAPI, 191665, true, true, true, "Number of Redis PEXPIREAT command operations. Each time the PEXPIREAT command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_PEXPIREAT_TIME, "redis pexpireat time", ObStatClassIds::REDISAPI, 191666, true, true, true, "Total time spent (in microseconds) executing the Redis PEXPIREAT command. Each time the PEXPIREAT command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_DEL_COUNT, "redis del count", ObStatClassIds::REDISAPI, 191667, true, true, true, "Number of Redis DEL command operations. Each time the DEL command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_DEL_TIME, "redis del time", ObStatClassIds::REDISAPI, 191668, true, true, true, "Total time spent (in microseconds) executing the Redis DEL command. Each time the DEL command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_EXISTS_COUNT, "redis exists count", ObStatClassIds::REDISAPI, 191669, true, true, true, "Number of Redis EXISTS command operations. Each time the EXISTS command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_EXISTS_TIME, "redis exists time", ObStatClassIds::REDISAPI, 191670, true, true, true, "Total time spent (in microseconds) executing the Redis EXISTS command. Each time the EXISTS command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_TYPE_COUNT, "redis type count", ObStatClassIds::REDISAPI, 191671, true, true, true, "Number of Redis TYPE command operations. Each time the TYPE command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_TYPE_TIME, "redis type time", ObStatClassIds::REDISAPI, 191672, true, true, true, "Total time spent (in microseconds) executing the Redis TYPE command. Each time the TYPE command is executed, the execution time is added to this count.")
STAT_EVENT_ADD_DEF(REDISAPI_PERSIST_COUNT, "redis persist count", ObStatClassIds::REDISAPI, 191673, true, true, true, "Number of Redis PERSIST command operations. Each time the PERSIST command is executed, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(REDISAPI_PERSIST_TIME, "redis persist time", ObStatClassIds::REDISAPI, 191674, true, true, true, "Total time spent (in microseconds) executing the Redis PERSIST command. Each time the PERSIST command is executed, the execution time is added to this count.")

// sys_time_model related (20xxxx
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_DB_TIME, "DB time", ObStatClassIds::SYS, 200001, false, true, true, "Total time spent (in microseconds) by foreground processes executing database operations, including both CPU and non-idle wait time. OceanBase periodically updates related time model statistics. When a thread is active, it is either in ON_CPU state or in a wait event state. The time spent in each state is accumulated in the time model statistics.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_DB_CPU, "DB CPU", ObStatClassIds::SYS, 200002, false, true, true, "CPU time consumed (in microseconds) by foreground processes. OceanBase periodically updates related time model statistics. When a thread is active, it is either in ON_CPU state or in a wait event state. The time spent in each state is accumulated in the time model statistics.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_DB_INNER_TIME, "DB inner sql time", ObStatClassIds::SYS, 200003, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_DB_INNER_CPU, "DB inner sql CPU", ObStatClassIds::SYS, 200004, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_BKGD_TIME, "background elapsed time", ObStatClassIds::SYS, 200005, false, true, true, "Total time spent (in microseconds) by background processes. OceanBase periodically updates related time model statistics. When a thread is active, it is either in ON_CPU state or in a wait event state. The time spent in each state is accumulated in the time model statistics.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_BKGD_CPU, "background cpu time", ObStatClassIds::SYS, 200006, false, true, true, "CPU time consumed (in microseconds) by background processes. OceanBase periodically updates related time model statistics. When a thread is active, it is either in ON_CPU state or in a wait event state. The time spent in each state is accumulated in the time model statistics.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_BACKUP_CPU, "(backup/restore) cpu time", ObStatClassIds::SYS, 200007, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_ENCRYPT_TIME, "Tablespace encryption elapsed time", ObStatClassIds::SYS, 200008, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_ENCRYPT_CPU, "Tablespace encryption cpu time", ObStatClassIds::SYS, 200009, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_NON_IDLE_WAIT_TIME, "non idle wait time", ObStatClassIds::SYS, 200010, true, true, true, "Non-idle wait time spent (in microseconds) by foreground processes, representing the total time sessions are waiting but not in idle wait state. OceanBase periodically updates related time model statistics. When a thread is active, it is either in ON_CPU state or in a wait event state. The time spent in each state is accumulated in the time model statistics.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_IDLE_WAIT_TIME, "idle wait time", ObStatClassIds::SYS, 200011, true, true, true, "Idle wait time spent (in microseconds) by foreground processes, representing the total time sessions are in idle wait state. OceanBase periodically updates related time model statistics. When a thread is active, it is either in ON_CPU state or in a wait event state. The time spent in each state is accumulated in the time model statistics.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_BKGD_DB_TIME, "background database time", ObStatClassIds::SYS, 200012, false, true, true, "Total time spent (in microseconds) by background processes executing database operations. OceanBase periodically updates related time model statistics. When a thread is active, it is either in ON_CPU state or in a wait event state. The time spent in each state is accumulated in the time model statistics.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_BKGD_NON_IDLE_WAIT_TIME, "background database non-idle wait time", ObStatClassIds::SYS, 200013, false, true, true, "Time spent (in microseconds) by background processes executing database operations in non-idle wait state. OceanBase periodically updates related time model statistics. When a thread is active, it is either in ON_CPU state or in a wait event state. The time spent in each state is accumulated in the time model statistics.")
STAT_EVENT_ADD_DEF(SYS_TIME_MODEL_BKGD_IDLE_WAIT_TIME, "background database idle wait time", ObStatClassIds::SYS, 200014, false, true, true, "Time spent (in microseconds) by background processes executing database operations in idle wait state. OceanBase periodically updates related time model statistics. When a thread is active, it is either in ON_CPU state or in a wait event state. The time spent in each state is accumulated in the time model statistics.")
STAT_EVENT_ADD_DEF(DIAGNOSTIC_INFO_ALLOC_COUNT, "diagnostic info object allocated count", ObStatClassIds::SYS, 200015, false, true, true, "Total number of diagnostic objects allocated. OBServer diagnostic objects are used to store diagnostic statistics for database foreground and background tasks, including SQL and RPC. They are typically allocated at the start of a task and reclaimed when the task ends.")
STAT_EVENT_ADD_DEF(DIAGNOSTIC_INFO_ALLOC_FAIL_COUNT, "diagnostic info object allocate failure count", ObStatClassIds::SYS, 200016, false, true, true, "Total number of failed diagnostic object allocations. OBServer diagnostic objects are used to store diagnostic statistics for database foreground and background tasks, including SQL and RPC. They are typically allocated at the start of a task and reclaimed when the task ends.")
STAT_EVENT_ADD_DEF(DIAGNOSTIC_INFO_RETURN_COUNT, "diagnostic info object returned count", ObStatClassIds::SYS, 200017, false, true, true, "Total number of diagnostic objects reclaimed. OBServer diagnostic objects are used to store diagnostic statistics for database foreground and background tasks, including SQL and RPC. They are typically allocated at the start of a task and reclaimed when the task ends.")
STAT_EVENT_ADD_DEF(DIAGNOSTIC_INFO_RETURN_FAIL_COUNT, "diagnostic info object return failure count", ObStatClassIds::SYS, 200018, false, true, true, "Total number of failed diagnostic object reclamations. OBServer diagnostic objects are used to store diagnostic statistics for database foreground and background tasks, including SQL and RPC. They are typically allocated at the start of a task and reclaimed when the task ends.")

// wr and ash related  (2100xx)
STAT_EVENT_ADD_DEF(WR_SNAPSHOT_ELAPSE_TIME, "wr snapshot task elapse time", ObStatClassIds::WR, 210001, false, true, true, "Total time spent (in microseconds) when collecting workload repository (WR) snapshots. WR periodically collects data from OceanBase's internal views, records system status, and provides related views for users as well as management operations via the DBMS_WORKLOAD_REPOSITORY package.")
STAT_EVENT_ADD_DEF(WR_SNAPSHOT_CPU_TIME, "wr snapshot task cpu time", ObStatClassIds::WR, 210002, false, true, true, "Total CPU time consumed (in microseconds) when collecting workload repository (WR) snapshots. WR periodically collects data from OceanBase's internal views, records system status, and provides related views for users as well as management operations via the DBMS_WORKLOAD_REPOSITORY package.")
STAT_EVENT_ADD_DEF(WR_PURGE_ELAPSE_TIME, "wr purge task elapse time", ObStatClassIds::WR, 210003, false, true, true, "Total time spent (in microseconds) by workload repository (WR) when deleting WR snapshot tasks. WR periodically collects data from OceanBase's internal views, records system status, and provides related views for users as well as management operations via the DBMS_WORKLOAD_REPOSITORY package.")
STAT_EVENT_ADD_DEF(WR_PURGE_CPU_TIME, "wr purge task cpu time", ObStatClassIds::WR, 210004, false, true, true, "Total CPU time consumed (in microseconds) by workload repository (WR) when deleting WR snapshot tasks. WR periodically collects data from OceanBase's internal views, records system status, and provides related views for users as well as management operations via the DBMS_WORKLOAD_REPOSITORY package.")
STAT_EVENT_ADD_DEF(WR_SCHEDULAR_ELAPSE_TIME, "wr schedular elapse time", ObStatClassIds::WR, 210005, false, true, true, "Total time spent (in microseconds) by workload repository (WR) when scheduling tasks. WR periodically collects data from OceanBase's internal views, records system status, and provides related views for users as well as management operations via the DBMS_WORKLOAD_REPOSITORY package.")
STAT_EVENT_ADD_DEF(WR_SCHEDULAR_CPU_TIME, "wr schedular cpu time", ObStatClassIds::WR, 210006, false, true, true, "Total CPU time consumed (in microseconds) by workload repository (WR) when loading tasks. WR periodically collects data from OceanBase's internal views, records system status, and provides related views for users as well as management operations via the DBMS_WORKLOAD_REPOSITORY package.")
STAT_EVENT_ADD_DEF(WR_USER_SUBMIT_SNAPSHOT_ELAPSE_TIME, "wr user submit snapshot elapse time", ObStatClassIds::WR, 210007, false, true, true, "Total time spent (in microseconds) when collecting workload repository (WR) snapshots triggered by user commands. WR periodically collects data from OceanBase's internal views, records system status, and provides related views for users as well as management operations via the DBMS_WORKLOAD_REPOSITORY package.")
STAT_EVENT_ADD_DEF(WR_USER_SUBMIT_SNAPSHOT_CPU_TIME, "wr user submit snapshot cpu time", ObStatClassIds::WR, 210008, false, true, true, "Total CPU time consumed (in microseconds) when collecting workload repository (WR) snapshots triggered by user commands. WR periodically collects data from OceanBase's internal views, records system status, and provides related views for users as well as management operations via the DBMS_WORKLOAD_REPOSITORY package.")
STAT_EVENT_ADD_DEF(WR_COLLECTED_ASH_ROW_COUNT, "wr collected active session history row count", ObStatClassIds::WR, 210009, false, true, true, "Total number of rows collected by workload repository (WR) from ob_active_session_history. WR periodically collects data from OceanBase's internal views, records system status, and provides related views for users as well as management operations via the DBMS_WORKLOAD_REPOSITORY package.")
STAT_EVENT_ADD_DEF(ASH_SCHEDULAR_ELAPSE_TIME, "ash schedular elapse time", ObStatClassIds::WR, 210010, false, true, true, "Total time spent (in microseconds) by ob_active_session_history sampling threads. ob_active_session_history (ASH) is a diagnostic mechanism based on sampling records of all active sessions in OceanBase. It uses background threads to sample and record the running state of active sessions every second.")
STAT_EVENT_ADD_DEF(ASH_SCHEDULAR_CPU_TIME, "ash schedular cpu time", ObStatClassIds::WR, 210011, false, true, true, "Total CPU time consumed (in microseconds) by ob_active_session_history sampling threads. ob_active_session_history (ASH) is a diagnostic mechanism based on sampling records of all active sessions in OceanBase. It uses background threads to sample and record the running state of active sessions every second.")

// sqlstat relat (2200xx)
STAT_EVENT_ADD_DEF(CCWAIT_TIME, "concurrency wait total time", ObStatClassIds::SYS, 220001, true, true, true, "Total wait time (in microseconds) caused by concurrency-related wait events (such as time spent waiting due to resource locking). This is the cumulative total of corresponding concurrency wait events in OceanBase.")
STAT_EVENT_ADD_DEF(USER_IO_WAIT_TIME, "user io wait total time", ObStatClassIds::SYS, 220002, true, true, true, "Total time spent (in microseconds) by user processes waiting for I/O operations, such as reading or writing data to disk. This is the cumulative total of corresponding wait events in OceanBase.")
STAT_EVENT_ADD_DEF(APWAIT_TIME, "application wait total time", ObStatClassIds::SYS, 220003, true, true, true, "Total wait time (in microseconds) caused by user application code (such as lock waits due to row-level locking or explicit lock commands). This is the cumulative total of corresponding wait events in OceanBase.")
STAT_EVENT_ADD_DEF(SCHEDULE_WAIT_TIME, "schedule wait total time", ObStatClassIds::SYS, 220004, true, true, true, "Total time consumed (in microseconds) by SCHEDULER-related wait events. This is the cumulative total of corresponding wait events in OceanBase.")
STAT_EVENT_ADD_DEF(NETWORK_WAIT_TIME, "network wait total time", ObStatClassIds::SYS, 220005, true, true, true, "Total time consumed (in microseconds) by network-related wait events. This is the cumulative total of corresponding wait events in OceanBase.")

// shared-storage local_cache(2400xx)
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_HIT, "ss_micro_cache hit count", ObStatClassIds::CACHE, 240001, true, true, true, "Total number of user requests that hit the local micro block cache in shared storage mode. When a user request requires access to micro block data, and the data is retrieved from the local micro block cache, it is considered a cache hit. this count is incremented by 1 for each hit.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_MISS, "ss_micro_cache miss count", ObStatClassIds::CACHE, 240002, true, true, true, "Total number of user requests that missed the local micro block cache in shared storage mode. When a user request requires access to micro block data and the data is not retrieved from the local micro block cache, it is considered a cache miss. this count is incremented by 1 for each miss.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_FAIL_ADD, "ss_micro_cache failure count of adding cache", ObStatClassIds::CACHE, 240003, true, true, true, "Total number of failed attempts to add micro block data to the local micro block cache in shared storage mode. When the local micro block cache fails to write new micro block data, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_FAIL_GET, "ss_micro_cache failure count of getting cache", ObStatClassIds::CACHE, 240004, true, true, true, "Total number of failed attempts to retrieve a specified micro block from the local micro block cache in shared storage mode. When attempting to fetch specified micro block data from the local micro block cache, if an exception or failure occurs, this count is incremented by 1. (Cache misses are not counted as failures.)")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_MC_PREWARM, "ss_micro_cache major_compaction prewarm count", ObStatClassIds::CACHE, 240005, true, true, true, "Number of successful additions of micro block data to the local micro block cache during merge preheating in shared storage mode. During merge preheating, the system attempts to add hot micro block data to the local micro block cache. Each time the micro block data is successfully added (including cases where the data already exists), this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_HA_PREWARM, "ss_micro_cache migrate prewarm count", ObStatClassIds::CACHE, 240006, true, true, true, "Number of successful additions of micro block data to the local micro block cache during migration/cross-AZ disaster recovery preheating in shared storage mode. During migration replication or cross-AZ disaster recovery preheating, the system attempts to add hot micro block data to the local micro block cache. Each time the micro block data is successfully added (including cases where the data already exists), this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_REPLICA_PREWARM, "ss_micro_cache replica prewarm count", ObStatClassIds::CACHE, 240007, true, true, true, "Number of successful additions of micro block data to the local micro block cache during leader/follower replica preheating in shared storage mode. During leader/follower replica preheating, the system attempts to add hot micro block data to the local micro block cache. Each time the micro block data is successfully added (including cases where the data already exists), this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_DDL_PREWARM, "ss_micro_cache ddl prewarm count", ObStatClassIds::CACHE, 240008, true, true, true, "Number of times micro block data is successfully added to the local micro block cache during DDL preheating in shared storage mode. During DDL preheating, the system attempts to add hotspot micro block data to the local micro block cache. Each time the data is successfully added (including cases where the data already exists in the cache), this value is incremented by 1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_HOLD_COUNT, "ss_micro_cache total hold micro_block count", ObStatClassIds::CACHE, 240009, true, true, true, "Total number of micro_meta entries (including both valid and invalid) held in memory by the local micro block cache in shared storage mode. For each micro block added to the local micro block cache, a metadata entry called micro_meta is created in memory. As data expires or is evicted, micro block data may become invalid. This metric represents the total number of meta entries currently held in memory.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_HOLD_SIZE, "ss_micro_cache total hold micro_block size", ObStatClassIds::CACHE, 240010, true, true, true, "Total size (in bytes) of micro block data corresponding to all micro_meta entries (including both valid and invalid) held in memory by the local micro block cache in shared storage mode. For each micro block added to the local micro block cache, a metadata entry called micro_meta is created in memory. As data expires or is evicted, micro block data may become invalid. This metric represents the total size of micro block data corresponding to all meta entries currently held in memory.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_HIT_BYTES, "ss_micro_cache hit total bytes", ObStatClassIds::CACHE, 240011, true, true, true, "Total size (in bytes) of micro block data retrieved by user requests that hit the local micro block cache in shared storage mode. When a user request requires access to micro block data, and the data is retrieved from the local micro block cache, it is considered a cache hit. this count is incremented by the size of the micro block for each hit.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_MISS_BYTES, "ss_micro_cache miss total bytes", ObStatClassIds::CACHE, 240012, true, true, true, "Total size (in bytes) of micro block data missed by user requests in the local micro block cache in shared storage mode. When a user request requires access to micro block data and the data is not retrieved from the local micro block cache, it is considered a cache miss. this count is incremented by the size of the micro block for each miss.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_MC_PREWARM_BYTES, "ss_micro_cache major_compaction prewarm bytes", ObStatClassIds::CACHE, 240013, true, true, true, "Total size (in bytes) of all micro block data successfully added to the local micro block cache during merge preheating in shared storage mode. During merge preheating, the system attempts to add hot micro block data to the local micro block cache. Each time the micro block data is successfully added (including cases where the data already exists), this count is incremented by the size of the micro block.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_HA_PREWARM_BYTES, "ss_micro_cache migrate prewarm bytes", ObStatClassIds::CACHE, 240014, true, true, true, "Total size (in bytes) of all micro block data successfully added to the local micro block cache during migration/cross-AZ disaster recovery preheating in shared storage mode. During migration replication or cross-AZ disaster recovery preheating, the system attempts to add hot micro block data to the local micro block cache. Each time the micro block data is successfully added (including cases where the data already exists), this count is incremented by the size of the micro block.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_REPLICA_PREWARM_BYTES, "ss_micro_cache replica prewarm bytes", ObStatClassIds::CACHE, 240015, true, true, true, "Total size (in bytes) of all micro block data successfully added to the local micro block cache during leader/follower replica preheating in shared storage mode. During leader/follower replica preheating, the system attempts to add hot micro block data to the local micro block cache. Each time the micro block data is successfully added (including cases where the data already exists), this count is incremented by the size of the micro block.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_DDL_PREWARM_BYTES, "ss_micro_cache ddl prewarm bytes", ObStatClassIds::CACHE, 240016, true, true, true, "Total size (in bytes) of all micro block data successfully added to the local micro block cache during DDL preheating in shared storage mode. During DDL preheating, the system attempts to add hot micro block data to the local micro block cache. Each time the data is successfully added (including cases where the data already exists in the cache), this value is incremented by the size of the micro block.")
STAT_EVENT_ADD_DEF(SS_TMPFILE_CACHE_HIT, "ss_tmpfile_cache hit count", ObStatClassIds::CACHE, 240017, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SS_TMPFILE_CACHE_MISS, "ss_tmpfile_cache miss count", ObStatClassIds::CACHE, 240018, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_USED_DISK_SIZE, "ss_micro_cache total used disk size", ObStatClassIds::CACHE, 240019, true, true, true, "Total used disk space (in bytes) held by the local micro block cache in shared storage mode. The local micro block cache reserves a section of disk space by pre-allocating large files. This disk space is managed as logical data blocks of 2 MB each. This metric represents the total size of disk space currently used by these data blocks.")
STAT_EVENT_ADD_DEF(SS_MAJOR_MACRO_CACHE_HIT, "ss_major_macro_cache hit count", ObStatClassIds::CACHE, 240020, true, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_ADD_DEF(SS_MAJOR_MACRO_CACHE_MISS, "ss_major_macro_cache miss count", ObStatClassIds::CACHE, 240021, true, true, false, "Deprecated since V4.4.1.")

STAT_EVENT_ADD_DEF(OBJECT_STORAGE_IO_HEAD_COUNT, "object storage io head count", ObStatClassIds::STORAGE, 240022, true, true, true, "Number of object storage HEAD operations. Each time an object storage HEAD request is initiated, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(OBJECT_STORAGE_IO_HEAD_FAIL_COUNT, "object storage io head fail count", ObStatClassIds::STORAGE, 240023, true, true, true, "Number of failed object storage HEAD operations. Each time an object storage HEAD request fails, this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_COMMON_ADD_COUNT, "ss_micro_cache add micro_block count of common_io", ObStatClassIds::CACHE, 240024, true, true, true, "Total number of times micro blocks are added to the local micro block cache based on user requests in shared storage mode. Each time a micro block is fetched from object storage and cached to the local disk in response to a user request, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_COMMON_GET_COUNT, "ss_micro_cache get micro_block count of common_io", ObStatClassIds::CACHE, 240025, true, true, true, "Total number of times micro blocks are retrieved from the tenant's local micro block cache based on user requests in shared storage mode. Each time a user request attempts to read micro block data from the local micro block cache, this value is incremented by 1 (regardless of whether the read is successful).")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_NEW_ADD_COUNT, "ss_micro_cache total new added micro_block count", ObStatClassIds::CACHE, 240026, true, true, true, "Total number of micro blocks added to the local micro block cache based on user requests in shared storage mode. When a user request needs to add micro block data to the local micro block cache and the micro block does not currently exist in the cache, it is considered a first-time addition. this count is incremented by 1 for each such addition.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_COMMON_NEW_ADD_COUNT, "ss_micro_cache new added micro_block count of common_io", ObStatClassIds::CACHE, 240027, true, true, true, "Total number of successful additions of micro blocks to the tenant's local micro block cache based on user requests in shared storage mode. Each time a micro block is successfully fetched from object storage and cached to the local disk in response to a user request, if there was no information about this micro block in the cache prior to the addition, this value is incremented by 1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_EVICT_COUNT, "ss_micro_cache total evicted micro_block count", ObStatClassIds::CACHE, 240028, true, true, true, "Cumulative number of micro_meta entries converted to ghost micro_meta in the local micro block cache in shared storage mode. The local micro block cache uses the ARC cache replacement algorithm. When a micro block needs to be evicted, its corresponding data is deleted and its micro_meta becomes a ghost micro_meta. This metric represents the total number of micro_meta entries that have been converted to ghost micro_meta.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_DELETE_COUNT, "ss_micro_cache total deleted micro_block count", ObStatClassIds::CACHE, 240029, true, true, true, "Cumulative number of deleted ghost micro_meta entries in the local micro block cache in shared storage mode. The local micro block cache uses the ARC cache replacement algorithm. If a micro block is evicted but its micro_meta is retained, this micro_meta is called a ghost micro_meta. This metric represents the total number of ghost micro_meta entries that have been deleted.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_REORGAN_FREE_BLK_COUNT, "ss_micro_cache released phy_block count by reorgan_task", ObStatClassIds::CACHE, 240030, true, true, true, "Net number of data blocks released by micro block reorganization tasks in shared storage mode. Local micro block cache disk space is managed in 2 MB data blocks. When disk space is full, valid data from low-utilization blocks is aggregated into new blocks, releasing these blocks. This metric represents the total net number of released data blocks.")

STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_STORAGE_CACHE_POLICY_PREWARM, "ss_micro_cache storage_cache_policy prewarm count", ObStatClassIds::CACHE, 240031, true, true, true, "Number of successful additions of micro block data to the local micro block cache during manual hotspot data preheating in shared storage mode. During manual hotspot data preheating, the system attempts to add hotspot micro block data to the local micro block cache. Each time the micro block data is successfully added (including cases where the data already exists), this count is incremented by 1.")
STAT_EVENT_ADD_DEF(SS_MICRO_CACHE_STORAGE_CACHE_POLICY_PREWARM_BYTES, "ss_micro_cache storage_cache_policy prewarm bytes", ObStatClassIds::CACHE, 240032, true, true, true, "Total size (in bytes) of all micro block data successfully added to the local micro block cache during manual hotspot data preheating in shared storage mode. During manual hotspot data preheating, the system attempts to add hotspot micro block data to the local micro block cache. Each time the micro block data is successfully added (including cases where the data already exists), this count is incremented by the size of the micro block.")
STAT_EVENT_ADD_DEF(EXTERNAL_TABLE_PREBUFFER_CNT, "external table pre-buffer calls", ObStatClassIds::CACHE, 240033, true, true, true, "")
STAT_EVENT_ADD_DEF(EXTERNAL_TABLE_PREBUFFER_MISS_CNT, "external table pre-buffer miss count", ObStatClassIds::CACHE, 240034, true, true, true, "")
STAT_EVENT_ADD_DEF(EXTERNAL_TABLE_MEM_CACHE_HIT_BYTES, "external table memory cache hit bytes", ObStatClassIds::CACHE, 240035, true, true, true, "")
STAT_EVENT_ADD_DEF(EXTERNAL_TABLE_MEM_CACHE_MISS_BYTES, "external table memory cache miss bytes", ObStatClassIds::CACHE, 240036, true, true, true, "")
STAT_EVENT_ADD_DEF(EXTERNAL_TABLE_IO_CNT, "external table io count", ObStatClassIds::CACHE, 240037, true, true, true, "")
STAT_EVENT_ADD_DEF(EXTERNAL_TABLE_IO_TIME, "external table io time", ObStatClassIds::CACHE, 240038, true, true, true, "")
STAT_EVENT_ADD_DEF(EXTERNAL_TABLE_IO_SIZE, "external table io size", ObStatClassIds::CACHE, 240039, true, true, true, "")

// shared-storage diagnose(2401xx)
STAT_EVENT_ADD_DEF(SS_META_READ_COUNT, "ss meta read count", ObStatClassIds::OBSERVER, 240101, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_META_READ_DELAY, "ss meta read delay", ObStatClassIds::OBSERVER, 240102, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_META_WRITE_COUNT, "ss meta write count", ObStatClassIds::OBSERVER, 240103, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_META_WRITE_DELAY, "ss meta write delay", ObStatClassIds::OBSERVER, 240104, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_UPLOAD_TASK_TOTAL_COUNT, "The total count of all upload tasks", ObStatClassIds::STORAGE, 240105, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_UPLOAD_TASK_TOTAL_MACRO_BLOCK_COUNT, "The total macro block count of all upload tasks", ObStatClassIds::STORAGE, 240106, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_UPLOAD_TASK_TOTAL_EXEC_TIME, "The total execution time taken for all upload tasks", ObStatClassIds::STORAGE, 240107, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_UPLOAD_TASK_TOTAL_WAIT_SCHEDULE_TIME, "The total wait schedule time taken for all upload tasks", ObStatClassIds::STORAGE, 240108, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_FILE_COUNT, "ss public directory gc file count", ObStatClassIds::OBSERVER, 240109, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_FILE_DELAY, "ss public directory gc file time", ObStatClassIds::OBSERVER, 240110, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_TABLET_VERSION_COUNT, "ss public directory gc tablet version count", ObStatClassIds::OBSERVER, 240111, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_TABLET_VERSION_DELAY, "ss public directory gc tablet version time", ObStatClassIds::OBSERVER, 240112, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_TABLET_FAIL_FILE_COUNT, "ss public directory gc fail files of tablet count", ObStatClassIds::OBSERVER, 240113, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_TABLET_FAIL_FILE_DELAY, "ss public directory gc fail files of tablet time", ObStatClassIds::OBSERVER, 240114, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_LS_COUNT, "ss public directory gc ls count", ObStatClassIds::OBSERVER, 240115, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_LS_DELAY, "ss public directory gc ls time", ObStatClassIds::OBSERVER, 240116, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_TENANT_COUNT, "ss public directory gc tenant count", ObStatClassIds::OBSERVER, 240117, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_TENANT_DELAY, "ss public directory gc tenant time", ObStatClassIds::OBSERVER, 240118, true, true, true, "")
STAT_EVENT_ADD_DEF(SS_UPLOAD_TASK_TOTAL_FAILURE_COUNT, "The total failure count of all upload tasks", ObStatClassIds::STORAGE, 240119, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_ATTACH_MINOR_FULLY_COUNT, "The total fully attach minor sstable success count", ObStatClassIds::STORAGE, 240120, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_ATTACH_MINOR_FAILURE_COUNT, "The total attach minor sstable failure count", ObStatClassIds::STORAGE, 240121, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_GC_TABLET_SSTABLE_COUNT, "The total count of gc tablet sstable success count", ObStatClassIds::STORAGE, 240122, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SCHEDULE_ATTACH_MINOR_SUCCESS_COUNT, "The total schedule attach minor sstable success count", ObStatClassIds::STORAGE, 240123, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SCHEDULE_ATTACH_MINOR_FAILURE_COUNT, "The total schedule attach minor sstable failure count", ObStatClassIds::STORAGE, 240124, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MINOR_MERGE_SUCCESS_COUNT, "The total minor sstable merge success count", ObStatClassIds::STORAGE, 240125, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MINOR_MERGE_FAILURE_COUNT, "The total minor sstable merge failure count", ObStatClassIds::STORAGE, 240126, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MAJOR_MERGE_SUCCESS_COUNT, "The total major sstable merge success count", ObStatClassIds::STORAGE, 240127, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MAJOR_MERGE_FAILURE_COUNT, "The total major sstable merge failure count", ObStatClassIds::STORAGE, 240128, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MINOR_MERGE_EXECUTE_TIME, "The total minor sstable merge execute time", ObStatClassIds::STORAGE, 240129, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MAJOR_MERGE_EXECUTE_TIME, "The total major sstable merge execute time", ObStatClassIds::STORAGE, 240130, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_SCHED_MINOR_MERGE_COUNT, "The total minor sstable merge schedule count", ObStatClassIds::STORAGE, 240131, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_SCHED_MINOR_MERGE_TIME, "The total minor sstable merge schedule time", ObStatClassIds::STORAGE, 240132, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MINOR_MERGE_TOTAL_MACRO_BLOCK_COUNT, "The total minor sstable merge total macro block count", ObStatClassIds::STORAGE, 240133, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MINOR_MERGE_REUSE_MACRO_BLOCK_COUNT, "The total minor sstable merge reuse macro block count", ObStatClassIds::STORAGE, 240134, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MAJOR_MERGE_TOTAL_MACRO_BLOCK_COUNT, "The total major sstable merge total macro block count", ObStatClassIds::STORAGE, 240135, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSTABLE_MAJOR_MERGE_REUSE_MACRO_BLOCK_COUNT, "The total major sstable merge reuse macro block count", ObStatClassIds::STORAGE, 240136, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSLOG_NOTIFY_WAIT_ENQUEUE_COUNT, "The total enqueue count of sslog notify wait queue", ObStatClassIds::STORAGE, 240137, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSLOG_NOTIFY_WAIT_DEQUEUE_COUNT, "The total dequeue count of sslog notify wait queue", ObStatClassIds::STORAGE, 240138, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSLOG_NOTIFY_READY_ENQUEUE_COUNT, "The total enqueue count of sslog notify eady queue", ObStatClassIds::STORAGE, 240139, false, true, true, "")
STAT_EVENT_ADD_DEF(SS_SSLOG_NOTIFY_READY_DEQUEUE_COUNT, "The total dequeue count of sslog notify ready queue", ObStatClassIds::STORAGE, 240140, false, true, true, "")

// external table cache(2402xx)
STAT_EVENT_ADD_DEF(OPT_EXTERNAL_TABLE_STAT_CACHE_HIT, "opt external table stat cache hit", ObStatClassIds::CACHE, 240201, false, true, true, "")
STAT_EVENT_ADD_DEF(OPT_EXTERNAL_TABLE_STAT_CACHE_MISS, "opt external table stat cache miss", ObStatClassIds::CACHE, 240202, false, true, true, "")
STAT_EVENT_ADD_DEF(OPT_EXTERNAL_COLUMN_STAT_CACHE_HIT, "opt external column stat cache hit", ObStatClassIds::CACHE, 240203, false, true, true, "")
STAT_EVENT_ADD_DEF(OPT_EXTERNAL_COLUMN_STAT_CACHE_MISS, "opt external column stat cache miss", ObStatClassIds::CACHE, 240204, false, true, true, "")

//end
STAT_EVENT_ADD_DEF(STAT_EVENT_ADD_END, "event add end", ObStatClassIds::DEBUG, 1, false, false, true, "")

#endif

#ifdef STAT_EVENT_SET_DEF
// NETWORK
STAT_EVENT_SET_DEF(STANDBY_FETCH_LOG_BYTES, "standby fetch log bytes", ObStatClassIds::NETWORK, 110000, false, true, true, "Cumulative amount of data (in bytes) received via RPC during standby synchronization on the OBServer node. When data is received via RPC for network standby synchronization, the number of bytes received is added to STANDBY_FETCH_LOG_BYTES.")
STAT_EVENT_SET_DEF(STANDBY_FETCH_LOG_BANDWIDTH_LIMIT, "standby fetch log bandwidth limit", ObStatClassIds::NETWORK, 110001, false, true, true, "Allocated bandwidth (in bytes) for network throttling of standby synchronization on the OBServer node. When network throttling for standby is enabled, the RS node distributes bandwidth to nodes in the cluster according to the configured policy. After the OBServer node obtains the throttled bandwidth allocated by the RS, it records this value in STANDBY_FETCH_LOG_BANDWIDTH_LIMIT.")

// QUEUE

// TRANS

// SQL

// CACHE
STAT_EVENT_SET_DEF(LOCATION_CACHE_SIZE, "location cache size", ObStatClassIds::CACHE, 120000, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(TABLET_LS_CACHE_SIZE, "tablet ls cache size", ObStatClassIds::CACHE, 120001, false, true, true, "Tablet cache size (in bytes). The tablet cache is used in the get_from_cache_ function.")
STAT_EVENT_SET_DEF(OPT_TAB_STAT_CACHE_SIZE, "table stat cache size", ObStatClassIds::CACHE, 120002, false, true, true, "Memory space occupied by table-level/partition-level statistics cache (in bytes). Only the KV cache module collects this metric.")
STAT_EVENT_SET_DEF(OPT_TAB_COL_STAT_CACHE_SIZE, "table col stat cache size", ObStatClassIds::CACHE, 120003, false, true, true, "Memory space occupied by column-level statistics cache (in bytes). Only the KV cache module collects this metric.")
STAT_EVENT_SET_DEF(INDEX_BLOCK_CACHE_SIZE, "index block cache size", ObStatClassIds::CACHE, 120004, false, true, true, "Cache size (in bytes) used by intermediate index micro blocks. The index_block_cache_ for intermediate index micro blocks is used in the get_micro_block_handle function.")
STAT_EVENT_SET_DEF(SYS_BLOCK_CACHE_SIZE, "sys block cache size", ObStatClassIds::CACHE, 120005, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(USER_BLOCK_CACHE_SIZE, "user block cache size", ObStatClassIds::CACHE, 120006, false, true, true, "Cache size used (in bytes) by data micro blocks. The index_block_cache_ for intermediate index micro blocks is used in the get_micro_block_handle function.")
STAT_EVENT_SET_DEF(USER_ROW_CACHE_SIZE, "user row cache size", ObStatClassIds::CACHE, 120008, false, true, true, "Cache size used (in bytes) by the table get operator when prefetching data rows. This cache is used in the lookup_in_cache function.")
STAT_EVENT_SET_DEF(BLOOM_FILTER_CACHE_SIZE, "bloom filter cache size", ObStatClassIds::CACHE, 120009, false, true, true, "Total size (in bytes) of macro block Bloom filter cache. When a user executes an insert statement, a primary key conflict check is required. If the data being checked is on disk, a common performance optimization is to construct Bloom filters for the relevant data range to avoid unnecessary I/O. These metrics are related to the Bloom filter cache.")
STAT_EVENT_SET_DEF(LOG_KV_CACHE_SIZE, "log kv cache size", ObStatClassIds::CACHE, 120010, false, true, true, "Total size (in bytes) of logs read from the cold cache. When reading logs from PALF, if the hot cache misses, the system attempts to read from the cold cache. Each time the requested log is found in the cold cache, the size of the log read is added to this count.")

// STORAGE
STAT_EVENT_SET_DEF(ACTIVE_MEMSTORE_USED, "active memstore used", ObStatClassIds::STORAGE, 130000, false, true, true, "Size of active MemStore (in bytes) on the node. The node uses MemStore for replaying or writing operations. When MemStore usage reaches a threshold, a freeze is triggered. All MemStores that are not frozen are referred to as active MemStores.")
STAT_EVENT_SET_DEF(TOTAL_MEMSTORE_USED, "total memstore used", ObStatClassIds::STORAGE, 130001, false, true, true, "Total amount of memory (in bytes) used by the tenant's MemStore on the node. This memory usage includes both active and frozen MemStores, meaning it accounts for all MemStore memory usage by the tenant on this node.")
STAT_EVENT_SET_DEF(MAJOR_FREEZE_TRIGGER, "major freeze trigger", ObStatClassIds::STORAGE, 130002, false, true, true, "MemStore size (in bytes) that triggers a freeze. In the get_tenant_memstore_cond_ function, this value is calculated as the sum of memstore_freeze_trigger_ and max_cached_memstore_size_.")
STAT_EVENT_SET_DEF(MEMSTORE_LIMIT, "memstore limit", ObStatClassIds::STORAGE, 130004, false, true, true, "Maximum memory limit (in bytes) for tenant MemStore on a node. Users can specify the maximum memory limit for a tenant by configuring memstore_limit_percentage and _memstore_limit_percentage. memstore_limit_percentage is set at the cluster level, while _memstore_limit_percentage is set at the tenant level. The _memstore_limit_percentage parameter takes precedence over memstore_limit_percentage. If neither parameter is set, tenants with less than 8 GB of memory can use up to 40% of their memory for MemStore, while tenants with more than 8 GB of memory can use up to 50%.")

// RESOURCE
STAT_EVENT_SET_DEF(SRV_DISK_SIZE, "SRV_DISK_SIZE", RESOURCE, "SRV_DISK_SIZE", false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(SRV_MEMORY_SIZE, "SRV_MEMORY_SIZE", RESOURCE, "SRV_MEMORY_SIZE", false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(MIN_MEMORY_SIZE, "min memory size", ObStatClassIds::RESOURCE, 140001, false, true, true, "Tenant memory specification (in bytes), which determines the tenant's memory limit. The nodebalance background thread regularly fetches the tenant's latest min_memory from the __all_unit_config table and updates the limit in ObTenantMemoryMgr.")
STAT_EVENT_SET_DEF(MAX_MEMORY_SIZE, "max memory size", ObStatClassIds::RESOURCE, 140002, false, true, true, "Tenant memory specification (in bytes), which determines the tenant's memory limit. The nodebalance background thread regularly fetches the tenant's latest min_memory from the __all_unit_config table and updates the limit in ObTenantMemoryMgr.")
STAT_EVENT_SET_DEF(MEMORY_USAGE, "memory usage", ObStatClassIds::RESOURCE, 140003, false, true, true, "Memory occupied by the tenant (in bytes). ObTenantMemoryMgr maintains a real-time value to record the tenant's actual memory usage.")
STAT_EVENT_SET_DEF(SRV_CPUS, "SRV_CPUS", RESOURCE, "SRV_CPUS", false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(MIN_CPUS, "min cpus", ObStatClassIds::RESOURCE, 140004, false, true, true, "Tenant CPU specification. Determines the number of resident worker threads for the tenant and the number of threads for certain background modules. The nodebalance background thread regularly fetches the latest max_cpu from the __all_unit_config table and synchronizes it to all tenants. The OMT background thread periodically adjusts the number of worker threads based on the synchronized max_cpu.")
STAT_EVENT_SET_DEF(MAX_CPUS, "max cpus", ObStatClassIds::RESOURCE, 140005, false, true, true, "Tenant CPU specification. Determines the number of resident worker threads for the tenant and the number of threads for certain background modules. When cgroup is enabled, it sets the upper limit for tenant thread CPU usage. The nodebalance background thread regularly fetches the latest max_cpu from the __all_unit_config table and synchronizes it to all tenants. The OMT background thread periodically adjusts the number of worker threads based on the synchronized max_cpu.")
STAT_EVENT_SET_DEF(CPU_USAGE, "cpu usage", ObStatClassIds::RESOURCE, 140006, false, true, true, "Worker thread utilization rate (%) for the tenant, reflecting how busy the tenant's worker threads are. Every 10 seconds, the OMT background thread calculates the proportion of time tenant worker threads spend processing requests out of the total time, normalizes it, and multiplies by the tenant’s min_cpu to obtain the cpu_usage statistic.")
STAT_EVENT_SET_DEF(DISK_USAGE, "disk usage", ObStatClassIds::RESOURCE, 140007, false, true, true, "")
STAT_EVENT_SET_DEF(MEMORY_USED_SIZE, "observer memory used size", ObStatClassIds::RESOURCE, 140008, false, true, true, "Actual memory usage of OBServer (in bytes). AChunkMgr maintains a real-time value to record OBServer's actual memory usage (which is less than or equal to the memory occupied).")
STAT_EVENT_SET_DEF(MEMORY_FREE_SIZE, "observer memory free size", ObStatClassIds::RESOURCE, 140009, false, true, true, "OBServer chunk cache. AChunkMgr maintains a real-time memory value to record the cache size of OBServer. The cache represents memory allocated by OBServer but not yet actually used.")
STAT_EVENT_SET_DEF(IS_MINI_MODE, "is mini mode", ObStatClassIds::RESOURCE, 140010, false, true, true, "Whether the observer process is in mini mode. The observer process is considered to be in mini mode if its memory is less than 12 GB.")
STAT_EVENT_SET_DEF(MEMORY_HOLD_SIZE, "observer memory hold size", ObStatClassIds::RESOURCE, 140011, false, true, true, "Memory occupied by OBServer (in bytes), including both cache and all memory actually used by users. AChunkMgr maintains a real-time value to record the memory occupied by OBServer.")
STAT_EVENT_SET_DEF(WORKER_TIME, "worker time", ObStatClassIds::RESOURCE, 140012, false, true, true, "Total busy time of tenant worker threads (in microseconds). Every 10 seconds, the OMT background thread sums up the total time tenant worker threads spend processing requests and accumulates this into the worker_time value.")
STAT_EVENT_SET_DEF(CPU_TIME, "cpu time", ObStatClassIds::RESOURCE, 140013, false, true, true, "Total CPU time (in microseconds) used by tenant worker threads and background threads. When cgroup is enabled: The total CPU time for tenant threads can be obtained by reading the cpuacct.usage file in the tenant's cgroup directory. When cgroup is disabled: The OMT background thread scans all tenant threads every 10 seconds, calculates the difference in /proc/[pid]/task/[tid]/stat between two scans, sums up the CPU time increments, and accumulates the total.")
STAT_EVENT_SET_DEF(MEMORY_LIMIT, "effective observer memory limit", ObStatClassIds::RESOURCE, 140014, false, true, true, "Memory limit of OBServer (in bytes). Only the sys tenant can query this value, which is node-level. Default: The memory limit is set by the memory_limit_percentage parameter, so OBServer's memory limit is memory_limit_percentage × physical memory of the machine. Users can also set the memory limit explicitly by configuring memory_limit.")
STAT_EVENT_SET_DEF(SYSTEM_MEMORY, "effective system memory", ObStatClassIds::RESOURCE, 140015, false, true, true, "Reserved memory (in bytes) for tenant 500 plus hidden sys memory. Default: Adapts the memory value based on the memory_limit parameter. Can be explicitly set using the system_memory parameter.")
STAT_EVENT_SET_DEF(HIDDEN_SYS_MEMORY, "effective hidden sys memory", ObStatClassIds::RESOURCE, 140016, false, true, true, "Hidden memory limit for the sys tenant (in bytes). Each OBServer node allocates a portion of memory for sys tenant usage. Default behavior: Automatically adapts the memory value based on the system_memory parameter. Users can also explicitly specify the value through the _hidden_sys_tenant_memory parameter.")
STAT_EVENT_SET_DEF(MAX_SESSION_NUM, "max session num", ObStatClassIds::RESOURCE, 140017, false, true, true, "Maximum allowed sessions for the tenant. The maximum session count permitted for the tenant is calculated based on the tenant's memory size.")
STAT_EVENT_SET_DEF(KV_CACHE_HOLD, "kvcache hold", ObStatClassIds::RESOURCE, 140018, false, true, true, "Memory usage (in bytes) of kvcache. The memory manager tracks the memory occupied by kvcache.")
STAT_EVENT_SET_DEF(UNMANAGED_MEMORY_SIZE, "unmanaged memory size", ObStatClassIds::RESOURCE, 140019, false, true, true, "Memory (in bytes) allocated by library functions using mmap. This is a global memory value that records in real time the memory allocated and released via mmap/unmap calls from library functions. It refers to memory allocated using mmap by third-party library functions called by observer.") // FARM COMPAT WHITELIST
STAT_EVENT_SET_DEF(HIDDEN_SYS_DATA_DISK_SIZE, "hidden sys data disk size", ObStatClassIds::RESOURCE, 140020, false, true, true, "Disk size (in bytes) of the hidden sys tenant configuration in shared storage mode. For non-sys tenants, this value is displayed as 0. For sys tenants, there are two scenarios: 1. If the value of the hidden parameter _ss_hidden_sys_tenant_data_disk_size is 0, then HIDDEN_SYS_DATA_DISK_SIZE is set to twice the value of the hidden parameter _hidden_sys_tenant_memory at observer startup. 2. If _ss_hidden_sys_tenant_data_disk_size is non-zero, then HIDDEN_SYS_DATA_DISK_SIZE is set to the value of this hidden parameter.")

//CLOG

// DEBUG
STAT_EVENT_SET_DEF(OBLOGGER_WRITE_SIZE, "oblogger log bytes", ObStatClassIds::DEBUG, 160001, false, true, true, "Cumulative total size (in bytes) of printed logs. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ELECTION_WRITE_SIZE, "election log bytes", ObStatClassIds::DEBUG, 160002, false, true, true, "Total size (in bytes) of election log prints. Refers to the cumulative size of printed election.log logs.")
STAT_EVENT_SET_DEF(ROOTSERVICE_WRITE_SIZE, "rootservice log bytes", ObStatClassIds::DEBUG, 160003, false, true, true, "")
STAT_EVENT_SET_DEF(OBLOGGER_TOTAL_WRITE_COUNT, "oblogger total log count", ObStatClassIds::DEBUG, 160004, false, true, true, "Cumulative number of log prints. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ELECTION_TOTAL_WRITE_COUNT, "election total log count", ObStatClassIds::DEBUG, 160005, false, true, true, "")
STAT_EVENT_SET_DEF(ROOTSERVICE_TOTAL_WRITE_COUNT, "rootservice total log count", ObStatClassIds::DEBUG, 160006, false, true, true, "")
STAT_EVENT_SET_DEF(ASYNC_ERROR_LOG_DROPPED_COUNT, "async error log dropped count", ObStatClassIds::DEBUG, 160019, false, true, true, "Number of failed error log prints (due to throttling or other reasons). This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_WARN_LOG_DROPPED_COUNT, "async warn log dropped count", ObStatClassIds::DEBUG, 160020, false, true, true, "Number of failed warning log prints. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_INFO_LOG_DROPPED_COUNT, "async info log dropped count", ObStatClassIds::DEBUG, 160021, false, true, true, "Number of failed info log prints (due to throttling or other reasons). This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_TRACE_LOG_DROPPED_COUNT, "async trace log dropped count", ObStatClassIds::DEBUG, 160022, false, true, true, "Number of failed trace log prints. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_DEBUG_LOG_DROPPED_COUNT, "async debug log dropped count", ObStatClassIds::DEBUG, 160023, false, true, true, "Number of failed debug log prints (due to throttling or other reasons). This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_LOG_FLUSH_SPEED, "async log flush speed", ObStatClassIds::DEBUG, 160024, false, true, true, "Average number of log entries written per second. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_GENERIC_LOG_WRITE_COUNT, "async generic log write count", ObStatClassIds::DEBUG, 160025, false, true, true, "Number of successful default log prints. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_USER_REQUEST_LOG_WRITE_COUNT, "async user request log write count", ObStatClassIds::DEBUG, 160026, false, true, true, "Deprecated, but code retained. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_DATA_MAINTAIN_LOG_WRITE_COUNT, "async data maintain log write count", ObStatClassIds::DEBUG, 160027, false, true, true, "Number of successful log prints during minor and major compactions. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_ROOT_SERVICE_LOG_WRITE_COUNT, "async root service log write count", ObStatClassIds::DEBUG, 160028, false, true, true, "Number of successful RS log prints. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_SCHEMA_LOG_WRITE_COUNT, "async schema log write count", ObStatClassIds::DEBUG, 160029, false, true, true, "Number of successful schema log prints. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_FORCE_ALLOW_LOG_WRITE_COUNT, "async force allow log write count", ObStatClassIds::DEBUG, 160030, false, true, true, "Number of successful forced log prints. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_GENERIC_LOG_DROPPED_COUNT, "async generic log dropped count", ObStatClassIds::DEBUG, 160031, false, true, true, "Number of failed default log prints (due to throttling or other reasons). This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_USER_REQUEST_LOG_DROPPED_COUNT, "async user request log dropped count", ObStatClassIds::DEBUG, 160032, false, true, true, "Deprecated, but code retained. This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_DATA_MAINTAIN_LOG_DROPPED_COUNT, "async data maintain log dropped count", ObStatClassIds::DEBUG, 160033, false, true, true, "Number of failed log prints during minor and major compactions (due to throttling or other reasons). This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_ROOT_SERVICE_LOG_DROPPED_COUNT, "async root service log dropped count", ObStatClassIds::DEBUG, 160034, false, true, true, "Number of failed RS log prints (due to throttling or other reasons). This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_SCHEMA_LOG_DROPPED_COUNT, "async schema log dropped count", ObStatClassIds::DEBUG, 160035, false, true, true, "Number of failed schema log prints (due to throttling or other reasons). This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(ASYNC_FORCE_ALLOW_LOG_DROPPED_COUNT, "async force allow log dropped count", ObStatClassIds::DEBUG, 160036, false, true, true, "Number of failed forced log prints (due to throttling or other reasons). This metric represents the output process of system logs such as observer.log.")
STAT_EVENT_SET_DEF(OB_LOGGER_ALLOC_FROM_CACHE_COUNT, "logger allocate log item from cache count", ObStatClassIds::DEBUG, 160037, false, true, true, "Number of log items allcate from cache.")
STAT_EVENT_SET_DEF(OB_LOGGER_ALLOC_FROM_ALLCATOR_COUNT, "logger allocate log item from allocator count", ObStatClassIds::DEBUG, 160038, false, true, true, "Number of log items allcate from allocator.")

//OBSERVER
STAT_EVENT_SET_DEF(OBSERVER_PARTITION_TABLE_UPATER_USER_QUEUE_SIZE, "observer partition table updater user table queue size", ObStatClassIds::OBSERVER, 170001, false, true, true, "")
STAT_EVENT_SET_DEF(OBSERVER_PARTITION_TABLE_UPATER_SYS_QUEUE_SIZE, "observer partition table updater system table queue size", ObStatClassIds::OBSERVER, 170002, false, true, true, "")
STAT_EVENT_SET_DEF(OBSERVER_PARTITION_TABLE_UPATER_CORE_QUEUE_SIZE, "observer partition table updater core table queue size", ObStatClassIds::OBSERVER, 170003, false, true, true, "")

// rootservice
STAT_EVENT_SET_DEF(RS_START_SERVICE_TIME, "rootservice start time", ObStatClassIds::RS, 180001, false, true, false, "Deprecated since V4.4.1.")

// das
STAT_EVENT_SET_DEF(DAS_PARALLEL_TENANT_MEMORY_USAGE, "the memory use of all DAS parallel task", ObStatClassIds::SQL, 230001, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(DAS_PARALLEL_TENANT_TASK_CNT, "the count of DAS parallel task", ObStatClassIds::SQL, 230002, false, true, false, "Deprecated since V4.4.1.")

// shared-storage local_cache(start from 245001)
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_USED_MEM_SIZE, "ss_micro_cache micro_meta used memory size", ObStatClassIds::CACHE, 245001, false, true, true, "Total memory consumption (in bytes) of the local micro block cache in shared storage mode. This metric represents the total memory consumed internally by the local micro block cache, including micro block metadata and related structures.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_ALLOC_DISK_SIZE, "ss_micro_cache total alloc disk size", ObStatClassIds::CACHE, 245002, false, true, true, "Disk space (in bytes) allocated to the local micro block cache in shared storage mode. When the tenant's local micro block cache module is initialized, a disk space size is calculated and allocated to the local micro block cache.")
STAT_EVENT_SET_DEF(SS_LOCAL_CACHE_TMPFILE_ALLOC_SIZE, "ss_local_cache tmpfile alloc disk size", ObStatClassIds::CACHE, 245003, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(SS_LOCAL_CACHE_META_ALLOC_SIZE, "ss_local_cache meta file alloc disk size", ObStatClassIds::CACHE, 245004, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(SS_LOCAL_CACHE_INCREMENTAL_DATA_ALLOC_SIZE, "ss_local_cache incremental data alloc disk size", ObStatClassIds::CACHE, 245005, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(SS_LOCAL_CACHE_TMPFILE_USED_DISK_SIZE_W, "ss_local_cache tmpfile write cache used disk size", ObStatClassIds::CACHE, 245006, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(SS_LOCAL_CACHE_TMPFILE_USED_DISK_SIZE_R, "ss_local_cache tmpfile read cache used disk size", ObStatClassIds::CACHE, 245007, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(SS_LOCAL_CACHE_META_USED_DISK_SIZE, "ss_local_cache meta file used disk size", ObStatClassIds::CACHE, 245008, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(SS_LOCAL_CACHE_INCREMENTAL_DATA_USED_DISK_SIZE, "ss_local_cache incremental data used disk size", ObStatClassIds::CACHE, 245009, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(SS_LOCAL_CACHE_MAJOR_MACRO_USED_DISK_SIZE, "ss_local_cache major macro used disk size", ObStatClassIds::CACHE, 245010, false, true, false, "Deprecated since V4.4.1.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_HOT_MICRO_LACK_COUNT, "ss_micro_cache hot micro_block lack count", ObStatClassIds::CACHE, 245011, false, true, true, "Number of missing micro block data in the local micro block cache compared to the KVCache in shared storage mode. A periodic task scans all micro blocks in the KVCache and compares them with those in the local micro block cache. For each round of the task, this count starts at 0 and is incremented by 1 for each micro block found in the KVCache but not present in the local cache.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_COMMON_READ_IOPS, "ss_micro_cache read iops of common_io", ObStatClassIds::CACHE, 245012, false, true, true, "Number of local micro block cache reads per second based on user requests in shared storage mode. The system calculates this value by counting the total number of times users request to read micro block data from the local micro block cache within a two-second period, and then determining the IOPS.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_COMMON_READ_THROUGHPUT, "ss_micro_cache read throughput of common_io", ObStatClassIds::CACHE, 245013, false, true, true, "Amount of data read (in bytes) from the local micro block cache per second based on user requests in shared storage mode. The system calculates this value by counting the total size of micro block data users request to read from the local micro block cache within a two-second period, and then determining the throughput per second.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_COMMON_WRITE_IOPS, "ss_micro_cache write iops of common_io", ObStatClassIds::CACHE, 245014, false, true, true, "Number of times data is written to the local micro block cache per second based on user requests in shared storage mode. The system calculates this value by counting the total number of times users request to write micro block data to the local micro block cache within a two-second period, and then determining the IOPS.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_COMMON_WRITE_THROUGHPUT, "ss_micro_cache write throughput of common_io", ObStatClassIds::CACHE, 245015, false, true, true, "Amount of data written (in bytes) to the local micro block cache per second based on user requests in shared storage mode. The system calculates this value by counting the total size of micro block data users request to write to the local micro block cache within a two-second period, and then determining the throughput per second.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_PREWARM_READ_IOPS, "ss_micro_cache read iops of prewarm_io", ObStatClassIds::CACHE, 245016, false, true, true, "Number of reads per second from the local micro block cache based on preheating requests in shared storage mode. The system calculates the total number of attempts to read micro block data from the local cache based on preheating requests over a 2-second period, then calculates the IOPS per second.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_PREWARM_READ_THROUGHPUT, "ss_micro_cache read throughput of prewarm_io", ObStatClassIds::CACHE, 245017, false, true, true, "Data volume (in bytes) read per second from the local micro block cache based on preheating requests in shared storage mode. The system calculates the total size of micro block data read from the local cache based on preheating requests over a 2-second period, then calculates the throughput per second.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_PREWARM_WRITE_IOPS, "ss_micro_cache write iops of prewarm_io", ObStatClassIds::CACHE, 245018, false, true, true, "Number of writes per second to the local micro block cache based on preheating requests in shared storage mode. The system calculates the total number of attempts to write micro block data to the local cache based on preheating requests over a 2-second period, then calculates the IOPS.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_PREWARM_WRITE_THROUGHPUT, "ss_micro_cache write throughput of prewarm_io", ObStatClassIds::CACHE, 245019, false, true, true, "Data volume (in bytes) written per second to the local micro block cache based on preheating requests in shared storage mode. The system calculates the total size of micro block data written to the local cache based on preheating requests over a 2-second period, then calculates the throughput per second.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_VALID_CNT, "ss_micro_cache valid micro_block count", ObStatClassIds::CACHE, 245020, false, true, true, "Total number of valid micro blocks held in the local micro block cache in shared storage mode. Each time micro block data is added to or evicted from the local micro block cache, this metric is updated to reflect the current total number of valid micro blocks.")
STAT_EVENT_SET_DEF(SS_MICRO_CACHE_VALID_SIZE, "ss_micro_cache valid micro_block size", ObStatClassIds::CACHE, 245021, false, true, true, "Total size (in bytes) of valid micro block data held in the local micro block cache in shared storage mode. Each time micro block data is added to or evicted from the local micro block cache, this metric is updated to reflect the current total size of valid micro block data.")

STAT_EVENT_SET_DEF(SS_MACRO_CACHE_META_MAX_CAPACITY, "ss_macro_cache max capacity of the META_FILE type", ObStatClassIds::CACHE, 245022, false, true, true, "Maximum disk cache capacity (in bytes) for meta macro blocks in the macro block cache in shared storage mode. Note: In the macro block cache, macro blocks are categorized into these cache types: META, TMP_FILE, MACRO, and HOT_MACRO. META: All macro blocks of meta type. TMP_FILE: Macro blocks of temporary file type. HOT_MACRO: If a user specifies a tablet as a hotspot tablet, all macro blocks associated with it are classified as HOT_MACRO. MACRO: All other macro blocks not included in the above three types. Different cache types within the macro block cache can share and dynamically occupy space with each other. Therefore, this value equals the disk size allocated to the tenant's macro block cache minus a reserved portion.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_META_USED_SIZE, "ss_macro_cache META_FILE used disk size", ObStatClassIds::CACHE, 245023, false, true, true, "Disk space (in bytes) used by meta macro blocks in the macro block cache in shared storage mode. That is, the total size of meta macro blocks in the macro block cache.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_META_HIT_CNT, "ss_macro_cache META_FILE hit count", ObStatClassIds::CACHE, 245024, false, true, true, "Number of meta macro block hits in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_META_MISS_CNT, "ss_macro_cache META_FILE miss count", ObStatClassIds::CACHE, 245025, false, true, true, "Number of meta macro block misses in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_META_HIT_BYTES, "ss_macro_cache META_FILE hit bytes", ObStatClassIds::CACHE, 245026, false, true, true, "Total size (in bytes) of meta macro block hits in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache hit occurs and the block type is meta, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_META_MISS_BYTES, "ss_macro_cache META_FILE miss bytes", ObStatClassIds::CACHE, 245027, false, true, true, "Total size (in bytes) of meta macro block misses in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache miss occurs and the block type is meta, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_TMP_MAX_CAPACITY, "ss_macro_cache max capacity of the TMP_FILE type", ObStatClassIds::CACHE, 245028, false, true, true, "Maximum disk cache capacity (in bytes) for temporary file-type macro blocks in the macro block cache in shared storage mode. Different cache types in the macro block cache can share and dynamically occupy space with each other, so this value equals the disk size allocated to the tenant's macro block cache minus a reserved portion.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_TMP_USED_SIZE, "ss_macro_cache TMP_FILE used disk size", ObStatClassIds::CACHE, 245029, false, true, true, "Disk space (in bytes) used by temporary file-type macro blocks in the macro block cache in shared storage mode. That is, the total size of temporary file-type macro blocks in the macro block cache.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_TMP_HIT_CNT, "ss_macro_cache TMP_FILE hit count", ObStatClassIds::CACHE, 245030, false, true, true, "Number of temporary file-type macro block hits in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_TMP_MISS_CNT, "ss_macro_cache TMP_FILE miss count", ObStatClassIds::CACHE, 245031, false, true, true, "Number of temporary file-type macro block misses in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_TMP_HIT_BYTES, "ss_macro_cache TMP_FILE hit bytes", ObStatClassIds::CACHE, 245032, false, true, true, "Total size (in bytes) of temporary file-type macro block hits in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache hit occurs and the block type is temporary file-type, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_TMP_MISS_BYTES, "ss_macro_cache TMP_FILE miss bytes", ObStatClassIds::CACHE, 245033, false, true, true, "Total size (in bytes) of temporary file-type macro block misses in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache miss occurs and the block type is temporary file, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_MACRO_MAX_CAPACITY, "ss_macro_cache max capacity of the MACRO_BLOCK type", ObStatClassIds::CACHE, 245034, false, true, true, "Maximum disk cache capacity (in bytes) for regular macro blocks in the macro block cache in shared storage mode. Different cache types in the macro block cache can dynamically occupy space with each other, so this value equals the disk size allocated to the tenant's macro block cache minus a reserved portion.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_MACRO_USED_SIZE, "ss_macro_cache MACRO_BLOCK used disk size", ObStatClassIds::CACHE, 245035, false, true, true, "Disk space used (in bytes) by regular macro blocks in the macro block cache in shared storage mode. The total size of regular macro blocks in the macro block cache.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_MACRO_HIT_CNT, "ss_macro_cache MACRO_BLOCK hit count", ObStatClassIds::CACHE, 245036, false, true, true, "Number of regular macro block hits in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_MACRO_MISS_CNT, "ss_macro_cache MACRO_BLOCK miss count", ObStatClassIds::CACHE, 245037, false, true, true, "Number of regular macro block misses in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_MACRO_HIT_BYTES, "ss_macro_cache MACRO_BLOCK hit bytes", ObStatClassIds::CACHE, 245038, false, true, true, "Total size (in bytes) of regular macro block hits in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache hit occurs and the block type is regular, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_MACRO_MISS_BYTES, "ss_macro_cache MACRO_BLOCK miss bytes", ObStatClassIds::CACHE, 245039, false, true, true, "Total size (in bytes) of regular macro block misses in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache miss occurs and the block type is regular, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_HOT_MACRO_MAX_CAPACITY, "ss_macro_cache max capacity of the HOT_TABLET_MACRO_BLOCK type", ObStatClassIds::CACHE, 245040, false, true, true, "Maximum disk cache capacity (in bytes) for hotspot macro blocks in the macro block cache in shared storage mode. Different cache types in the macro block cache can dynamically occupy space with each other, so this value equals the disk size allocated to the tenant's macro block cache minus a reserved portion.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_HOT_MACRO_USED_SIZE, "ss_macro_cache HOT_TABLET_MACRO_BLOCK used disk size", ObStatClassIds::CACHE, 245041, false, true, true, "Disk space used (in bytes) by hotspot macro blocks in the macro block cache in shared storage mode. The total size of hotspot macro blocks in the macro block cache.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_HOT_MACRO_HIT_CNT, "ss_macro_cache HOT_TABLET_MACRO_BLOCK hit count", ObStatClassIds::CACHE, 245042, false, true, true, "Number of hotspot macro block hits in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_HOT_MACRO_MISS_CNT, "ss_macro_cache HOT_TABLET_MACRO_BLOCK miss count", ObStatClassIds::CACHE, 245043, false, true, true, "Number of hotspot macro block misses in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_HOT_MACRO_HIT_BYTES, "ss_macro_cache HOT_TABLET_MACRO_BLOCK hit bytes", ObStatClassIds::CACHE, 245044, false, true, true, "Total size (in bytes) of hotspot macro block hits in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache hit occurs and the block type is hotspot, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_HOT_MACRO_MISS_BYTES, "ss_macro_cache HOT_TABLET_MACRO_BLOCK miss bytes", ObStatClassIds::CACHE, 245045, false, true, true, "Total size (in bytes) of hotspot macro block misses in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache miss occurs and the block type is hotspot, this value is incremented by the size read.")

STAT_EVENT_SET_DEF(SS_MACRO_CACHE_PRIVATE_MACRO_HIT_CNT, "ss_macro_cache private macro hit count", ObStatClassIds::CACHE, 245046, false, true, true, "Number of private macro block hits in the macro block cache in shared storage mode. Note: Macro blocks are classified as PRIVATE or SHARED based on whether they are exclusive to a single node or shared by multiple nodes. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_PRIVATE_MACRO_MISS_CNT, "ss_macro_cache private macro miss count", ObStatClassIds::CACHE, 245047, false, true, true, "Number of private macro block misses in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_PRIVATE_MACRO_HIT_BYTES, "ss_macro_cache private macro hit bytes", ObStatClassIds::CACHE, 245048, false, true, true, "Total size (in bytes) of private macro block hits in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache hit occurs and the block type is private, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_PRIVATE_MACRO_MISS_BYTES, "ss_macro_cache private macro miss bytes", ObStatClassIds::CACHE, 245049, false, true, true, "Total size (in bytes) of private macro block misses in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache miss occurs and the block type is private, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_SHARED_MACRO_HIT_CNT, "ss_macro_cache shared macro hit count", ObStatClassIds::CACHE, 245050, false, true, true, "Number of shared macro block hits in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_SHARED_MACRO_MISS_CNT, "ss_macro_cache shared macro miss count", ObStatClassIds::CACHE, 245051, false, true, true, "Number of shared macro block misses in the macro block cache in shared storage mode. Each time a macro block is accessed from the macro block cache, the hit or miss count is incremented according to the block type.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_SHARED_MACRO_HIT_BYTES, "ss_macro_cache shared macro hit bytes", ObStatClassIds::CACHE, 245052, false, true, true, "Total size (in bytes) of shared macro block hits in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache hit occurs  and the macro block type is shared, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(SS_MACRO_CACHE_SHARED_MACRO_MISS_BYTES, "ss_macro_cache shared macro miss bytes", ObStatClassIds::CACHE, 245053, false, true, true, "Total size (in bytes) of shared macro block misses in the macro block cache in shared storage mode. Each time a macro block is read from the macro block cache, if a cache miss occurs and the macro block type is shared, this value is incremented by the size read.")
STAT_EVENT_SET_DEF(EXTERNAL_TABLE_DISK_CACHE_HIT_CNT, "external table disk cache hit count", ObStatClassIds::CACHE, 245054, false, true, true, "Number of external table data disk cache hits (supported in both SN and SS modes). Each time an external table is queried, if disk cache is enabled (enabled by default), this value is incremented by 1 for each macro block hit. Note: After enabling the external table disk cache, external table data will be split into macro blocks and stored on disk.")
STAT_EVENT_SET_DEF(EXTERNAL_TABLE_DISK_CACHE_MISS_CNT, "external table disk cache miss count", ObStatClassIds::CACHE, 245055, false, true, true, "Number of external table data disk cache misses (supported in both SN and SS modes). Each time an external table is queried, if disk cache is enabled (enabled by default), this value is incremented by 1 for each macro block miss.")
STAT_EVENT_SET_DEF(EXTERNAL_TABLE_DISK_CACHE_HIT_BYTES, "external table disk cache hit bytes", ObStatClassIds::CACHE, 245056, false, true, true, "Total size (in bytes) of external table data disk cache hits (supported in both SN and SS modes). Each time an external table is queried, if disk cache is enabled (enabled by default), this value is incremented by the size read for each macro block hit.")
STAT_EVENT_SET_DEF(EXTERNAL_TABLE_DISK_CACHE_MISS_BYTES, "external table disk cache miss bytes", ObStatClassIds::CACHE, 245057, false, true, true, "Total size (in bytes) of external table data disk cache misses (supported in both SN and SS modes). Each time an external table is queried, if disk cache is enabled (enabled by default), this value is incremented by the size read for each macro block miss.")

STAT_EVENT_SET_DEF(SS_MACRO_CACHE_ALLOC_DISK_SIZE, "ss_macro_cache total alloc disk size", ObStatClassIds::CACHE, 245058, false, true, true, "Disk space (in bytes) allocated to the local macro block cache in shared storage mode. When the tenant's local macro block cache module is initialized, a disk space size is calculated and allocated to the local macro block cache.")
// END
STAT_EVENT_SET_DEF(STAT_EVENT_SET_END, "event set end", ObStatClassIds::DEBUG, 300000, false, false, true, "")

#endif

#ifndef OB_STAT_EVENT_DEFINE_H_
#define OB_STAT_EVENT_DEFINE_H_

#include "lib/time/ob_time_utility.h"
#include "lib/statistic_event/ob_stat_class.h"


namespace oceanbase
{
namespace common
{
static const int64_t MAX_STAT_EVENT_NAME_LENGTH = 64;
static const int64_t MAX_STAT_EVENT_PARAM_LENGTH = 64;

struct ObStatEventIds
{
  enum ObStatEventIdEnum
  {
#define STAT_DEF_true(def, name, stat_class, stat_id, summary_in_session, can_visible) def,
#define STAT_DEF_false(def, name, stat_class, stat_id, summary_in_session, can_visible)

#define STAT_EVENT_ADD_DEF(def, name, stat_class, stat_id, summary_in_session, can_visible, enable, ...)\
STAT_DEF_##enable(def, name, stat_class, stat_id, summary_in_session, can_visible)
#include "lib/statistic_event/ob_stat_event.h"
#undef STAT_EVENT_ADD_DEF
#define STAT_EVENT_SET_DEF(def, name, stat_class, stat_id, summary_in_session, can_visible, enable, ...)\
STAT_DEF_##enable(def, name, stat_class, stat_id, summary_in_session, can_visible)
#include "lib/statistic_event/ob_stat_event.h"
#undef STAT_EVENT_SET_DEF
#undef STAT_DEF_true
#undef STAT_DEF_false
  };
};

struct ObStatEventAddStat
{
  //value for a stat
  int64_t stat_value_;
  ObStatEventAddStat();
  int add(const ObStatEventAddStat &other);
  int add(int64_t value);
  int atomic_add(int64_t value);
  int64_t get_stat_value();
  void reset();
  inline bool is_valid() const { return true; }
};

inline int64_t ObStatEventAddStat::get_stat_value()
{
  return stat_value_;
}

struct ObStatEventSetStat
{
  //value for a stat
  int64_t stat_value_;
  ObStatEventSetStat();
  int add(const ObStatEventSetStat &other);
  void set(int64_t value);
  int64_t get_stat_value();
  void reset();
  inline bool is_valid() const { return stat_value_ > 0; }
};

inline int64_t ObStatEventSetStat::get_stat_value()
{
  return stat_value_;
}

inline void ObStatEventSetStat::set(int64_t value)
{
  stat_value_ = value;
}

struct ObStatEvent
{
  char name_[MAX_STAT_EVENT_NAME_LENGTH];
  int64_t stat_class_;
  int64_t stat_id_;
  bool summary_in_session_;
  bool can_visible_;
};


extern const ObStatEvent OB_STAT_EVENTS[];

}
}

#endif /* OB_WAIT_EVENT_DEFINE_H_ */
