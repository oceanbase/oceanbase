drop database if exists hualong;
create database hualong;
use hualong;
CREATE TABLE `cb_dep_acct_54` ( `acctnbr` bigint(20) NOT NULL, `curracctstatcd` varchar(4) NOT NULL, PRIMARY KEY (`acctnbr`)) partition by hash(acctnbr) partitions 5;
CREATE TABLE `cb_dep_acctbal_54` ( `acctnbr` bigint(20) NOT NULL, `balcatcd` varchar(4) NOT NULL, `baltypcd` varchar(4) NOT NULL, PRIMARY KEY (`acctnbr`, `balcatcd`, `baltypcd`));
CREATE TABLE `cb_dep_rxtnbal_54` ( `acctnbr` varchar(34) NOT NULL, `rtxnnbr` bigint(20) NOT NULL, `balcatcd` varchar(4) NOT NULL, `baltypcd` varchar(4) NOT NULL);
insert into cb_dep_acct_54 values (1, 'CLS');
insert into cb_dep_acct_54 values (2, 'CLS');
insert into cb_dep_acct_54 values (3, 'CCC');
insert into cb_dep_acctbal_54 values (1, 3, 4);
insert into cb_dep_acctbal_54 values (3, 7, 9);
insert into cb_dep_acctbal_54 values (5, 6, 2333);
insert into cb_dep_rxtnbal_54 values (1, 4, 3, 2);
explain select * from cb_dep_acctbal_54 s,  cb_dep_acct_54 a where s.acctnbr = a.acctnbr and (a.curracctstatcd != 'CLS' or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr)));
Query Plan
=======================================================================
|ID|OPERATOR                           |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------
|0 |MERGE JOIN                         |        |3       |31          |
|1 |├─TABLE FULL SCAN                  |s       |3       |3           |
|2 |└─SORT                             |        |3       |28          |
|3 |  └─SUBPLAN SCAN                   |VIEW1   |3       |28          |
|4 |    └─UNION ALL                    |        |3       |28          |
|5 |      ├─PX COORDINATOR             |        |2       |13          |
|6 |      │ └─EXCHANGE OUT DISTR       |:EX10000|2       |12          |
|7 |      │   └─PX PARTITION ITERATOR  |        |2       |11          |
|8 |      │     └─TABLE FULL SCAN      |a       |2       |11          |
|9 |      └─HASH RIGHT SEMI JOIN       |        |1       |16          |
|10|        ├─TABLE FULL SCAN          |r       |1       |3           |
|11|        └─PX COORDINATOR           |        |2       |13          |
|12|          └─EXCHANGE OUT DISTR     |:EX20000|2       |12          |
|13|            └─PX PARTITION ITERATOR|        |2       |11          |
|14|              └─TABLE FULL SCAN    |a       |2       |11          |
=======================================================================
Outputs & filters:
-------------------------------------
  0 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [VIEW1.a.acctnbr], [VIEW1.a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([s.acctnbr = VIEW1.a.acctnbr]), other_conds(nil)
      merge_directions([ASC])
  1 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), rowset=16
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([s.acctnbr], [s.balcatcd], [s.baltypcd]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([VIEW1.a.acctnbr], [VIEW1.a.curracctstatcd]), filter(nil), rowset=16
      sort_keys([VIEW1.a.acctnbr, ASC])
  3 - output([VIEW1.a.acctnbr], [VIEW1.a.curracctstatcd]), filter(nil), rowset=16
      access([VIEW1.a.acctnbr], [VIEW1.a.curracctstatcd])
  4 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
  5 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
  6 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      dop=1
  7 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      force partition granule
  8 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
  9 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([cast(r.acctnbr, DECIMAL(-1, -1)) = cast(a.acctnbr, DECIMAL(20, 0))]), other_conds(nil)
 10 - output([r.acctnbr]), filter(nil), rowset=16
      access([r.acctnbr]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([r.__pk_increment]), range(MIN ; MAX)always true
 11 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
 12 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      dop=1
 13 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      force partition granule
 14 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd = 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
explain select * from cb_dep_acctbal_54 s,  cb_dep_acct_54 a where s.acctnbr = a.acctnbr and (a.curracctstatcd != 'CLS' or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr) and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr != a.acctnbr)));
Query Plan
===========================================================================
|ID|OPERATOR                               |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE JOIN                             |        |3       |31          |
|1 |├─TABLE FULL SCAN                      |s       |3       |3           |
|2 |└─SORT                                 |        |3       |28          |
|3 |  └─SUBPLAN SCAN                       |VIEW1   |3       |28          |
|4 |    └─UNION ALL                        |        |3       |28          |
|5 |      ├─PX COORDINATOR                 |        |2       |13          |
|6 |      │ └─EXCHANGE OUT DISTR           |:EX10000|2       |12          |
|7 |      │   └─PX PARTITION ITERATOR      |        |2       |11          |
|8 |      │     └─TABLE FULL SCAN          |a       |2       |11          |
|9 |      └─MERGE SEMI JOIN                |        |1       |15          |
|10|        ├─SORT                         |        |1       |13          |
|11|        │ └─NESTED-LOOP SEMI JOIN      |        |1       |13          |
|12|        │   ├─PX COORDINATOR           |        |2       |13          |
|13|        │   │ └─EXCHANGE OUT DISTR     |:EX20000|2       |12          |
|14|        │   │   └─PX PARTITION ITERATOR|        |2       |11          |
|15|        │   │     └─TABLE FULL SCAN    |a       |2       |11          |
|16|        │   └─MATERIAL                 |        |1       |3           |
|17|        │     └─TABLE FULL SCAN        |r       |1       |3           |
|18|        └─SORT                         |        |1       |3           |
|19|          └─TABLE FULL SCAN            |r       |1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [VIEW1.a.acctnbr], [VIEW1.a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([s.acctnbr = VIEW1.a.acctnbr]), other_conds(nil)
      merge_directions([ASC])
  1 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), rowset=16
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([s.acctnbr], [s.balcatcd], [s.baltypcd]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([VIEW1.a.acctnbr], [VIEW1.a.curracctstatcd]), filter(nil), rowset=16
      sort_keys([VIEW1.a.acctnbr, ASC])
  3 - output([VIEW1.a.acctnbr], [VIEW1.a.curracctstatcd]), filter(nil), rowset=16
      access([VIEW1.a.acctnbr], [VIEW1.a.curracctstatcd])
  4 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
  5 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
  6 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      dop=1
  7 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      force partition granule
  8 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
  9 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([cast(r.acctnbr, DECIMAL(-1, -1)) = cast(a.acctnbr, DECIMAL(20, 0))]), other_conds(nil)
      merge_directions([ASC])
 10 - output([a.acctnbr], [a.curracctstatcd], [cast(a.acctnbr, DECIMAL(20, 0))]), filter(nil), rowset=16
      sort_keys([cast(a.acctnbr, DECIMAL(20, 0)), ASC]), local merge sort
 11 - output([a.acctnbr], [a.curracctstatcd], [cast(a.acctnbr, DECIMAL(20, 0))]), filter(nil), rowset=16
      conds([cast(r.acctnbr, DECIMAL(-1, -1)) != cast(a.acctnbr, DECIMAL(20, 0))]), nl_params_(nil), use_batch=false
 12 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
 13 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      dop=1
 14 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      force partition granule
 15 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd = 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
 16 - output([r.acctnbr]), filter(nil), rowset=16
 17 - output([r.acctnbr]), filter(nil), rowset=16
      access([r.acctnbr]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([r.__pk_increment]), range(MIN ; MAX)always true
 18 - output([cast(r.acctnbr, DECIMAL(-1, -1))]), filter(nil), rowset=16
      sort_keys([cast(r.acctnbr, DECIMAL(-1, -1)), ASC])
 19 - output([cast(r.acctnbr, DECIMAL(-1, -1))]), filter(nil), rowset=16
      access([r.acctnbr]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([r.__pk_increment]), range(MIN ; MAX)always true
explain select * from cb_dep_acctbal_54 s, cb_dep_acct_54 a where s.acctnbr = a.acctnbr and ((a.curracctstatcd != 'CLS' and exists(select 1 from cb_dep_acctbal_54 r where r.acctnbr = s.acctnbr)) or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr)));
Query Plan
===============================================================================
|ID|OPERATOR                                   |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------------
|0 |PX COORDINATOR                             |        |2       |43          |
|1 |└─EXCHANGE OUT DISTR                       |:EX10003|2       |42          |
|2 |  └─HASH UNION DISTINCT                    |        |2       |39          |
|3 |    ├─HASH JOIN                            |        |1       |18          |
|4 |    │ ├─PX PARTITION ITERATOR              |        |1       |11          |
|5 |    │ │ └─TABLE FULL SCAN                  |a       |1       |11          |
|6 |    │ └─EXCHANGE IN DISTR                  |        |3       |7           |
|7 |    │   └─EXCHANGE OUT DISTR (PKEY)        |:EX10000|3       |6           |
|8 |    │     └─TABLE FULL SCAN                |s       |3       |3           |
|9 |    └─EXCHANGE IN DISTR                    |        |1       |21          |
|10|      └─EXCHANGE OUT DISTR (PKEY)          |:EX10002|1       |20          |
|11|        └─HASH DISTINCT                    |        |1       |18          |
|12|          └─MERGE JOIN                     |        |1       |18          |
|13|            ├─SORT                         |        |1       |16          |
|14|            │ └─HASH JOIN                  |        |1       |16          |
|15|            │   ├─TABLE FULL SCAN          |r       |1       |3           |
|16|            │   └─EXCHANGE IN DISTR        |        |2       |13          |
|17|            │     └─EXCHANGE OUT DISTR     |:EX10001|2       |12          |
|18|            │       └─PX PARTITION ITERATOR|        |2       |11          |
|19|            │         └─TABLE FULL SCAN    |a       |2       |11          |
|20|            └─TABLE FULL SCAN              |s       |3       |3           |
===============================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(UNION([1]), UNION([2]), UNION([3]), UNION([4]), UNION([5]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(UNION([1]), UNION([2]), UNION([3]), UNION([4]), UNION([5]))]), filter(nil), rowset=16
      dop=1
  2 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])], [UNION([5])]), filter(nil), rowset=16
  3 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([s.acctnbr = a.acctnbr]), other_conds(nil)
  4 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      affinitize, force partition granule
  5 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
  6 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), rowset=16
  7 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), rowset=16
      (#keys=1, [s.acctnbr]), is_single, dop=1
  8 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), rowset=16
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([s.acctnbr], [s.balcatcd], [s.baltypcd]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  9 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
 10 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      (#keys=1, [s.acctnbr]), is_single, dop=1
 11 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      distinct([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd])
 12 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([s.acctnbr = a.acctnbr]), other_conds(nil)
      merge_directions([ASC])
 13 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      sort_keys([a.acctnbr, ASC])
 14 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([cast(r.acctnbr, DECIMAL(-1, -1)) = cast(a.acctnbr, DECIMAL(20, 0))]), other_conds(nil)
 15 - output([r.acctnbr]), filter(nil), rowset=16
      access([r.acctnbr]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([r.__pk_increment]), range(MIN ; MAX)always true
 16 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
 17 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      dop=1
 18 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      force partition granule
 19 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd = 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
 20 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), rowset=16
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([s.acctnbr], [s.balcatcd], [s.baltypcd]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select * from cb_dep_acctbal_54 s,  cb_dep_acct_54 a where s.acctnbr = a.acctnbr and (a.curracctstatcd != 'CLS' or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr))) group by s.acctnbr;
Query Plan
=========================================================================
|ID|OPERATOR                             |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY                       |        |3       |31          |
|1 |└─MERGE JOIN                         |        |3       |31          |
|2 |  ├─SORT                             |        |3       |28          |
|3 |  │ └─SUBPLAN SCAN                   |VIEW2   |3       |28          |
|4 |  │   └─UNION ALL                    |        |3       |28          |
|5 |  │     ├─PX COORDINATOR             |        |2       |13          |
|6 |  │     │ └─EXCHANGE OUT DISTR       |:EX10000|2       |12          |
|7 |  │     │   └─PX PARTITION ITERATOR  |        |2       |11          |
|8 |  │     │     └─TABLE FULL SCAN      |a       |2       |11          |
|9 |  │     └─HASH JOIN                  |        |1       |16          |
|10|  │       ├─TABLE FULL SCAN          |r       |1       |3           |
|11|  │       └─PX COORDINATOR           |        |2       |13          |
|12|  │         └─EXCHANGE OUT DISTR     |:EX20000|2       |12          |
|13|  │           └─PX PARTITION ITERATOR|        |2       |11          |
|14|  │             └─TABLE FULL SCAN    |a       |2       |11          |
|15|  └─TABLE FULL SCAN                  |s       |3       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [VIEW2.a.acctnbr], [VIEW2.a.curracctstatcd]), filter(nil), rowset=16
      group([s.acctnbr]), agg_func(nil)
  1 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [VIEW2.a.acctnbr], [VIEW2.a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([s.acctnbr = VIEW2.a.acctnbr]), other_conds(nil)
      merge_directions([ASC])
  2 - output([VIEW2.a.acctnbr], [VIEW2.a.curracctstatcd]), filter(nil), rowset=16
      sort_keys([VIEW2.a.acctnbr, ASC])
  3 - output([VIEW2.a.acctnbr], [VIEW2.a.curracctstatcd]), filter(nil), rowset=16
      access([VIEW2.a.acctnbr], [VIEW2.a.curracctstatcd])
  4 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
  5 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
  6 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      dop=1
  7 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      force partition granule
  8 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
  9 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([cast(r.acctnbr, DECIMAL(-1, -1)) = cast(a.acctnbr, DECIMAL(20, 0))]), other_conds(nil)
 10 - output([r.acctnbr]), filter(nil), rowset=16
      access([r.acctnbr]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([r.__pk_increment]), range(MIN ; MAX)always true
 11 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
 12 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      dop=1
 13 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      force partition granule
 14 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd = 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
 15 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), rowset=16
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([s.acctnbr], [s.balcatcd], [s.baltypcd]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select /*+ no_use_hash_aggregation */ * from cb_dep_acctbal_54 s,  cb_dep_acct_54 a where s.acctnbr = a.acctnbr and (a.curracctstatcd != 'CLS' or (a.curracctstatcd = 'CLS' and exists(select 1 from cb_dep_rxtnbal_54 r where r.acctnbr = a.acctnbr))) group by a.acctnbr;
Query Plan
=========================================================================
|ID|OPERATOR                             |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY                       |        |3       |31          |
|1 |└─MERGE JOIN                         |        |3       |31          |
|2 |  ├─SORT                             |        |3       |28          |
|3 |  │ └─SUBPLAN SCAN                   |VIEW2   |3       |28          |
|4 |  │   └─UNION ALL                    |        |3       |28          |
|5 |  │     ├─PX COORDINATOR             |        |2       |13          |
|6 |  │     │ └─EXCHANGE OUT DISTR       |:EX10000|2       |12          |
|7 |  │     │   └─PX PARTITION ITERATOR  |        |2       |11          |
|8 |  │     │     └─TABLE FULL SCAN      |a       |2       |11          |
|9 |  │     └─HASH JOIN                  |        |1       |16          |
|10|  │       ├─TABLE FULL SCAN          |r       |1       |3           |
|11|  │       └─PX COORDINATOR           |        |2       |13          |
|12|  │         └─EXCHANGE OUT DISTR     |:EX20000|2       |12          |
|13|  │           └─PX PARTITION ITERATOR|        |2       |11          |
|14|  │             └─TABLE FULL SCAN    |a       |2       |11          |
|15|  └─TABLE FULL SCAN                  |s       |3       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([s.acctnbr], [s.balcatcd], [s.baltypcd], [VIEW2.a.acctnbr], [VIEW2.a.curracctstatcd]), filter(nil), rowset=16
      group([VIEW2.a.acctnbr]), agg_func(nil)
  1 - output([VIEW2.a.acctnbr], [s.acctnbr], [s.balcatcd], [s.baltypcd], [VIEW2.a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([s.acctnbr = VIEW2.a.acctnbr]), other_conds(nil)
      merge_directions([ASC])
  2 - output([VIEW2.a.acctnbr], [VIEW2.a.curracctstatcd]), filter(nil), rowset=16
      sort_keys([VIEW2.a.acctnbr, ASC])
  3 - output([VIEW2.a.acctnbr], [VIEW2.a.curracctstatcd]), filter(nil), rowset=16
      access([VIEW2.a.acctnbr], [VIEW2.a.curracctstatcd])
  4 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
  5 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
  6 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      dop=1
  7 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      force partition granule
  8 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd != 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
  9 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      equal_conds([cast(r.acctnbr, DECIMAL(-1, -1)) = cast(a.acctnbr, DECIMAL(20, 0))]), other_conds(nil)
 10 - output([r.acctnbr]), filter(nil), rowset=16
      access([r.acctnbr]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([r.__pk_increment]), range(MIN ; MAX)always true
 11 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
 12 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      dop=1
 13 - output([a.acctnbr], [a.curracctstatcd]), filter(nil), rowset=16
      force partition granule
 14 - output([a.acctnbr], [a.curracctstatcd]), filter([a.curracctstatcd = 'CLS']), rowset=16
      access([a.acctnbr], [a.curracctstatcd]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.acctnbr]), range(MIN ; MAX)always true
 15 - output([s.acctnbr], [s.balcatcd], [s.baltypcd]), filter(nil), rowset=16
      access([s.acctnbr], [s.balcatcd], [s.baltypcd]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([s.acctnbr], [s.balcatcd], [s.baltypcd]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
drop database hualong;
