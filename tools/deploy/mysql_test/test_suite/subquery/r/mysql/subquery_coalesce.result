drop table if exists t1;
create table t1(c1 int, c2 int);
drop table if exists t2;
create table t2(c1 int, c2 int);
explain select /*+no_expand*/ * from t1 where c1 in (select distinct c1 from t2) or c1 in (select c2 from t2);
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |HASH SEMI JOIN         |     |1       |8           |
|1 |├─TABLE FULL SCAN      |t1   |1       |3           |
|2 |└─SUBPLAN SCAN         |VIEW1|2       |5           |
|3 |  └─UNION ALL          |     |2       |5           |
|4 |    ├─HASH DISTINCT    |     |1       |3           |
|5 |    │ └─TABLE FULL SCAN|t2   |1       |3           |
|6 |    └─TABLE FULL SCAN  |t2   |1       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW1.c1]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([VIEW1.c1]), filter(nil), rowset=16
      access([VIEW1.c1])
  3 - output([UNION([1])]), filter(nil), rowset=16
  4 - output([t2.c1]), filter(nil), rowset=16
      distinct([t2.c1])
  5 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.c2]), filter(nil), rowset=16
      access([t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select /*+no_expand*/ * from t1 where c1 in (select distinct c1 from t2 where c1 > 10) or c1 in (select distinct c2 from t2 where c2 < 20);
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN   |     |1       |7           |
|1 |├─SUBPLAN SCAN         |VIEW1|1       |5           |
|2 |│ └─UNION ALL          |     |1       |5           |
|3 |│   ├─HASH DISTINCT    |     |1       |3           |
|4 |│   │ └─TABLE FULL SCAN|t2   |1       |3           |
|5 |│   └─HASH DISTINCT    |     |1       |3           |
|6 |│     └─TABLE FULL SCAN|t2   |1       |3           |
|7 |└─TABLE FULL SCAN      |t1   |1       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW1.c1]), other_conds(nil)
  1 - output([VIEW1.c1]), filter(nil), rowset=16
      access([VIEW1.c1])
  2 - output([UNION([1])]), filter(nil), rowset=16
  3 - output([t2.c1]), filter(nil), rowset=16
      distinct([t2.c1])
  4 - output([t2.c1]), filter([t2.c1 > 10]), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.c2]), filter(nil), rowset=16
      distinct([t2.c2])
  6 - output([t2.c2]), filter([t2.c2 < 20]), rowset=16
      access([t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
drop table if exists t3;
create table t3(c1 int, c2 int, c3 int);
explain select /*+no_expand*/ * from t1 
where (c1 in (select distinct c1 from t2) or c1 in (select c2 from t2))
and exists (select 1 from t3 where t1.c1 = t3.c3)
and c2 > 100;
Query Plan
==========================================================
|ID|OPERATOR                 |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN     |     |1       |10          |
|1 |├─TABLE FULL SCAN        |t3   |1       |3           |
|2 |└─HASH SEMI JOIN         |     |1       |8           |
|3 |  ├─TABLE FULL SCAN      |t1   |1       |3           |
|4 |  └─SUBPLAN SCAN         |VIEW1|2       |5           |
|5 |    └─UNION ALL          |     |2       |5           |
|6 |      ├─HASH DISTINCT    |     |1       |3           |
|7 |      │ └─TABLE FULL SCAN|t2   |1       |3           |
|8 |      └─TABLE FULL SCAN  |t2   |1       |3           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t3.c3]), other_conds(nil)
  1 - output([t3.c3]), filter(nil), rowset=16
      access([t3.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = VIEW1.c1]), other_conds(nil)
  3 - output([t1.c1], [t1.c2]), filter([t1.c2 > 100]), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  4 - output([VIEW1.c1]), filter(nil), rowset=16
      access([VIEW1.c1])
  5 - output([UNION([1])]), filter(nil), rowset=16
  6 - output([t2.c1]), filter(nil), rowset=16
      distinct([t2.c1])
  7 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t2.c2]), filter(nil), rowset=16
      access([t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
