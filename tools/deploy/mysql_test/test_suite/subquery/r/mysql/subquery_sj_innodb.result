drop table if exists t0, t1, t2, t3;
drop view if exists v1, v2, v3, v_t2, view_b, view_c;
create table t0 (a int);
insert into t0 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t1 (
a int, 
b int
) ;
insert into t1 values (1,1),(1,1),(2,2);
create table t2 (
a int,
b int,
key(b)
) ;
insert into t2 select a, a/2 from t0;
select * from t1;
a	b
1	1
1	1
2	2
select * from t2;
a	b
0	0
1	1
2	1
3	2
4	2
5	3
6	3
7	4
8	4
9	5
explain  select * from t2 where b in (select a from t1);
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |    |4       |7           |
|1 |├─TABLE FULL SCAN    |t1  |3       |3           |
|2 |└─TABLE FULL SCAN    |t2  |10      |3           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t2.b = t1.a]), other_conds(nil)
  1 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.b], [t2.a]), filter(nil), rowset=16
      access([t2.b], [t2.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select * from t2 where b in (select a from t1);
a	b
1	1
2	1
3	2
4	2
create table t3 (
a int, 
b int,
key(b),
pk1 char(50), pk2 char(50), pk3 char(50),
primary key(pk1, pk2, pk3)
) ;
insert into t3 select a,a, a,a,a from t0;
explain  select * from t3 where b in (select a from t1);
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |    |2       |7           |
|1 |├─TABLE FULL SCAN    |t1  |3       |3           |
|2 |└─TABLE FULL SCAN    |t3  |10      |4           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t3.a], [t3.b], [t3.pk1], [t3.pk2], [t3.pk3]), filter(nil), rowset=16
      equal_conds([t3.b = t1.a]), other_conds(nil)
  1 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t3.pk1], [t3.pk2], [t3.pk3], [t3.b], [t3.a]), filter(nil), rowset=16
      access([t3.pk1], [t3.pk2], [t3.pk3], [t3.b], [t3.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.pk1], [t3.pk2], [t3.pk3]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select * from t3 where b in (select a from t1);
a	b	pk1	pk2	pk3
1	1	1	1	1
2	2	2	2	2
drop table t3;
create table t3 (
a int, 
b int,
key(b),
pk1 char(100), pk2 char(100),
primary key(pk1, pk2)
) ;
insert into t3 select 
A.a + 10*B.a, A.a + 10*B.a, A.a + 10*B.a, A.a + 10*B.a 
from t0 A, t0 B where B.a <5;
explain  select * from t3 where b in (select a from t0);
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |    |10      |15          |
|1 |├─TABLE FULL SCAN    |t0  |10      |3           |
|2 |└─TABLE FULL SCAN    |t3  |50      |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t3.a], [t3.b], [t3.pk1], [t3.pk2]), filter(nil), rowset=256
      equal_conds([t3.b = t0.a]), other_conds(nil)
  1 - output([t0.a]), filter(nil), rowset=256
      access([t0.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t0.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t3.pk1], [t3.pk2], [t3.b], [t3.a]), filter(nil), rowset=256
      access([t3.pk1], [t3.pk2], [t3.b], [t3.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.pk1], [t3.pk2]), range(MIN,MIN ; MAX,MAX)always true
select * from t3 where b in (select A.a+B.a from t0 A, t0 B where B.a<5);
a	b	pk1	pk2
0	0	0	0
1	1	1	1
10	10	10	10
11	11	11	11
12	12	12	12
13	13	13	13
2	2	2	2
3	3	3	3
4	4	4	4
5	5	5	5
6	6	6	6
7	7	7	7
8	8	8	8
9	9	9	9
explain  select * from t1 where a in (select b from t2);
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |HASH SEMI JOIN   |     |3       |7           |
|1 |├─TABLE FULL SCAN|t1   |3       |3           |
|2 |└─TABLE FULL SCAN|t2(b)|10      |3           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.b]), other_conds(nil)
  1 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.b]), filter(nil), rowset=16
      access([t2.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.b], [t2.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
select * from t1;
a	b
1	1
1	1
2	2
select * from t1 where a in (select b from t2);
a	b
1	1
2	2
1	1
drop table t0, t1, t2, t3;
create table t1 (a int);
insert into t1 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t2 (a char(50), b char(50), c char(50), primary key (a,b,c)) ;
insert into t2 select concat(a, repeat('X',48)),repeat('B',50),repeat('B',50) from t1;
insert into t2 select concat(a, repeat('Y',48)),repeat('B',50),repeat('B',50) from t1;
alter table t2 add filler1 int;
insert into t1 select A.a + 10*(B.a + 10*C.a) from t1 A, t1 B, t1 C;
select * from t2 where filler1 in ( select a from t1);
a	b	c	filler1
drop table t1, t2;

BUG#42740: crash in optimize_semijoin_nests

create table t1 (c6 timestamp,key (c6)) ;
create table t2 (c2 double) ;
drop table t1, t2;
# 
# BUG#42742: crash in setup_sj_materialization, Copy_field::set
# 
create table t3 ( c1 year) ;
insert into t3 values (2135),(2142);
create table t2 (c1 binary,c2 binary,c6 timestamp) ;
# The following must not crash, EXPLAIN  should show one SJ strategy, not a mix:
explain  select 1 from t2 where 
c2 in (select 1 from t3, t2) and
c1 in (select convert(c6,char(1)) from t2);
Query Plan
================================================================
|ID|OPERATOR                       |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |HASH SEMI JOIN                 |     |1       |5           |
|1 |├─NESTED-LOOP JOIN CARTESIAN   |     |1       |3           |
|2 |│ ├─NESTED-LOOP JOIN CARTESIAN |     |1       |3           |
|3 |│ │ ├─TABLE FULL SCAN          |t2   |1       |3           |
|4 |│ │ └─MATERIAL                 |     |1       |3           |
|5 |│ │   └─SUBPLAN SCAN           |VIEW1|1       |3           |
|6 |│ │     └─TABLE FULL SCAN      |t3   |1       |3           |
|7 |│ └─MATERIAL                   |     |1       |3           |
|8 |│   └─SUBPLAN SCAN             |VIEW2|1       |3           |
|9 |│     └─TABLE FULL SCAN        |t2   |1       |3           |
|10|└─TABLE FULL SCAN              |t2   |1       |3           |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), rowset=16
      equal_conds([cast(t2.c1, VARCHAR(1048576)) = cast(cast(t2.c6, CHAR(1)), VARCHAR(1048576))]), other_conds(nil)
  1 - output([t2.c1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  2 - output([t2.c1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  3 - output([t2.c1]), filter([cast(t2.c2, DECIMAL(-1, -1)) = cast(1, DECIMAL(20, 0))]), rowset=16
      access([t2.c2], [t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output(nil), filter(nil), rowset=16
  5 - output(nil), filter(nil), rowset=16
      access(nil)
  6 - output([1]), filter(nil), rowset=16
      access(nil), partitions(p0)
      limit(1), offset(nil), is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  7 - output(nil), filter(nil), rowset=16
  8 - output(nil), filter(nil), rowset=16
      access(nil)
  9 - output([1]), filter(nil), rowset=16
      access(nil), partitions(p0)
      limit(1), offset(nil), is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t2.c6]), filter(nil), rowset=16
      access([t2.c6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
drop table t2, t3;
# 
# BUG#57431: subquery returns wrong result (semijoin=on) with pred AND
# 
CREATE TABLE t1 (
i INT
) ;
INSERT INTO t1 VALUES (2),(4);
CREATE TABLE t2 (
i INT,
vc VARCHAR(1)
) ;
INSERT INTO t2 VALUES (8,NULL);
SELECT i
FROM t1
WHERE i IN (SELECT innr.i
FROM t2 LEFT JOIN t2 innr ON innr.vc)
AND i = 2;
i
DROP TABLE t1, t2;
