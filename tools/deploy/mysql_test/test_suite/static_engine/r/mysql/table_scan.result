result_format: 4
explain_protocol: 0

drop table if exists t1;
drop table if exists t2;
create table t1 (c1 number, c2 number, c3 char(20), c4 varchar(20), primary key(c1, c2), index i1 (c2));

insert into t1 (c1, c2, c3, c4) values (1, 2, 'a', 'b');
insert into t1 (c1, c2, c3, c4) values (3, 4, 'c', 'd');
insert into t1 (c1, c2, c3, c4) values (5, 1, 'xx', 'yy');
insert into t1 (c1, c2, c3, c4) values (5, 2, 'xx', 'yy');
insert into t1 (c1, c2, c3, c4) values (7, 5, 'xx1', 'yy2');
insert into t1 (c1, c2, c3, c4) values (7, 6, 'xx1', 'yy2');
insert into t1 (c1, c2, c3, c4) values (8, 7, 'xx1', 'yy2');

alter table t1 add column c5 varchar(20) default 'c5_default';



set @@ob_enable_plan_cache = 0;
explain_protocol: 2
EXPLAIN select * from t1;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |7       |3           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), rowset=16
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.c1], [t1.c2]), range(MIN,MIN ; MAX,MAX)always true
select * from t1;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  1 |  2 | a    | b    | c5_default |
|  3 |  4 | c    | d    | c5_default |
|  5 |  1 | xx   | yy   | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
|  7 |  5 | xx1  | yy2  | c5_default |
|  7 |  6 | xx1  | yy2  | c5_default |
|  8 |  7 | xx1  | yy2  | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 order by c1 desc, c2 desc;
Query Plan
======================================================
|ID|OPERATOR       |NAME       |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |TABLE FULL SCAN|t1(Reverse)|7       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), rowset=16
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.c1], [t1.c2]), range(MIN,MIN ; MAX,MAX)always true
select * from t1 order by c1 desc, c2 desc;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  8 |  7 | xx1  | yy2  | c5_default |
|  7 |  6 | xx1  | yy2  | c5_default |
|  7 |  5 | xx1  | yy2  | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
|  5 |  1 | xx   | yy   | c5_default |
|  3 |  4 | c    | d    | c5_default |
|  1 |  2 | a    | b    | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 where c1 + c2 < 10;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |1       |3           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter([t1.c1 + t1.c2 < cast(10, DECIMAL_INT(11, 0))]), rowset=16
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.c1], [t1.c2]), range(MIN,MIN ; MAX,MAX)always true
select * from t1 where c1 + c2 < 10;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  1 |  2 | a    | b    | c5_default |
|  3 |  4 | c    | d    | c5_default |
|  5 |  1 | xx   | yy   | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 limit 2;
Query Plan
===============================================
|ID|OPERATOR       |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------
|0 |TABLE FULL SCAN|t1  |2       |3           |
===============================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), rowset=16
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)
      limit(2), offset(nil), is_index_back=false, is_global_index=false, 
      range_key([t1.c1], [t1.c2]), range(MIN,MIN ; MAX,MAX)always true
select * from t1 limit 2;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  1 |  2 | a    | b    | c5_default |
|  3 |  4 | c    | d    | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 where c1 = 5;
Query Plan
================================================
|ID|OPERATOR        |NAME|EST.ROWS|EST.TIME(us)|
------------------------------------------------
|0 |TABLE RANGE SCAN|t1  |2       |3           |
================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), rowset=16
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.c1], [t1.c2]), range(5,MIN ; 5,MAX), 
      range_cond([t1.c1 = cast(5, DECIMAL_INT(10, 0))])
select * from t1 where c1 = 5;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  5 |  1 | xx   | yy   | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 where c1 = 5 or c1 = 7;
Query Plan
================================================
|ID|OPERATOR        |NAME|EST.ROWS|EST.TIME(us)|
------------------------------------------------
|0 |TABLE RANGE SCAN|t1  |4       |5           |
================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), rowset=16
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.c1], [t1.c2]), range(5,MIN ; 5,MAX), (7,MIN ; 7,MAX), 
      range_cond([t1.c1 = cast(5, DECIMAL_INT(10, 0)) OR t1.c1 = cast(7, DECIMAL_INT(10, 0))])
select * from t1 where c1 = 5 or c1 = 7;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  5 |  1 | xx   | yy   | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
|  7 |  5 | xx1  | yy2  | c5_default |
|  7 |  6 | xx1  | yy2  | c5_default |
+----+----+------+------+------------+
EXPLAIN select * from t1 where (c1 = 2 and c2 = 4) or (c1 = 7 and c2 = 5) or (c1 = 8 and c2 = 7);
Query Plan
=========================================
|ID|OPERATOR |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------
|0 |TABLE GET|t1  |3       |15          |
=========================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter(nil), rowset=16
      access([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.c1], [t1.c2]), range[2,4 ; 2,4], [7,5 ; 7,5], [8,7 ; 8,7], 
      range_cond([(T_OP_OR, t1.c1 = cast(2, DECIMAL_INT(10, 0)) AND t1.c2 = cast(4, DECIMAL_INT(10, 0)), t1.c1 = cast(7, DECIMAL_INT(10, 0)) AND t1.c2 = 
      cast(5, DECIMAL_INT(10, 0)), t1.c1 = cast(8, DECIMAL_INT(10, 0)) AND t1.c2 = cast(7, DECIMAL_INT(10, 0)))])
select * from t1 where (c1 = 2 and c2 = 4) or (c1 = 7 and c2 = 5) or (c1 = 8 and c2 = 7);
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  7 |  5 | xx1  | yy2  | c5_default |
|  8 |  7 | xx1  | yy2  | c5_default |
+----+----+------+------+------------+

EXPLAIN select * from t1 where c2  = 2 and c1 + c2 < 10 and c4 > c3;
Query Plan
==================================================
|ID|OPERATOR        |NAME  |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |TABLE RANGE SCAN|t1(i1)|1       |8           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3], [t1.c4], [t1.c5]), filter([t1.c4 > t1.c3], [t1.c1 + cast(cast(2, DECIMAL_INT(10, 0)), DECIMAL_INT(10, 0)) < cast(10,
       DECIMAL_INT(11, 0))]), rowset=16
      access([t1.c1], [t1.c2], [t1.c4], [t1.c3], [t1.c5]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[false,true], 
      range_key([t1.c2], [t1.c1]), range(2,MIN ; 2,MAX), 
      range_cond([t1.c2 = cast(2, DECIMAL_INT(10, 0))])
select * from t1 where c2  = 2 and c1 + c2 < 10 and c4 > c3;
+----+----+------+------+------------+
| c1 | c2 | c3   | c4   | c5         |
+----+----+------+------+------------+
|  1 |  2 | a    | b    | c5_default |
|  5 |  2 | xx   | yy   | c5_default |
+----+----+------+------+------------+

EXPLAIN select c1, c2 from t1 where c2 > 4;
Query Plan
==================================================
|ID|OPERATOR        |NAME  |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |TABLE RANGE SCAN|t1(i1)|3       |3           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.c2], [t1.c1]), range(4,MAX ; MAX,MAX), 
      range_cond([t1.c2 > cast(4, DECIMAL_INT(10, 0))])
select c1, c2 from t1 where c2 > 4;
+----+----+
| c1 | c2 |
+----+----+
|  7 |  5 |
|  7 |  6 |
|  8 |  7 |
+----+----+

***** test index back
drop table t1;
create table t1(c1 int primary key, c2 int, c3 int, index idx(c2));
EXPLAIN insert into t1 values(1,1,1), (2,2,2), (3,3,3), (4,4,4),(5,5,5), (6,6,6), (7,7,7);
Query Plan
==================================================
|ID|OPERATOR          |NAME|EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |DISTRIBUTED INSERT|    |7       |51          |
|1 |└─EXPRESSION      |    |7       |1           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.c1, t1.c2, t1.c3)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.c1)], [column_conv(INT,PS:(11,0),NULL,__values.c2)], [column_conv(INT,PS:(11,0),NULL,__values.c3)])
  1 - output([__values.c1], [__values.c2], [__values.c3]), filter(nil)
      values({1, 1, 1}, {2, 2, 2}, {3, 3, 3}, {4, 4, 4}, {5, 5, 5}, {6, 6, 6}, {7, 7, 7})
insert into t1 values(1,1,1), (2,2,2), (3,3,3), (4,4,4),(5,5,5), (6,6,6), (7,7,7);


# case 1: index back with before_index_back_filter
EXPLAIN select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c2 > 1 and  c1 <  4;
Query Plan
===================================================
|ID|OPERATOR        |NAME   |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |TABLE RANGE SCAN|t1(idx)|2       |10          |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3]), filter([t1.c1 < 4]), rowset=16
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[true], 
      range_key([t1.c2], [t1.c1]), range(1,MAX ; MAX,MAX), 
      range_cond([t1.c2 > 1])
select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c2 > 1 and  c1 <  4;
+----+------+------+
| c1 | c2   | c3   |
+----+------+------+
|  2 |    2 |    2 |
|  3 |    3 |    3 |
+----+------+------+


# case 2: index back without before_index_back_filter
EXPLAIN select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c2 > 1 and  c3 <  4;
Query Plan
===================================================
|ID|OPERATOR        |NAME   |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |TABLE RANGE SCAN|t1(idx)|2       |20          |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3]), filter([t1.c3 < 4]), rowset=16
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.c2], [t1.c1]), range(1,MAX ; MAX,MAX), 
      range_cond([t1.c2 > 1])
select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c2 > 1 and  c3 <  4;
+----+------+------+
| c1 | c2   | c3   |
+----+------+------+
|  2 |    2 |    2 |
|  3 |    3 |    3 |
+----+------+------+

EXPLAIN select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c3 != 1 limit 2;
Query Plan
==================================================
|ID|OPERATOR       |NAME   |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |TABLE FULL SCAN|t1(idx)|2       |23          |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c3]), filter([t1.c3 != 1]), rowset=16
      access([t1.c1], [t1.c3], [t1.c2]), partitions(p0)
      limit(2), offset(nil), is_index_back=true, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.c2], [t1.c1]), range(MIN,MIN ; MAX,MAX)always true
select /*+index(t1 idx)*/ c1, c2, c3 from t1 where c3 != 1 limit 2;
+----+------+------+
| c1 | c2   | c3   |
+----+------+------+
|  2 |    2 |    2 |
|  3 |    3 |    3 |
+----+------+------+

drop table t1;
CREATE TABLE t1 (c1 bigint, c2 bigint);
CREATE TABLE t2 (c1 NUMERIC(64,19), c2 DECIMAL(64,16), c3 INTEGER(127), c4 NUMERIC(64,18), c5 DECIMAL(64,0) GENERATED always AS (c3 + c4), c6 int);
CREATE UNIQUE INDEX idx1 ON t2(c2, c1, c5) GLOBAL ;
EXPLAIN select /*+use_nl(t1 t2) parallel(2) */t1.c1, t2.c6 FROM t1 LEFT JOIN t2 ON t1.c1 = t2.c2 AND t1.c2 <= t2.c5;
Query Plan
=======================================================================
|ID|OPERATOR                           |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------
|0 |PX COORDINATOR                     |        |1       |22          |
|1 |└─EXCHANGE OUT DISTR               |:EX10001|1       |22          |
|2 |  └─NESTED-LOOP OUTER JOIN         |        |1       |21          |
|3 |    ├─EXCHANGE IN DISTR            |        |1       |2           |
|4 |    │ └─EXCHANGE OUT DISTR (RANDOM)|:EX10000|1       |2           |
|5 |    │   └─PX BLOCK ITERATOR        |        |1       |2           |
|6 |    │     └─TABLE FULL SCAN        |t1      |1       |2           |
|7 |    └─DISTRIBUTED TABLE RANGE SCAN |t2(idx1)|1       |19          |
=======================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.c1, t2.c6)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.c1, t2.c6)]), filter(nil), rowset=16
      dop=2
  2 - output([t1.c1], [t2.c6]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.c1(:0)], [t1.c2(:1)]), use_batch=true
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      dop=2
  5 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
  6 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t2.c6]), filter([cast(:1, DECIMAL_INT(64, 0)) <= column_conv(DECIMAL_INT,PS:(64,0),NULL,cast(cast(t2.c3, DECIMAL_INT(81, 18)) + cast(t2.c4,
       DECIMAL_INT(81, 18)), DECIMAL_INT(64, 0)))]), rowset=16
      access([GROUP_ID], [t2.__pk_increment], [t2.c3], [t2.c4], [t2.c6]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[true], 
      range_key([t2.c2], [t2.c1], [t2.c5], [t2.shadow_pk_0]), range(MIN ; MAX), 
      range_cond([cast(:0, DECIMAL_INT(64, 16)) = t2.c2])
select /*+use_nl(t1 t2) parallel(2) */t1.c1, t2.c6 FROM t1 LEFT JOIN t2 ON t1.c1 = t2.c2 AND t1.c2 <= t2.c5;
+------+------+
| c1   | c6   |
+------+------+
+------+------+

drop table t1;
drop table t2;

