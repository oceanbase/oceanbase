drop table if exists t1,t2;
explain_protocol: 1
result_format: 4
alter system set ob_enable_batched_multi_statement=true;
create table t1 (a int auto_increment , primary key (a));
EXPLAIN BASIC insert into t1 values (NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.a)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,t1.a.nextval(column_conv(INT,PS:(11,0),NOT NULL,__values.a)))])
  1 - output([__values.a]), filter(nil)
      values({NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL},
       {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL}, {NULL})
insert into t1 values (NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL);
EXPLAIN BASIC update t1 set a=a+10 where a > 34;
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |UPDATE            |    |
|1 |└─TABLE RANGE SCAN|t1  |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.a)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NOT NULL,cast(t1.a + 10, INT(-1, 0)))])
  1 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(34 ; MAX), 
      range_cond([t1.a > 34])
update t1 set a=a+10 where a > 34;
EXPLAIN BASIC update t1 set a=a+100 where a > 0;
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |UPDATE            |    |
|1 |└─TABLE RANGE SCAN|t1  |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.a)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NOT NULL,cast(t1.a + 100, INT(-1, 0)))])
  1 - output([t1.a]), filter(nil), rowset=256
      access([t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(0 ; MAX), 
      range_cond([t1.a > 0])
update t1 set a=a+100 where a > 0;

EXPLAIN BASIC update t1 set a=a+100 where a=1 and a=2;
Query Plan
=====================
|ID|OPERATOR   |NAME|
---------------------
|0 |UPDATE     |    |
|1 |└─TABLE GET|t1  |
=====================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.a)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NOT NULL,cast(cast(1, INT(11, 0)) + 100, INT(-1, 0)))])
  1 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(MAX ; MIN)always false, 
      range_cond([t1.a = 1], [t1.a = 2])
update t1 set a=a+100 where a=1 and a=2;
update t1 set a=b+100 where a=1 and a=2;
ERROR 42S22: Unknown column 'b' in 'field list'
update t1 set a=b+100 where c=1 and a=2;
ERROR 42S22: Unknown column 'b' in 'field list'
update t1 set d=a+100 where a=1;
ERROR 42S22: Unknown column 'd' in 'field list'
EXPLAIN BASIC select * from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a]), filter(nil), rowset=256
      access([t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(MIN ; MAX)always true
select * from t1;
+-----+
| a   |
+-----+
| 101 |
| 102 |
| 103 |
| 104 |
| 105 |
| 106 |
| 107 |
| 108 |
| 109 |
| 110 |
| 111 |
| 112 |
| 113 |
| 114 |
| 115 |
| 116 |
| 117 |
| 118 |
| 119 |
| 120 |
| 121 |
| 122 |
| 123 |
| 124 |
| 125 |
| 126 |
| 127 |
| 128 |
| 129 |
| 130 |
| 131 |
| 132 |
| 133 |
| 134 |
| 145 |
| 146 |
+-----+
drop table t1;

create table t1(a int primary key, b int) partition by hash(a) partitions 3;
EXPLAIN BASIC insert into t1 values(1, 1), (2, 2);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.a, t1.b)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.a)], [column_conv(INT,PS:(11,0),NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 1}, {2, 2})
insert into t1 values(1, 1), (2, 2);
EXPLAIN BASIC update t1 set b=b+1 where a>0;
Query Plan
=======================================
|ID|OPERATOR                 |NAME    |
---------------------------------------
|0 |PX COORDINATOR           |        |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|
|2 |  └─PX PARTITION ITERATOR|        |
|3 |    └─UPDATE             |        |
|4 |      └─TABLE RANGE SCAN |t1      |
=======================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), rowset=16
  1 - output(nil), filter(nil), rowset=16
      dop=1
  2 - output(nil), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.a, t1.b)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 1, INT(-1, 0)))])
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-2])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(0 ; MAX), 
      range_cond([t1.a > 0])
update t1 set b=b+1 where a>0;
EXPLAIN BASIC select * from t1;
Query Plan
=======================================
|ID|OPERATOR                 |NAME    |
---------------------------------------
|0 |PX COORDINATOR           |        |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|
|2 |  └─PX PARTITION ITERATOR|        |
|3 |    └─TABLE FULL SCAN    |t1      |
=======================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-2])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(MIN ; MAX)always true
select * from t1;
+---+------+
| a | b    |
+---+------+
| 1 |    2 |
| 2 |    3 |
+---+------+
drop table t1;

create table t1(a int primary key, b int) partition by hash(a) partitions 3;
EXPLAIN BASIC insert into t1 values(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.a, t1.b)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.a)], [column_conv(INT,PS:(11,0),NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5})
insert into t1 values(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
EXPLAIN BASIC update t1 set b=b+1 where a>0;
Query Plan
=======================================
|ID|OPERATOR                 |NAME    |
---------------------------------------
|0 |PX COORDINATOR           |        |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|
|2 |  └─PX PARTITION ITERATOR|        |
|3 |    └─UPDATE             |        |
|4 |      └─TABLE RANGE SCAN |t1      |
=======================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), rowset=16
  1 - output(nil), filter(nil), rowset=16
      dop=1
  2 - output(nil), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.a, t1.b)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 1, INT(-1, 0)))])
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-2])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(0 ; MAX), 
      range_cond([t1.a > 0])
update t1 set b=b+1 where a>0;
EXPLAIN BASIC select * from t1;
Query Plan
=======================================
|ID|OPERATOR                 |NAME    |
---------------------------------------
|0 |PX COORDINATOR           |        |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|
|2 |  └─PX PARTITION ITERATOR|        |
|3 |    └─TABLE FULL SCAN    |t1      |
=======================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-2])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(MIN ; MAX)always true
select * from t1;
+---+------+
| a | b    |
+---+------+
| 3 |    4 |
| 1 |    2 |
| 4 |    5 |
| 2 |    3 |
| 5 |    6 |
+---+------+
drop table t1;

create table t1(a int primary key, b int) partition by hash(a) partitions 3;
create index gkey on t1(b) global;
EXPLAIN BASIC insert into t1 values(1, 1), (2, 2);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.a, t1.b)}, {gkey: (t1.b, t1.a)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.a)], [column_conv(INT,PS:(11,0),NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 1}, {2, 2})
insert into t1 values(1, 1), (2, 2);
EXPLAIN BASIC update t1 set b=b+1 where a>0;
Query Plan
=========================================
|ID|OPERATOR                   |NAME    |
-----------------------------------------
|0 |DISTRIBUTED UPDATE         |        |
|1 |└─PX COORDINATOR           |        |
|2 |  └─EXCHANGE OUT DISTR     |:EX10000|
|3 |    └─PX PARTITION ITERATOR|        |
|4 |      └─TABLE RANGE SCAN   |t1      |
=========================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.a, t1.b)}, {gkey: (t1.b, t1.a)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 1, INT(-1, 0)))])
  1 - output([t1.a], [t1.b]), filter(nil), rowset=16
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      dop=1
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-2])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(0 ; MAX), 
      range_cond([t1.a > 0])
update t1 set b=b+1 where a>0;
EXPLAIN BASIC select * from t1;
Query Plan
=============================
|ID|OPERATOR       |NAME    |
-----------------------------
|0 |TABLE FULL SCAN|t1(gkey)|
=============================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0)
      is_index_back=false, is_global_index=true, 
      range_key([t1.b], [t1.a]), range(MIN,MIN ; MAX,MAX)always true
select * from t1;
+---+------+
| a | b    |
+---+------+
| 1 |    2 |
| 2 |    3 |
+---+------+
drop table t1;

create table t1(a int primary key, b int) partition by hash(a) partitions 3;
create index gkey on t1(b) global;
EXPLAIN BASIC insert into t1 values(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.a, t1.b)}, {gkey: (t1.b, t1.a)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.a)], [column_conv(INT,PS:(11,0),NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5})
insert into t1 values(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
EXPLAIN BASIC update t1 set b=b+1 where a>0;
Query Plan
=========================================
|ID|OPERATOR                   |NAME    |
-----------------------------------------
|0 |DISTRIBUTED UPDATE         |        |
|1 |└─PX COORDINATOR           |        |
|2 |  └─EXCHANGE OUT DISTR     |:EX10000|
|3 |    └─PX PARTITION ITERATOR|        |
|4 |      └─TABLE RANGE SCAN   |t1      |
=========================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.a, t1.b)}, {gkey: (t1.b, t1.a)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 1, INT(-1, 0)))])
  1 - output([t1.a], [t1.b]), filter(nil), rowset=16
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      dop=1
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-2])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(0 ; MAX), 
      range_cond([t1.a > 0])
update t1 set b=b+1 where a>0;
EXPLAIN BASIC select * from t1;
Query Plan
=============================
|ID|OPERATOR       |NAME    |
-----------------------------
|0 |TABLE FULL SCAN|t1(gkey)|
=============================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0)
      is_index_back=false, is_global_index=true, 
      range_key([t1.b], [t1.a]), range(MIN,MIN ; MAX,MAX)always true
select * from t1;
+---+------+
| a | b    |
+---+------+
| 1 |    2 |
| 2 |    3 |
| 3 |    4 |
| 4 |    5 |
| 5 |    6 |
+---+------+
drop table t1;

create table t1(a int primary key, b int);
create index gkey on t1(b) partition by hash(b) partitions 2;
EXPLAIN BASIC insert into t1 values(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.a, t1.b)}, {gkey: (t1.b, t1.a)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.a)], [column_conv(INT,PS:(11,0),NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5})
insert into t1 values(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
EXPLAIN BASIC update /*+index(t1 gkey)*/ t1 set b=b+1 where b>0 and b<5;
Query Plan
=========================================
|ID|OPERATOR                   |NAME    |
-----------------------------------------
|0 |DISTRIBUTED UPDATE         |        |
|1 |└─PX COORDINATOR           |        |
|2 |  └─EXCHANGE OUT DISTR     |:EX10000|
|3 |    └─PX PARTITION ITERATOR|        |
|4 |      └─TABLE RANGE SCAN   |t1(gkey)|
=========================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.a, t1.b)}, {gkey: (t1.b, t1.a)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 1, INT(-1, 0)))])
  1 - output([t1.a], [t1.b]), filter(nil), rowset=16
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      dop=1
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=true, 
      range_key([t1.b], [t1.a]), range(0,MAX ; 5,MIN), 
      range_cond([t1.b > 0], [t1.b < 5])
update /*+index(t1 gkey)*/ t1 set b=b+1 where b>0 and b<5;
EXPLAIN BASIC select /*+index(t1 primary)*/ * from t1 order by a;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(MIN ; MAX)always true
select /*+index(t1 primary)*/ * from t1 order by a;
+---+------+
| a | b    |
+---+------+
| 1 |    2 |
| 2 |    3 |
| 3 |    4 |
| 4 |    5 |
| 5 |    5 |
+---+------+
drop table t1;

create table t1(a int primary key, b int) partition by hash(a) partitions 3;
create table t2(a int primary key, b int) partition by hash(a) partitions 3;
EXPLAIN BASIC insert into t1 values(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.a, t1.b)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.a)], [column_conv(INT,PS:(11,0),NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5})
insert into t1 values(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);
EXPLAIN BASIC update /*+use_nl(t1, t2), leading(t1)*/ t1 set b=b+1 where a in (select a from t2);
Query Plan
=======================================
|ID|OPERATOR                 |NAME    |
---------------------------------------
|0 |PX COORDINATOR           |        |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|
|2 |  └─PX PARTITION ITERATOR|        |
|3 |    └─UPDATE             |        |
|4 |      └─NESTED-LOOP JOIN |        |
|5 |        ├─TABLE FULL SCAN|t1      |
|6 |        └─TABLE GET      |t2      |
=======================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), rowset=16
  1 - output(nil), filter(nil), rowset=16
      dop=1
  2 - output(nil), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.a, t1.b)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 1, INT(-1, 0)))])
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)]), use_batch=true
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-2])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(MIN ; MAX)always true
  6 - output(nil), filter(nil), rowset=16
      access([GROUP_ID]), partitions(p[0-2])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a]), range(MIN ; MAX), 
      range_cond([:0 = t2.a])
update /*+use_nl(t1, t2), leading(t1)*/ t1 set b=b+1 where a in (select a from t2);
EXPLAIN BASIC select * from t1;
Query Plan
=======================================
|ID|OPERATOR                 |NAME    |
---------------------------------------
|0 |PX COORDINATOR           |        |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|
|2 |  └─PX PARTITION ITERATOR|        |
|3 |    └─TABLE FULL SCAN    |t1      |
=======================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-2])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a]), range(MIN ; MAX)always true
select * from t1;
+---+------+
| a | b    |
+---+------+
| 3 |    3 |
| 1 |    1 |
| 4 |    4 |
| 2 |    2 |
| 5 |    5 |
+---+------+
drop table t1, t2;

CREATE TABLE t1
 (
 place_id int (10) unsigned NOT NULL,
 shows int(10) unsigned DEFAULT '0' NOT NULL,
 ishows int(10) unsigned DEFAULT '0' NOT NULL,
 ushows int(10) unsigned DEFAULT '0' NOT NULL,
 clicks int(10) unsigned DEFAULT '0' NOT NULL,
 iclicks int(10) unsigned DEFAULT '0' NOT NULL,
 uclicks int(10) unsigned DEFAULT '0' NOT NULL,
 ts timestamp,
 PRIMARY KEY (place_id,ts)
 );

EXPLAIN BASIC INSERT INTO t1 (place_id,shows,ishows,ushows,clicks,iclicks,uclicks,ts)
VALUES (1,0,0,0,0,0,0,20000928174434);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.place_id, t1.ts, t1.shows, t1.ishows, t1.ushows, t1.clicks, t1.iclicks, t1.uclicks)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.place_id)], [column_conv(TIMESTAMP,PS:(19,0),NOT NULL,timestamp_nvl(__values.ts,
       cast(current_timestamp(), TIMESTAMP(19, 0))))], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.shows)], [column_conv(INT UNSIGNED,PS:(10,0),NOT 
      NULL,__values.ishows)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.ushows)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.clicks)], 
      [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.iclicks)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.uclicks)])
  1 - output([__values.place_id], [__values.shows], [__values.ishows], [__values.ushows], [__values.clicks], [__values.iclicks], [__values.uclicks], [__values.ts]), filter(nil)
      values({1, 0, 0, 0, 0, 0, 0, 20000928174434})
INSERT INTO t1 (place_id,shows,ishows,ushows,clicks,iclicks,uclicks,ts)
VALUES (1,0,0,0,0,0,0,20000928174434);
EXPLAIN BASIC UPDATE t1 SET shows=shows+1,ishows=ishows+1,ushows=ushows+1,clicks=clicks+1,iclicks=iclicks+1,uclicks=uclicks+1 WHERE place_id=1 AND ts>="2000-09-28 00:00:00";
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |UPDATE            |    |
|1 |└─TABLE RANGE SCAN|t1  |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.place_id, t1.ts, t1.shows, t1.ishows, t1.ushows, t1.clicks, t1.iclicks, t1.uclicks)})}]),
      update([t1.shows=column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,cast(t1.shows + 1, INT UNSIGNED(-1, 0)))], [t1.ishows=column_conv(INT UNSIGNED,PS:(10,
      0),NOT NULL,cast(t1.ishows + 1, INT UNSIGNED(-1, 0)))], [t1.ushows=column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,cast(t1.ushows + 1, INT UNSIGNED(-1, 0)))],
       [t1.clicks=column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,cast(t1.clicks + 1, INT UNSIGNED(-1, 0)))], [t1.iclicks=column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      cast(t1.iclicks + 1, INT UNSIGNED(-1, 0)))], [t1.uclicks=column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,cast(t1.uclicks + 1, INT UNSIGNED(-1, 0)))], [t1.ts=column_conv(TIMESTAMP,
      PS:(19,0),NOT NULL,cast(current_timestamp(), TIMESTAMP(19, 0)))])
  1 - output([t1.place_id], [t1.ts], [t1.shows], [t1.ishows], [t1.ushows], [t1.clicks], [t1.iclicks], [t1.uclicks]), filter(nil), rowset=16
      access([t1.place_id], [t1.ts], [t1.shows], [t1.ishows], [t1.ushows], [t1.clicks], [t1.iclicks], [t1.uclicks]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.place_id], [t1.ts]), range[1,2000-09-27 16:00:00.000000 ; 1,MAX), 
      range_cond([t1.place_id = 1], [t1.ts >= cast('2000-09-28 00:00:00', TIMESTAMP(-1, -1))])
UPDATE t1 SET shows=shows+1,ishows=ishows+1,ushows=ushows+1,clicks=clicks+1,iclicks=iclicks+1,uclicks=uclicks+1 WHERE place_id=1 AND ts>="2000-09-28 00:00:00";
EXPLAIN BASIC select place_id,shows from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.place_id], [t1.shows]), filter(nil), rowset=16
      access([t1.place_id], [t1.shows]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.place_id], [t1.ts]), range(MIN,MIN ; MAX,MAX)always true
select place_id,shows from t1;
+----------+-------+
| place_id | shows |
+----------+-------+
|        1 |     1 |
+----------+-------+
drop table t1;

CREATE TABLE t1 (
  lfdnr int(10) unsigned NOT NULL default '0',
  ticket int(10) unsigned NOT NULL default '0',
  client varchar(255) NOT NULL default '',
  replyto varchar(255) NOT NULL default '',
  subject varchar(100) NOT NULL default '',
  timestamp int(10) unsigned NOT NULL default '0',
  tstamp timestamp NOT NULL,
  status int(3) NOT NULL default '0',
  type varchar(15) NOT NULL default '',
  assignment int(10) unsigned NOT NULL default '0',
  fupcount int(4) unsigned NOT NULL default '0',
  parent int(10) unsigned NOT NULL default '0',
  activity int(10) unsigned NOT NULL default '0',
  priority tinyint(1) unsigned NOT NULL default '1',
  cc varchar(255) NOT NULL default '',
  bcc varchar(255) NOT NULL default '',
  body varchar(255) NOT NULL,
  comment varchar(255),
  header varchar(255),
  PRIMARY KEY  (lfdnr),
  KEY k1 (timestamp),
  KEY k2 (type),
  KEY k3 (parent),
  KEY k4 (assignment),
  KEY ticket (ticket)
) ;

EXPLAIN BASIC INSERT INTO t1 VALUES (773,773,'','','',980257344,20010318180652,0,'Open',10,0,0,0,1,'','','','','');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.lfdnr, t1.ticket, t1.client, t1.replyto, t1.subject, t1.timestamp, t1.tstamp, t1.status, t1.type, t1.assignment, t1.fupcount,
       t1.parent, t1.activity, t1.priority, t1.cc, t1.bcc, t1.body, t1.comment, t1.header)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.lfdnr)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.ticket)], [column_conv(VARCHAR,
      utf8mb4_general_ci,length:255,NOT NULL,__values.client)], [column_conv(VARCHAR,utf8mb4_general_ci,length:255,NOT NULL,__values.replyto)], [column_conv(VARCHAR,
      utf8mb4_general_ci,length:100,NOT NULL,__values.subject)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.timestamp)], [column_conv(TIMESTAMP,PS:(19,
      0),NOT NULL,timestamp_nvl(__values.tstamp, cast(current_timestamp(), TIMESTAMP(19, 0))))], [column_conv(INT,PS:(3,0),NOT NULL,__values.status)], [column_conv(VARCHAR,
      utf8mb4_general_ci,length:15,NOT NULL,__values.type)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.assignment)], [column_conv(INT UNSIGNED,PS:(4,
      0),NOT NULL,__values.fupcount)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.parent)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.activity)],
       [column_conv(TINYINT UNSIGNED,PS:(1,0),NOT NULL,__values.priority)], [column_conv(VARCHAR,utf8mb4_general_ci,length:255,NOT NULL,__values.cc)], [column_conv(VARCHAR,
      utf8mb4_general_ci,length:255,NOT NULL,__values.bcc)], [column_conv(VARCHAR,utf8mb4_general_ci,length:255,NOT NULL,__values.body)], [column_conv(VARCHAR,
      utf8mb4_general_ci,length:255,NULL,__values.comment)], [column_conv(VARCHAR,utf8mb4_general_ci,length:255,NULL,__values.header)])
  1 - output([__values.lfdnr], [__values.ticket], [__values.client], [__values.replyto], [__values.subject], [__values.timestamp], [__values.tstamp], [__values.status],
       [__values.type], [__values.assignment], [__values.fupcount], [__values.parent], [__values.activity], [__values.priority], [__values.cc], [__values.bcc],
       [__values.body], [__values.comment], [__values.header]), filter(nil)
      values({773, 773, '', '', '', 980257344, 20010318180652, 0, 'Open', 10, 0, 0, 0, 1, '', '', '', '', ''})
INSERT INTO t1 VALUES (773,773,'','','',980257344,20010318180652,0,'Open',10,0,0,0,1,'','','','','');

alter table t1 change lfdnr lfdnr int(10) unsigned not null auto_increment;
EXPLAIN BASIC update t1 set status=1 where type='Open';
Query Plan
==============================
|ID|OPERATOR          |NAME  |
------------------------------
|0 |UPDATE            |      |
|1 |└─TABLE RANGE SCAN|t1(k2)|
==============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.lfdnr, t1.ticket, t1.client, t1.replyto, t1.subject, t1.timestamp, t1.tstamp, t1.status, t1.type, t1.assignment, t1.fupcount,
       t1.parent, t1.activity, t1.priority, t1.cc, t1.bcc, t1.body, t1.comment, t1.header)})}]),
      update([t1.status=column_conv(INT,PS:(3,0),NOT NULL,1)], [t1.tstamp=column_conv(TIMESTAMP,PS:(19,0),NOT NULL,cast(current_timestamp(), TIMESTAMP(19,
       0)))])
  1 - output([t1.lfdnr], [t1.status], [t1.tstamp], [t1.ticket], [t1.client], [t1.replyto], [t1.subject], [t1.timestamp], [t1.type], [t1.assignment], [t1.fupcount],
       [t1.parent], [t1.activity], [t1.priority], [t1.cc], [t1.bcc], [t1.body], [t1.comment], [t1.header]), filter(nil), rowset=16
      access([t1.lfdnr], [t1.status], [t1.tstamp], [t1.ticket], [t1.client], [t1.replyto], [t1.subject], [t1.timestamp], [t1.type], [t1.assignment], [t1.fupcount],
       [t1.parent], [t1.activity], [t1.priority], [t1.cc], [t1.bcc], [t1.body], [t1.comment], [t1.header]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.type], [t1.lfdnr]), range(Open,MIN ; Open,MAX), 
      range_cond([t1.type = 'Open'])
update t1 set status=1 where type='Open';
EXPLAIN BASIC select status from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.status]), filter(nil), rowset=16
      access([t1.status]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.lfdnr]), range(MIN ; MAX)always true
select status from t1;
+--------+
| status |
+--------+
|      1 |
+--------+
drop table t1;

create table t1 (a int not null, b int not null, key (a));
EXPLAIN BASIC insert into t1 values (1,1),(1,2),(1,3),(3,1),(3,2),(3,3),(3,1),(3,2),(3,3),(2,1),(2,2),(2,3);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NOT NULL,__values.a)], [column_conv(INT,PS:(11,0),NOT NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 1}, {1, 2}, {1, 3}, {3, 1}, {3, 2}, {3, 3}, {3, 1}, {3, 2}, {3, 3}, {2, 1}, {2, 2}, {2, 3})
insert into t1 values (1,1),(1,2),(1,3),(3,1),(3,2),(3,3),(3,1),(3,2),(3,3),(2,1),(2,2),(2,3);
SET @tmp=0;
EXPLAIN BASIC update t1 set b=(@tmp:=@tmp+1) order by a;
Query Plan
=========================================
|ID|OPERATOR                       |NAME|
-----------------------------------------
|0 |DISTRIBUTED UPDATE             |    |
|1 |└─SORT                         |    |
|2 |  └─DISTRIBUTED TABLE FULL SCAN|t1  |
=========================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NOT NULL,cast((T_OP_ASSIGN, 'tmp', ('tmp') + 1), INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil)
      sort_keys([t1.a, ASC])
  2 - output([t1.__pk_increment], [t1.b], [t1.a]), filter(nil)
      access([t1.__pk_increment], [t1.b], [t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update t1 set b=(@tmp:=@tmp+1) order by a;
EXPLAIN BASIC update /*+index(t1 a)*/ t1 set b=99 where a=1 order by b asc limit 1;
Query Plan
===============================
|ID|OPERATOR            |NAME |
-------------------------------
|0 |UPDATE              |     |
|1 |└─TOP-N SORT        |     |
|2 |  └─TABLE RANGE SCAN|t1(a)|
===============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NOT NULL,99)])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      sort_keys([t1.b, ASC]), topn(1)
  2 - output([t1.__pk_increment], [t1.b], [t1.a]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.b], [t1.a]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(1,MIN ; 1,MAX), 
      range_cond([t1.a = 1])
update /*+index(t1 a)*/ t1 set b=99 where a=1 order by b asc limit 1;
EXPLAIN BASIC select * from t1 order by a,b;
Query Plan
===========================
|ID|OPERATOR         |NAME|
---------------------------
|0 |SORT             |    |
|1 |└─TABLE FULL SCAN|t1  |
===========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      sort_keys([t1.a, ASC], [t1.b, ASC])
  1 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 order by a,b;
+---+----+
| a | b  |
+---+----+
| 1 |  2 |
| 1 |  3 |
| 1 | 99 |
| 2 |  4 |
| 2 |  5 |
| 2 |  6 |
| 3 |  7 |
| 3 |  8 |
| 3 |  9 |
| 3 | 10 |
| 3 | 11 |
| 3 | 12 |
+---+----+
EXPLAIN BASIC update t1 set b=100 where a=1 order by b desc limit 2;
Query Plan
===============================
|ID|OPERATOR            |NAME |
-------------------------------
|0 |UPDATE              |     |
|1 |└─TOP-N SORT        |     |
|2 |  └─TABLE RANGE SCAN|t1(a)|
===============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NOT NULL,100)])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      sort_keys([t1.b, DESC]), topn(2)
  2 - output([t1.__pk_increment], [t1.b], [t1.a]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.b], [t1.a]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(1,MIN ; 1,MAX), 
      range_cond([t1.a = 1])
update t1 set b=100 where a=1 order by b desc limit 2;
EXPLAIN BASIC update t1 set a=a+10+b where a=1 order by b;
Query Plan
===============================
|ID|OPERATOR            |NAME |
-------------------------------
|0 |UPDATE              |     |
|1 |└─SORT              |     |
|2 |  └─TABLE RANGE SCAN|t1(a)|
===============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NOT NULL,cast(cast(1, INT(11, 0)) + 10 + t1.b, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      sort_keys([t1.b, ASC])
  2 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.a], [t1.b]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(1,MIN ; 1,MAX), 
      range_cond([t1.a = 1])
update t1 set a=a+10+b where a=1 order by b;
EXPLAIN BASIC select * from t1 order by a,b;
Query Plan
===========================
|ID|OPERATOR         |NAME|
---------------------------
|0 |SORT             |    |
|1 |└─TABLE FULL SCAN|t1  |
===========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      sort_keys([t1.a, ASC], [t1.b, ASC])
  1 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 order by a,b;
+-----+-----+
| a   | b   |
+-----+-----+
|   2 |   4 |
|   2 |   5 |
|   2 |   6 |
|   3 |   7 |
|   3 |   8 |
|   3 |   9 |
|   3 |  10 |
|   3 |  11 |
|   3 |  12 |
|  13 |   2 |
| 111 | 100 |
| 111 | 100 |
+-----+-----+
create table t2 (a int not null, b int not null);
EXPLAIN BASIC insert into t2 values (1,1),(1,2),(1,3);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.__pk_increment, t2.a, t2.b)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NOT NULL,__values.a)], [column_conv(INT,PS:(11,0),NOT NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 1}, {1, 2}, {1, 3})
insert into t2 values (1,1),(1,2),(1,3);
EXPLAIN BASIC update t1 set b=(select distinct 1 from (select * from t2) a);
Query Plan
=============================
|ID|OPERATOR           |NAME|
-----------------------------
|0 |UPDATE             |    |
|1 |└─SUBPLAN FILTER   |    |
|2 |  ├─TABLE FULL SCAN|t1  |
|3 |  └─TABLE FULL SCAN|t2  |
=============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NOT NULL,cast(:0, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [:0]), filter(nil), rowset=16
      exec_params_(nil), onetime_exprs_([subquery(1)(:0)]), init_plan_idxs_(nil), use_batch=false
  2 - output([t1.__pk_increment], [t1.b], [t1.a]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.b], [t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([1]), filter(nil), rowset=16
      access(nil), partitions(p0)
      limit(1), offset(nil), is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
update t1 set b=(select distinct 1 from (select * from t2) a);
drop table t1,t2;

CREATE TABLE t1 (
   `id_param` smallint(3) unsigned NOT NULL default '0',
   `nom_option` char(40) NOT NULL default '',
   `valid` tinyint(1) NOT NULL default '0',
   KEY `id_param` (`id_param`,`nom_option`)
 );

EXPLAIN BASIC INSERT INTO t1 (id_param,nom_option,valid) VALUES (185,'600x1200',1);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.id_param, t1.nom_option, t1.valid)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(SMALLINT UNSIGNED,PS:(3,0),NOT NULL,__values.id_param)], [column_conv(CHAR,utf8mb4_general_ci,length:40,
      NOT NULL,__values.nom_option)], [column_conv(TINYINT,PS:(1,0),NOT NULL,__values.valid)])
  1 - output([__values.id_param], [__values.nom_option], [__values.valid]), filter(nil)
      values({185, '600x1200', 1})
INSERT INTO t1 (id_param,nom_option,valid) VALUES (185,'600x1200',1);

EXPLAIN BASIC UPDATE t1 SET nom_option='test' WHERE id_param=185 AND nom_option='600x1200' AND valid=1 LIMIT 1;
Query Plan
====================================
|ID|OPERATOR          |NAME        |
------------------------------------
|0 |UPDATE            |            |
|1 |└─TABLE RANGE SCAN|t1(id_param)|
====================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.id_param, t1.nom_option, t1.valid)})}]),
      update([t1.nom_option=column_conv(CHAR,utf8mb4_general_ci,length:40,NOT NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast('test', VARCHAR(1048576))),
       CHAR(1048576)))])
  1 - output([t1.__pk_increment], [t1.nom_option], [t1.id_param], [t1.valid]), filter([t1.valid = 1]), rowset=16
      access([t1.__pk_increment], [t1.nom_option], [t1.id_param], [t1.valid]), partitions(p0)
      limit(1), offset(nil), is_index_back=true, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.id_param], [t1.nom_option], [t1.__pk_increment]), range(185,600x1200,MIN ; 185,600x1200,MAX), 
      range_cond([t1.id_param = 185], [t1.nom_option = '600x1200'])
UPDATE t1 SET nom_option='test' WHERE id_param=185 AND nom_option='600x1200' AND valid=1 LIMIT 1;
EXPLAIN BASIC select * from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.id_param], [t1.nom_option], [t1.valid]), filter(nil), rowset=16
      access([t1.id_param], [t1.nom_option], [t1.valid]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+----------+------------+-------+
| id_param | nom_option | valid |
+----------+------------+-------+
|      185 | test       |     1 |
+----------+------------+-------+
drop table t1;

create table t1 (F1 VARCHAR(30), F2 VARCHAR(30), F3 VARCHAR(30), cnt int, groupid int, KEY groupid_index (groupid));

EXPLAIN BASIC insert into t1 (F1,F2,F3,cnt,groupid) values ('0','0','0',1,6),
('0','1','2',1,5), ('0','2','0',1,3), ('1','0','1',1,2),
('1','2','1',1,1), ('1','2','2',1,1), ('2','0','1',2,4),
('2','2','0',1,7);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.F1, t1.F2, t1.F3, t1.cnt, t1.groupid)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(VARCHAR,utf8mb4_general_ci,length:30,NULL,__values.F1)], [column_conv(VARCHAR,utf8mb4_general_ci,length:30,
      NULL,__values.F2)], [column_conv(VARCHAR,utf8mb4_general_ci,length:30,NULL,__values.F3)], [column_conv(INT,PS:(11,0),NULL,__values.cnt)], [column_conv(INT,
      PS:(11,0),NULL,__values.groupid)])
  1 - output([__values.F1], [__values.F2], [__values.F3], [__values.cnt], [__values.groupid]), filter(nil)
      values({'0', '0', '0', 1, 6}, {'0', '1', '2', 1, 5}, {'0', '2', '0', 1, 3}, {'1', '0', '1', 1, 2}, {'1', '2', '1', 1, 1}, {'1', '2', '2', 1, 1}, {'2',
       '0', '1', 2, 4}, {'2', '2', '0', 1, 7})
insert into t1 (F1,F2,F3,cnt,groupid) values ('0','0','0',1,6),
('0','1','2',1,5), ('0','2','0',1,3), ('1','0','1',1,2),
('1','2','1',1,1), ('1','2','2',1,1), ('2','0','1',2,4),
('2','2','0',1,7);
EXPLAIN BASIC delete from m1 using t1 m1,t1 m2 where m1.groupid=m2.groupid and (m1.cnt < m2.cnt or m1.cnt=m2.cnt and m1.F3>m2.F3);
Query Plan
=============================
|ID|OPERATOR           |NAME|
-----------------------------
|0 |DELETE             |    |
|1 |└─HASH JOIN        |    |
|2 |  ├─TABLE FULL SCAN|m2  |
|3 |  └─TABLE FULL SCAN|m1  |
=============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{m1: ({t1: (m1.__pk_increment, m1.F1, m1.F2, m1.F3, m1.cnt, m1.groupid)}), hash_distinct}])
  1 - output([m1.__pk_increment], [m1.F1], [m1.F2], [m1.F3], [m1.cnt], [m1.groupid]), filter(nil), rowset=16
      equal_conds([m1.groupid = m2.groupid]), other_conds([m1.cnt < m2.cnt OR m1.cnt = m2.cnt AND m1.F3 > m2.F3])
  2 - output([m2.groupid], [m2.cnt], [m2.F3]), filter(nil), rowset=16
      access([m2.groupid], [m2.cnt], [m2.F3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([m2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([m1.__pk_increment], [m1.F1], [m1.F2], [m1.F3], [m1.cnt], [m1.groupid]), filter(nil), rowset=16
      access([m1.__pk_increment], [m1.F1], [m1.F2], [m1.F3], [m1.cnt], [m1.groupid]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([m1.__pk_increment]), range(MIN ; MAX)always true
delete from m1 using t1 m1,t1 m2 where m1.groupid=m2.groupid and (m1.cnt < m2.cnt or m1.cnt=m2.cnt and m1.F3>m2.F3);
EXPLAIN BASIC select * from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.F1], [t1.F2], [t1.F3], [t1.cnt], [t1.groupid]), filter(nil), rowset=16
      access([t1.F1], [t1.F2], [t1.F3], [t1.cnt], [t1.groupid]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+------+------+------+------+---------+
| F1   | F2   | F3   | cnt  | groupid |
+------+------+------+------+---------+
| 0    | 0    | 0    |    1 |       6 |
| 0    | 1    | 2    |    1 |       5 |
| 0    | 2    | 0    |    1 |       3 |
| 1    | 0    | 1    |    1 |       2 |
| 1    | 2    | 1    |    1 |       1 |
| 2    | 0    | 1    |    2 |       4 |
| 2    | 2    | 0    |    1 |       7 |
+------+------+------+------+---------+
drop table t1;


CREATE TABLE t1 ( 
   `colA` int(10) unsigned NOT NULL auto_increment,
   `colB` int(11) NOT NULL default '0',
   PRIMARY KEY  (`colA`)
);
EXPLAIN BASIC INSERT INTO t1 VALUES (4433,5424);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.colA, t1.colB)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,t1.colA.nextval(column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)))], [column_conv(INT,
      PS:(11,0),NOT NULL,__values.colB)])
  1 - output([__values.colA], [__values.colB]), filter(nil)
      values({4433, 5424})
INSERT INTO t1 VALUES (4433,5424);
CREATE TABLE t2 (
  `colC` int(10) unsigned NOT NULL default '0',
  `colA` int(10) unsigned NOT NULL default '0',
  `colD` int(10) unsigned NOT NULL default '0',
  `colE` int(10) unsigned NOT NULL default '0',
  `colF` int(10) unsigned NOT NULL default '0',
  PRIMARY KEY  (`colC`,`colA`,`colD`,`colE`)
);
EXPLAIN BASIC INSERT INTO t2 VALUES (3,4433,10005,495,500);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.colC, t2.colA, t2.colD, t2.colE, t2.colF)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colC)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)], [column_conv(INT 
      UNSIGNED,PS:(10,0),NOT NULL,__values.colD)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colE)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      __values.colF)])
  1 - output([__values.colC], [__values.colA], [__values.colD], [__values.colE], [__values.colF]), filter(nil)
      values({3, 4433, 10005, 495, 500})
INSERT INTO t2 VALUES (3,4433,10005,495,500);
EXPLAIN BASIC INSERT INTO t2 VALUES (3,4433,10005,496,500);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.colC, t2.colA, t2.colD, t2.colE, t2.colF)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colC)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)], [column_conv(INT 
      UNSIGNED,PS:(10,0),NOT NULL,__values.colD)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colE)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      __values.colF)])
  1 - output([__values.colC], [__values.colA], [__values.colD], [__values.colE], [__values.colF]), filter(nil)
      values({3, 4433, 10005, 496, 500})
INSERT INTO t2 VALUES (3,4433,10005,496,500);
EXPLAIN BASIC INSERT INTO t2 VALUES (3,4433,10009,494,500);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.colC, t2.colA, t2.colD, t2.colE, t2.colF)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colC)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)], [column_conv(INT 
      UNSIGNED,PS:(10,0),NOT NULL,__values.colD)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colE)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      __values.colF)])
  1 - output([__values.colC], [__values.colA], [__values.colD], [__values.colE], [__values.colF]), filter(nil)
      values({3, 4433, 10009, 494, 500})
INSERT INTO t2 VALUES (3,4433,10009,494,500);
EXPLAIN BASIC INSERT INTO t2 VALUES (3,4433,10011,494,500);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.colC, t2.colA, t2.colD, t2.colE, t2.colF)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colC)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)], [column_conv(INT 
      UNSIGNED,PS:(10,0),NOT NULL,__values.colD)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colE)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      __values.colF)])
  1 - output([__values.colC], [__values.colA], [__values.colD], [__values.colE], [__values.colF]), filter(nil)
      values({3, 4433, 10011, 494, 500})
INSERT INTO t2 VALUES (3,4433,10011,494,500);
EXPLAIN BASIC INSERT INTO t2 VALUES (3,4433,10005,497,500);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.colC, t2.colA, t2.colD, t2.colE, t2.colF)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colC)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)], [column_conv(INT 
      UNSIGNED,PS:(10,0),NOT NULL,__values.colD)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colE)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      __values.colF)])
  1 - output([__values.colC], [__values.colA], [__values.colD], [__values.colE], [__values.colF]), filter(nil)
      values({3, 4433, 10005, 497, 500})
INSERT INTO t2 VALUES (3,4433,10005,497,500);
EXPLAIN BASIC INSERT INTO t2 VALUES (3,4433,10013,489,500);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.colC, t2.colA, t2.colD, t2.colE, t2.colF)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colC)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)], [column_conv(INT 
      UNSIGNED,PS:(10,0),NOT NULL,__values.colD)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colE)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      __values.colF)])
  1 - output([__values.colC], [__values.colA], [__values.colD], [__values.colE], [__values.colF]), filter(nil)
      values({3, 4433, 10013, 489, 500})
INSERT INTO t2 VALUES (3,4433,10013,489,500);
EXPLAIN BASIC INSERT INTO t2 VALUES (3,4433,10005,494,500);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.colC, t2.colA, t2.colD, t2.colE, t2.colF)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colC)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)], [column_conv(INT 
      UNSIGNED,PS:(10,0),NOT NULL,__values.colD)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colE)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      __values.colF)])
  1 - output([__values.colC], [__values.colA], [__values.colD], [__values.colE], [__values.colF]), filter(nil)
      values({3, 4433, 10005, 494, 500})
INSERT INTO t2 VALUES (3,4433,10005,494,500);
EXPLAIN BASIC INSERT INTO t2 VALUES (3,4433,10005,493,500);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.colC, t2.colA, t2.colD, t2.colE, t2.colF)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colC)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)], [column_conv(INT 
      UNSIGNED,PS:(10,0),NOT NULL,__values.colD)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colE)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      __values.colF)])
  1 - output([__values.colC], [__values.colA], [__values.colD], [__values.colE], [__values.colF]), filter(nil)
      values({3, 4433, 10005, 493, 500})
INSERT INTO t2 VALUES (3,4433,10005,493,500);
EXPLAIN BASIC INSERT INTO t2 VALUES (3,4433,10005,492,500);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.colC, t2.colA, t2.colD, t2.colE, t2.colF)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colC)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colA)], [column_conv(INT 
      UNSIGNED,PS:(10,0),NOT NULL,__values.colD)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,__values.colE)], [column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,
      __values.colF)])
  1 - output([__values.colC], [__values.colA], [__values.colD], [__values.colE], [__values.colF]), filter(nil)
      values({3, 4433, 10005, 492, 500})
INSERT INTO t2 VALUES (3,4433,10005,492,500);
UPDATE t2,t1 set t2.colE = t2.colE + 1,colF=0 WHERE t1.colA = t2.colA AND (t1.colB & 4096) > 0 AND (colE + 1) < colF;
ERROR 23000: Duplicate entry '3-4433-10005-493' for key 'PRIMARY'

EXPLAIN BASIC SELECT * FROM t2;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t2  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t2.colC], [t2.colA], [t2.colD], [t2.colE], [t2.colF]), filter(nil), rowset=16
      access([t2.colC], [t2.colA], [t2.colD], [t2.colE], [t2.colF]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.colC], [t2.colA], [t2.colD], [t2.colE]), range(MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX)always true
SELECT * FROM t2;
+------+------+-------+------+------+
| colC | colA | colD  | colE | colF |
+------+------+-------+------+------+
|    3 | 4433 | 10005 |  492 |  500 |
|    3 | 4433 | 10005 |  493 |  500 |
|    3 | 4433 | 10005 |  494 |  500 |
|    3 | 4433 | 10005 |  495 |  500 |
|    3 | 4433 | 10005 |  496 |  500 |
|    3 | 4433 | 10005 |  497 |  500 |
|    3 | 4433 | 10009 |  494 |  500 |
|    3 | 4433 | 10011 |  494 |  500 |
|    3 | 4433 | 10013 |  489 |  500 |
+------+------+-------+------+------+
DROP TABLE t1;
DROP TABLE t2;

create table t1 (c1 int, c2 char(6), c3 int);
create table t2 (c1 int, c2 char(6));
EXPLAIN BASIC insert into t1 values (1, "t1c2-1", 10), (2, "t1c2-2", 20);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2, t1.c3)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.c1)], [column_conv(CHAR,utf8mb4_general_ci,length:6,NULL,__values.c2)], [column_conv(INT,
      PS:(11,0),NULL,__values.c3)])
  1 - output([__values.c1], [__values.c2], [__values.c3]), filter(nil)
      values({1, 't1c2-1', 10}, {2, 't1c2-2', 20})
insert into t1 values (1, "t1c2-1", 10), (2, "t1c2-2", 20);
EXPLAIN BASIC update t1 left join t2 on t1.c1 = t2.c1 set t2.c2 = "t2c2-1";
Query Plan
==================================
|ID|OPERATOR                |NAME|
----------------------------------
|0 |UPDATE                  |    |
|1 |└─HASH RIGHT OUTER JOIN |    |
|2 |  ├─TABLE FULL SCAN     |t2  |
|3 |  └─TABLE FULL SCAN     |t1  |
==================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t2: ({t2: (t2.__pk_increment, t2.c1, t2.c2)}), hash_distinct}]),
      update([t2.c2=column_conv(CHAR,utf8mb4_general_ci,length:6,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast('t2c2-1', VARCHAR(1048576))),
       CHAR(1048576)))])
  1 - output([t2.__pk_increment], [t2.c1], [t2.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  2 - output([t2.__pk_increment], [t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.__pk_increment], [t2.c1], [t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update t1 left join t2 on t1.c1 = t2.c1 set t2.c2 = "t2c2-1";
EXPLAIN BASIC update t1 left join t2 on t1.c1 = t2.c1 set t2.c2 = "t2c2-1" where t1.c3 = 10;
Query Plan
==================================
|ID|OPERATOR                |NAME|
----------------------------------
|0 |UPDATE                  |    |
|1 |└─HASH RIGHT OUTER JOIN |    |
|2 |  ├─TABLE FULL SCAN     |t2  |
|3 |  └─TABLE FULL SCAN     |t1  |
==================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t2: ({t2: (t2.__pk_increment, t2.c1, t2.c2)}), hash_distinct}]),
      update([t2.c2=column_conv(CHAR,utf8mb4_general_ci,length:6,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast('t2c2-1', VARCHAR(1048576))),
       CHAR(1048576)))])
  1 - output([t2.__pk_increment], [t2.c1], [t2.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  2 - output([t2.__pk_increment], [t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.__pk_increment], [t2.c1], [t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t1.c1]), filter([t1.c3 = 10]), rowset=16
      access([t1.c1], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update t1 left join t2 on t1.c1 = t2.c1 set t2.c2 = "t2c2-1" where t1.c3 = 10;
drop table t1, t2;

create table t1 (id int not null auto_increment primary key, id_str varchar(32));
EXPLAIN BASIC insert into t1 (id_str) values ("test");
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.id, t1.id_str)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,cast(t1.id.nextval(), INT(-1, 0)))], [column_conv(VARCHAR,utf8mb4_general_ci,length:32,NULL,__values.id_str)])
  1 - output([__values.id_str]), filter(nil)
      values({'test'})
insert into t1 (id_str) values ("test");
EXPLAIN BASIC update t1 set id_str = concat(id_str, id) where id = last_insert_id();
Query Plan
=====================
|ID|OPERATOR   |NAME|
---------------------
|0 |UPDATE     |    |
|1 |└─TABLE GET|t1  |
=====================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.id, t1.id_str)})}]),
      update([t1.id_str=column_conv(VARCHAR,utf8mb4_general_ci,length:32,NULL,concat(t1.id_str, cast(cast(last_insert_id(), INT(11, 0)), VARCHAR(1048576))))])
  1 - output([t1.id], [t1.id_str]), filter(nil), rowset=16
      access([t1.id], [t1.id_str]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.id]), range[1 ; 1], 
      range_cond([t1.id = last_insert_id()])
update t1 set id_str = concat(id_str, id) where id = last_insert_id();
EXPLAIN BASIC select * from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t1.id_str]), filter(nil), rowset=16
      access([t1.id], [t1.id_str]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.id]), range(MIN ; MAX)always true
select * from t1;
+----+--------+
| id | id_str |
+----+--------+
|  1 | test1  |
+----+--------+
drop table t1;

create table t1 (a int, b char(255), key(a, b(20)));
EXPLAIN BASIC insert into t1 values (0, '1');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.__substr20_17)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.a)], [column_conv(CHAR,utf8mb4_general_ci,length:255,NULL,__values.b)], [column_conv(CHAR,
      utf8mb4_general_ci,length:20,NULL,column_conv(CHAR,utf8mb4_general_ci,length:20,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), substr(inner_trim(2,
       cast(' ', VARCHAR(1048576)), cast(column_conv(CHAR,utf8mb4_general_ci,length:255,NULL,__values.b), VARCHAR(1048576))), 1, 20)), CHAR(1048576))))])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({0, '1'})
insert into t1 values (0, '1');
EXPLAIN BASIC update /*+index(t1 a)*/ t1 set b = b + 1 where a = 0;
Query Plan
=============================
|ID|OPERATOR          |NAME |
-----------------------------
|0 |UPDATE            |     |
|1 |└─TABLE RANGE SCAN|t1(a)|
=============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.__substr20_17)})}]),
      update([t1.b=column_conv(CHAR,utf8mb4_general_ci,length:255,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast(cast(t1.b, DOUBLE(-1, -1)) + 
      cast(1, DOUBLE(-1, -1)), VARCHAR(1048576))), CHAR(1048576)))], [t1.__substr20_17=column_conv(CHAR,utf8mb4_general_ci,length:20,NULL,column_conv(CHAR,utf8mb4_general_ci,
      length:20,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), substr(inner_trim(2, cast(' ', VARCHAR(1048576)), cast(column_conv(CHAR,utf8mb4_general_ci,
      length:255,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast(cast(t1.b, DOUBLE(-1, -1)) + cast(1, DOUBLE(-1, -1)), VARCHAR(1048576))), CHAR(1048576))),
       VARCHAR(1048576))), 1, 20)), CHAR(1048576))))])
  1 - output([t1.__pk_increment], [t1.b], [column_conv(CHAR,utf8mb4_general_ci,length:20,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), substr(inner_trim(2,
       cast(' ', VARCHAR(1048576)), cast(t1.b, VARCHAR(1048576))), 1, 20)), CHAR(1048576)))], [t1.a]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.b], [t1.a]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__substr20_17], [t1.__pk_increment]), range(0,MIN,MIN ; 0,MAX,MAX), 
      range_cond([t1.a = 0])
update /*+index(t1 a)*/ t1 set b = b + 1 where a = 0;
EXPLAIN BASIC select * from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.b], [t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+------+------+
| a    | b    |
+------+------+
|    0 | 2    |
+------+------+
drop table t1;

create table t1 (a int, b varchar(10), key b(b(5)));
create table t2 (a int, b varchar(10));

EXPLAIN BASIC insert into t1 values ( 1, 'abcd1e');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.__substr5_17)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.a)], [column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,__values.b)], [column_conv(VARCHAR,
      utf8mb4_general_ci,length:5,NULL,column_conv(VARCHAR,utf8mb4_general_ci,length:5,NULL,substr(column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,__values.b),
       1, 5)))])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 'abcd1e'})
insert into t1 values ( 1, 'abcd1e');
EXPLAIN BASIC insert into t1 values ( 2, 'abcd2e');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.__substr5_17)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.a)], [column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,__values.b)], [column_conv(VARCHAR,
      utf8mb4_general_ci,length:5,NULL,column_conv(VARCHAR,utf8mb4_general_ci,length:5,NULL,substr(column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,__values.b),
       1, 5)))])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({2, 'abcd2e'})
insert into t1 values ( 2, 'abcd2e');
EXPLAIN BASIC insert into t2 values ( 1, 'abcd1e');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.__pk_increment, t2.a, t2.b)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.a)], [column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({1, 'abcd1e'})
insert into t2 values ( 1, 'abcd1e');
EXPLAIN BASIC insert into t2 values ( 2, 'abcd2e');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.__pk_increment, t2.a, t2.b)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.a)], [column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,__values.b)])
  1 - output([__values.a], [__values.b]), filter(nil)
      values({2, 'abcd2e'})
insert into t2 values ( 2, 'abcd2e');
EXPLAIN BASIC update t1, t2 set t1.a = t2.a where t2.b = t1.b;
Query Plan
=============================
|ID|OPERATOR           |NAME|
-----------------------------
|0 |UPDATE             |    |
|1 |└─HASH JOIN        |    |
|2 |  ├─TABLE FULL SCAN|t1  |
|3 |  └─TABLE FULL SCAN|t2  |
=============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.__substr5_17)}), hash_distinct}]),
      update([t1.a=column_conv(INT,PS:(11,0),NULL,t2.a)])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [column_conv(VARCHAR,utf8mb4_general_ci,length:5,NULL,substr(t1.b, 1, 5))], [t2.a]), filter(nil), rowset=16
      equal_conds([t2.b = t1.b]), other_conds(nil)
  2 - output([t1.__pk_increment], [t1.b], [column_conv(VARCHAR,utf8mb4_general_ci,length:5,NULL,substr(t1.b, 1, 5))], [t1.a]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.b], [t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
update t1, t2 set t1.a = t2.a where t2.b = t1.b;
show warnings;
Level	Code	Message
EXPLAIN BASIC select * from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.b], [t1.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+------+--------+
| a    | b      |
+------+--------+
|    1 | abcd1e |
|    2 | abcd2e |
+------+--------+
EXPLAIN BASIC select * from t2;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t2  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
select * from t2;
+------+--------+
| a    | b      |
+------+--------+
|    1 | abcd1e |
|    2 | abcd2e |
+------+--------+
drop table t1, t2;

create table t1(f1 int, f2 int);
create table t2(f3 int, f4 int);
create index idx on t2(f3);
EXPLAIN BASIC insert into t1 values(1,0),(2,0);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.f1, t1.f2)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.f1)], [column_conv(INT,PS:(11,0),NULL,__values.f2)])
  1 - output([__values.f1], [__values.f2]), filter(nil)
      values({1, 0}, {2, 0})
insert into t1 values(1,0),(2,0);
EXPLAIN BASIC insert into t2 values(1,1),(2,2);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.__pk_increment, t2.f3, t2.f4)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.f3)], [column_conv(INT,PS:(11,0),NULL,__values.f4)])
  1 - output([__values.f3], [__values.f4]), filter(nil)
      values({1, 1}, {2, 2})
insert into t2 values(1,1),(2,2);
EXPLAIN BASIC UPDATE t1 SET t1.f2=(SELECT MAX(t2.f4) FROM t2 WHERE t2.f3=t1.f1);
Query Plan
==================================
|ID|OPERATOR               |NAME |
----------------------------------
|0 |UPDATE                 |     |
|1 |└─HASH OUTER JOIN      |     |
|2 |  ├─TABLE FULL SCAN    |t1   |
|3 |  └─SUBPLAN SCAN       |VIEW1|
|4 |    └─HASH GROUP BY    |     |
|5 |      └─TABLE FULL SCAN|t2   |
==================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.f1, t1.f2)})}]),
      update([t1.f2=column_conv(INT,PS:(11,0),NULL,VIEW1.MAX(t2.f4))])
  1 - output([t1.__pk_increment], [t1.f1], [t1.f2], [VIEW1.MAX(t2.f4)]), filter(nil), rowset=16
      equal_conds([VIEW1.t2.f3 = t1.f1]), other_conds(nil)
  2 - output([t1.__pk_increment], [t1.f2], [t1.f1]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.f2], [t1.f1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([VIEW1.MAX(t2.f4)], [VIEW1.t2.f3]), filter(nil), rowset=16
      access([VIEW1.MAX(t2.f4)], [VIEW1.t2.f3])
  4 - output([T_FUN_MAX(t2.f4)], [t2.f3]), filter(nil), rowset=16
      group([t2.f3]), agg_func([T_FUN_MAX(t2.f4)])
  5 - output([t2.f3], [t2.f4]), filter(nil), rowset=16
      access([t2.f3], [t2.f4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
UPDATE t1 SET t1.f2=(SELECT MAX(t2.f4) FROM t2 WHERE t2.f3=t1.f1);
EXPLAIN BASIC select * from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.f1], [t1.f2]), filter(nil), rowset=16
      access([t1.f1], [t1.f2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+------+------+
| f1   | f2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
+------+------+
drop table t1,t2;

create table t1(f1 int);
EXPLAIN BASIC select DATABASE();
Query Plan
====================
|ID|OPERATOR  |NAME|
--------------------
|0 |EXPRESSION|    |
====================
Outputs & filters:
-------------------------------------
  0 - output([database()]), filter(nil)
      values({database()})
select DATABASE();
+------------+
| DATABASE() |
+------------+
| test       |
+------------+
update t1 set f1=1 where count(*)=1;
ERROR HY000: Invalid use of group function
EXPLAIN BASIC select DATABASE();
Query Plan
====================
|ID|OPERATOR  |NAME|
--------------------
|0 |EXPRESSION|    |
====================
Outputs & filters:
-------------------------------------
  0 - output([database()]), filter(nil)
      values({database()})
select DATABASE();
+------------+
| DATABASE() |
+------------+
| test       |
+------------+
delete from t1 where count(*)=1;
ERROR HY000: Invalid use of group function
drop table t1;

create table t1 ( a int, b int default 0, index (a) );
EXPLAIN BASIC insert into t1 (a) values (0),(0),(0),(0),(0),(0),(0),(0);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.a)], [column_conv(INT,PS:(11,0),NULL,0)])
  1 - output([__values.a]), filter(nil)
      values({0}, {0}, {0}, {0}, {0}, {0}, {0}, {0})
insert into t1 (a) values (0),(0),(0),(0),(0),(0),(0),(0);

EXPLAIN BASIC select a from t1 order by a limit 1;
Query Plan
==========================
|ID|OPERATOR       |NAME |
--------------------------
|0 |TABLE FULL SCAN|t1(a)|
==========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p0)
      limit(1), offset(nil), is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
select a from t1 order by a limit 1;
+------+
| a    |
+------+
|    0 |
+------+
EXPLAIN BASIC update t1 set a=9999 order by a limit 1;
Query Plan
============================
|ID|OPERATOR         |NAME |
----------------------------
|0 |UPDATE           |     |
|1 |└─TABLE FULL SCAN|t1(a)|
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NULL,9999)])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.a], [t1.b]), partitions(p0)
      limit(1), offset(nil), is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
update t1 set a=9999 order by a limit 1;
EXPLAIN BASIC update t1 set b=9999 order by a limit 1;
Query Plan
============================
|ID|OPERATOR         |NAME |
----------------------------
|0 |UPDATE           |     |
|1 |└─TABLE FULL SCAN|t1(a)|
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,9999)])
  1 - output([t1.__pk_increment], [t1.b], [t1.a]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.b], [t1.a]), partitions(p0)
      limit(1), offset(nil), is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
update t1 set b=9999 order by a limit 1;
EXPLAIN BASIC delete from t1 order by a limit 1;
Query Plan
============================
|ID|OPERATOR         |NAME |
----------------------------
|0 |DELETE           |     |
|1 |└─TABLE FULL SCAN|t1(a)|
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.a], [t1.b]), partitions(p0)
      limit(1), offset(nil), is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
delete from t1 order by a limit 1;
EXPLAIN BASIC delete from t1 order by a desc limit 1;
Query Plan
====================================
|ID|OPERATOR         |NAME         |
------------------------------------
|0 |DELETE           |             |
|1 |└─TABLE FULL SCAN|t1(a,Reverse)|
====================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.a], [t1.b]), partitions(p0)
      limit(1), offset(nil), is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
delete from t1 order by a desc limit 1;
EXPLAIN BASIC delete from t1 order by a limit 1;
Query Plan
============================
|ID|OPERATOR         |NAME |
----------------------------
|0 |DELETE           |     |
|1 |└─TABLE FULL SCAN|t1(a)|
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.a], [t1.b]), partitions(p0)
      limit(1), offset(nil), is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
delete from t1 order by a limit 1;
EXPLAIN BASIC select * from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+------+------+
| a    | b    |
+------+------+
|    0 |    0 |
|    0 |    0 |
|    0 |    0 |
|    0 |    0 |
|    0 |    0 |
+------+------+
EXPLAIN BASIC update t1 set a=a+10,b=1 order by a limit 3;
Query Plan
============================
|ID|OPERATOR         |NAME |
----------------------------
|0 |UPDATE           |     |
|1 |└─TABLE FULL SCAN|t1(a)|
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NULL,cast(t1.a + 10, INT(-1, 0)))], [t1.b=column_conv(INT,PS:(11,0),NULL,1)])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.a], [t1.b]), partitions(p0)
      limit(3), offset(nil), is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
update t1 set a=a+10,b=1 order by a limit 3;
EXPLAIN BASIC update t1 set a=a+11,b=2 order by a limit 3;
Query Plan
============================
|ID|OPERATOR         |NAME |
----------------------------
|0 |UPDATE           |     |
|1 |└─TABLE FULL SCAN|t1(a)|
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NULL,cast(t1.a + 11, INT(-1, 0)))], [t1.b=column_conv(INT,PS:(11,0),NULL,2)])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.a], [t1.b]), partitions(p0)
      limit(3), offset(nil), is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
update t1 set a=a+11,b=2 order by a limit 3;
EXPLAIN BASIC update t1 set a=a+12,b=3 order by a limit 3;
Query Plan
============================
|ID|OPERATOR         |NAME |
----------------------------
|0 |UPDATE           |     |
|1 |└─TABLE FULL SCAN|t1(a)|
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NULL,cast(t1.a + 12, INT(-1, 0)))], [t1.b=column_conv(INT,PS:(11,0),NULL,3)])
  1 - output([t1.__pk_increment], [t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.a], [t1.b]), partitions(p0)
      limit(3), offset(nil), is_index_back=true, is_global_index=false, 
      range_key([t1.a], [t1.__pk_increment]), range(MIN,MIN ; MAX,MAX)always true
update t1 set a=a+12,b=3 order by a limit 3;
EXPLAIN BASIC select * from t1 order by a;
Query Plan
===========================
|ID|OPERATOR         |NAME|
---------------------------
|0 |SORT             |    |
|1 |└─TABLE FULL SCAN|t1  |
===========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=16
      sort_keys([t1.a, ASC])
  1 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1 order by a;
+------+------+
| a    | b    |
+------+------+
|   11 |    2 |
|   21 |    2 |
|   22 |    3 |
|   22 |    3 |
|   23 |    3 |
+------+------+

drop table t1;

create table t1 (f1 date not null);
EXPLAIN BASIC insert into t1 values('2000-01-01'),('0000-00-00');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.f1)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(MYSQL_DATE,PS:(10,0),NOT NULL,__values.f1)])
  1 - output([__values.f1]), filter(nil)
      values({'2000-01-01'}, {'0000-00-00'})
insert into t1 values('2000-01-01'),('0000-00-00');
EXPLAIN BASIC update t1 set f1='2002-02-02' where f1 is null;
Query Plan
===========================
|ID|OPERATOR         |NAME|
---------------------------
|0 |UPDATE           |    |
|1 |└─TABLE FULL SCAN|t1  |
===========================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.f1)})}]),
      update([t1.f1=column_conv(MYSQL_DATE,PS:(10,0),NOT NULL,'2002-02-02')])
  1 - output([t1.__pk_increment], [t1.f1]), filter([t1.f1 = '0000-00-00']), rowset=16
      access([t1.__pk_increment], [t1.f1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update t1 set f1='2002-02-02' where f1 is null;
EXPLAIN BASIC select * from t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.f1]), filter(nil), rowset=16
      access([t1.f1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
select * from t1;
+------------+
| f1         |
+------------+
| 2000-01-01 |
| 2002-02-02 |
+------------+
drop table t1;

create table t1 (f1 int);
create table t2 (f2 int);
EXPLAIN BASIC insert into t1 values(1),(2);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.f1)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.f1)])
  1 - output([__values.f1]), filter(nil)
      values({1}, {2})
insert into t1 values(1),(2);
EXPLAIN BASIC insert into t2 values(1),(1);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.__pk_increment, t2.f2)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.f2)])
  1 - output([__values.f2]), filter(nil)
      values({1}, {1})
insert into t2 values(1),(1);
EXPLAIN BASIC update t2 set f2=1;
Query Plan
===========================
|ID|OPERATOR         |NAME|
---------------------------
|0 |UPDATE           |    |
|1 |└─TABLE FULL SCAN|t2  |
===========================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t2: ({t2: (t2.__pk_increment, t2.f2)})}]),
      update([t2.f2=column_conv(INT,PS:(11,0),NULL,1)])
  1 - output([t2.__pk_increment], [t2.f2]), filter(nil), rowset=16
      access([t2.__pk_increment], [t2.f2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
update t2 set f2=1;
EXPLAIN BASIC update t1 set f1=1 where f1=3;
Query Plan
===========================
|ID|OPERATOR         |NAME|
---------------------------
|0 |UPDATE           |    |
|1 |└─TABLE FULL SCAN|t1  |
===========================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.f1)})}]),
      update([t1.f1=column_conv(INT,PS:(11,0),NULL,1)])
  1 - output([t1.__pk_increment], [t1.f1]), filter([t1.f1 = 3]), rowset=16
      access([t1.__pk_increment], [t1.f1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update t1 set f1=1 where f1=3;
drop table t1,t2;

create table t1(f1 int, `*f2` int);
EXPLAIN BASIC insert into t1 values (1,1);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.f1, t1.*f2)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.f1)], [column_conv(INT,PS:(11,0),NULL,__values.*f2)])
  1 - output([__values.f1], [__values.*f2]), filter(nil)
      values({1, 1})
insert into t1 values (1,1);
EXPLAIN BASIC update t1 set `*f2`=1;
Query Plan
===========================
|ID|OPERATOR         |NAME|
---------------------------
|0 |UPDATE           |    |
|1 |└─TABLE FULL SCAN|t1  |
===========================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.__pk_increment, t1.f1, t1.*f2)})}]),
      update([t1.*f2=column_conv(INT,PS:(11,0),NULL,1)])
  1 - output([t1.__pk_increment], [t1.*f2], [t1.f1]), filter(nil), rowset=16
      access([t1.__pk_increment], [t1.*f2], [t1.f1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
update t1 set `*f2`=1;
drop table t1;

create table t1(f1 int);
update t1 set f2=1 order by f2;
ERROR 42S22: Unknown column 'f2' in 'field list'
drop table t1;
CREATE TABLE t1 (
  request_id int unsigned NOT NULL auto_increment,
  user_id varchar(12) default NULL,
  time_stamp datetime NOT NULL default '0000-00-00 00:00:00',
  ip_address varchar(15) default NULL,
  PRIMARY KEY (request_id),
  KEY user_id_2 (user_id,time_stamp)
);

EXPLAIN BASIC INSERT INTO t1 (user_id) VALUES ('user1');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.request_id, t1.user_id, t1.time_stamp, t1.ip_address)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,cast(t1.request_id.nextval(), INT UNSIGNED(-1, 0)))], [column_conv(VARCHAR,utf8mb4_general_ci,
      length:12,NULL,__values.user_id)], [column_conv(MYSQL_DATETIME,PS:(19,0),NOT NULL,'0000-00-00 00:00:00')], [column_conv(VARCHAR,utf8mb4_general_ci,length:15,
      NULL,cast(NULL, VARCHAR(1048576)))])
  1 - output([__values.user_id]), filter(nil)
      values({'user1'})
INSERT INTO t1 (user_id) VALUES ('user1');
EXPLAIN BASIC INSERT INTO t1 (user_id) VALUES ('user1');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.request_id, t1.user_id, t1.time_stamp, t1.ip_address)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,cast(t1.request_id.nextval(), INT UNSIGNED(-1, 0)))], [column_conv(VARCHAR,utf8mb4_general_ci,
      length:12,NULL,__values.user_id)], [column_conv(MYSQL_DATETIME,PS:(19,0),NOT NULL,'0000-00-00 00:00:00')], [column_conv(VARCHAR,utf8mb4_general_ci,length:15,
      NULL,cast(NULL, VARCHAR(1048576)))])
  1 - output([__values.user_id]), filter(nil)
      values({'user1'})
INSERT INTO t1 (user_id) VALUES ('user1');
EXPLAIN BASIC INSERT INTO t1 (user_id) VALUES ('user1');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.request_id, t1.user_id, t1.time_stamp, t1.ip_address)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,cast(t1.request_id.nextval(), INT UNSIGNED(-1, 0)))], [column_conv(VARCHAR,utf8mb4_general_ci,
      length:12,NULL,__values.user_id)], [column_conv(MYSQL_DATETIME,PS:(19,0),NOT NULL,'0000-00-00 00:00:00')], [column_conv(VARCHAR,utf8mb4_general_ci,length:15,
      NULL,cast(NULL, VARCHAR(1048576)))])
  1 - output([__values.user_id]), filter(nil)
      values({'user1'})
INSERT INTO t1 (user_id) VALUES ('user1');
EXPLAIN BASIC INSERT INTO t1 (user_id) VALUES ('user1');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.request_id, t1.user_id, t1.time_stamp, t1.ip_address)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,cast(t1.request_id.nextval(), INT UNSIGNED(-1, 0)))], [column_conv(VARCHAR,utf8mb4_general_ci,
      length:12,NULL,__values.user_id)], [column_conv(MYSQL_DATETIME,PS:(19,0),NOT NULL,'0000-00-00 00:00:00')], [column_conv(VARCHAR,utf8mb4_general_ci,length:15,
      NULL,cast(NULL, VARCHAR(1048576)))])
  1 - output([__values.user_id]), filter(nil)
      values({'user1'})
INSERT INTO t1 (user_id) VALUES ('user1');
EXPLAIN BASIC INSERT INTO t1 (user_id) VALUES ('user1');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.request_id, t1.user_id, t1.time_stamp, t1.ip_address)})}]), 
      column_values([column_conv(INT UNSIGNED,PS:(10,0),NOT NULL,cast(t1.request_id.nextval(), INT UNSIGNED(-1, 0)))], [column_conv(VARCHAR,utf8mb4_general_ci,
      length:12,NULL,__values.user_id)], [column_conv(MYSQL_DATETIME,PS:(19,0),NOT NULL,'0000-00-00 00:00:00')], [column_conv(VARCHAR,utf8mb4_general_ci,length:15,
      NULL,cast(NULL, VARCHAR(1048576)))])
  1 - output([__values.user_id]), filter(nil)
      values({'user1'})
INSERT INTO t1 (user_id) VALUES ('user1');
EXPLAIN BASIC SELECT user_id FROM t1 WHERE request_id=9999999999999;
Query Plan
===================
|ID|OPERATOR |NAME|
-------------------
|0 |TABLE GET|t1  |
===================
Outputs & filters:
-------------------------------------
  0 - output([t1.user_id]), filter(nil), rowset=16
      access([t1.user_id]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.request_id]), range(MAX ; MIN)always false, 
      range_cond([t1.request_id = 9999999999999])
SELECT user_id FROM t1 WHERE request_id=9999999999999;
+---------+
| user_id |
+---------+
+---------+
EXPLAIN BASIC SELECT user_id FROM t1 WHERE request_id=999999999999999999999999999999;
Query Plan
===================
|ID|OPERATOR |NAME|
-------------------
|0 |TABLE GET|t1  |
===================
Outputs & filters:
-------------------------------------
  0 - output([t1.user_id]), filter(nil), rowset=16
      access([t1.user_id]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.request_id]), range(MAX ; MIN)always false, 
      range_cond([cast(t1.request_id, DECIMAL_INT(30, 0)) = 999999999999999999999999999999])
SELECT user_id FROM t1 WHERE request_id=999999999999999999999999999999;
+---------+
| user_id |
+---------+
+---------+
EXPLAIN BASIC UPDATE t1 SET user_id=null WHERE request_id=9999999999999;
Query Plan
=====================
|ID|OPERATOR   |NAME|
---------------------
|0 |UPDATE     |    |
|1 |└─TABLE GET|t1  |
=====================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.request_id, t1.user_id, t1.time_stamp, t1.ip_address)})}]),
      update([t1.user_id=column_conv(VARCHAR,utf8mb4_general_ci,length:12,NULL,NULL)])
  1 - output([t1.request_id], [t1.user_id], [t1.time_stamp], [t1.ip_address]), filter(nil), rowset=16
      access([t1.request_id], [t1.user_id], [t1.time_stamp], [t1.ip_address]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.request_id]), range(MAX ; MIN)always false, 
      range_cond([t1.request_id = 9999999999999])
UPDATE t1 SET user_id=null WHERE request_id=9999999999999;
EXPLAIN BASIC UPDATE t1 SET user_id=null WHERE request_id=999999999999999999999999999999;
Query Plan
=====================
|ID|OPERATOR   |NAME|
---------------------
|0 |UPDATE     |    |
|1 |└─TABLE GET|t1  |
=====================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t1: ({t1: (t1.request_id, t1.user_id, t1.time_stamp, t1.ip_address)})}]),
      update([t1.user_id=column_conv(VARCHAR,utf8mb4_general_ci,length:12,NULL,NULL)])
  1 - output([t1.request_id], [t1.user_id], [t1.time_stamp], [t1.ip_address]), filter(nil), rowset=16
      access([t1.request_id], [t1.user_id], [t1.time_stamp], [t1.ip_address]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.request_id]), range(MAX ; MIN)always false, 
      range_cond([cast(t1.request_id, DECIMAL_INT(30, 0)) = 999999999999999999999999999999])
UPDATE t1 SET user_id=null WHERE request_id=999999999999999999999999999999;
DROP TABLE t1;

CREATE TABLE t1 (

  a INT(11),
  quux decimal( 31, 30 ),

  UNIQUE KEY bar (a),
  KEY quux (quux)
);

EXPLAIN BASIC INSERT INTO
 t1 ( a, quux )
VALUES
    ( 1,    1 ),
    ( 2,  0.1 );
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.quux)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.a)], [column_conv(DECIMAL_INT,PS:(31,30),NULL,__values.quux)])
  1 - output([__values.a], [__values.quux]), filter(nil)
      values({1, 1}, {2, 0.1})
INSERT INTO
 t1 ( a, quux )
VALUES
    ( 1,    1 ),
    ( 2,  0.1 );

EXPLAIN BASIC SELECT * FROM t1;
Query Plan
=========================
|ID|OPERATOR       |NAME|
-------------------------
|0 |TABLE FULL SCAN|t1  |
=========================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.quux]), filter(nil), rowset=16
      access([t1.a], [t1.quux]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
SELECT * FROM t1;
+------+----------------------------------+
| a    | quux                             |
+------+----------------------------------+
|    1 | 1.000000000000000000000000000000 |
|    2 | 0.100000000000000000000000000000 |
+------+----------------------------------+

DROP TABLE t1;

## Create the test tables
##insert into t2(a) select a from t2; 
##insert into t2(a) select a from t2;
##insert into t2(a) select a from t2; 
## Check that the number of matched rows is correct when the temporary
## table is small enough to not be converted to MyISAM
##--enable_info
##update t1 join t2 on (t1.a=t2.a) set t1.id=t2.id;
##--disable_info
## Increase table sizes
##insert into t2(a) select a from t2; 
##insert into t1 select * from t2; 
## Check that the number of matched rows is correct when the temporary
## table has to be converted to MyISAM
## Check that the number of matched rows is correct when there are duplicate
## key errors
CREATE TABLE t1 (f1 INTEGER AUTO_INCREMENT, PRIMARY KEY (f1));
CREATE TABLE t2(f1 INTEGER AUTO_INCREMENT, PRIMARY KEY (f1));
EXPLAIN BASIC INSERT INTO t1 VALUES (1);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.f1)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,t1.f1.nextval(column_conv(INT,PS:(11,0),NOT NULL,__values.f1)))])
  1 - output([__values.f1]), filter(nil)
      values({1})
INSERT INTO t1 VALUES (1);
EXPLAIN BASIC INSERT INTO t2 VALUES (1);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.f1)})}]), 
      column_values([column_conv(INT,PS:(11,0),NOT NULL,t2.f1.nextval(column_conv(INT,PS:(11,0),NOT NULL,__values.f1)))])
  1 - output([__values.f1]), filter(nil)
      values({1})
INSERT INTO t2 VALUES (1);

ALTER TABLE t2 COMMENT = 'ABC';
ALTER TABLE t2 COMMENT = 'DEF';

DROP TABLE t1, t2;

#
# Bug#50545: Single table UPDATE IGNORE crashes on join view in
# sql_safe_updates mode.
#
CREATE TABLE t1 ( a INT, KEY( a ) );
EXPLAIN BASIC INSERT INTO t1 VALUES (0), (1);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.a)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.a)])
  1 - output([__values.a]), filter(nil)
      values({0}, {1})
INSERT INTO t1 VALUES (0), (1);
CREATE VIEW v1 AS SELECT t11.a, t12.a AS b FROM t1 t11, t1 t12;
DROP TABLE t1;
DROP VIEW v1;

#
# Bug#54734 assert in Diagnostics_area::set_ok_status
#
#
# Verify that UPDATE does the same number of handler_update
# operations, no matter if there is ORDER BY or not.
#
CREATE TABLE t1 (i INT);
EXPLAIN BASIC INSERT INTO t1 VALUES (10),(11),(12),(13),(14),(15),(16),(17),(18),(19),
                      (20),(21),(22),(23),(24),(25),(26),(27),(28),(29),
                      (30),(31),(32),(33),(34),(35);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t1: ({t1: (t1.__pk_increment, t1.i)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.i)])
  1 - output([__values.i]), filter(nil)
      values({10}, {11}, {12}, {13}, {14}, {15}, {16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}, {33},
       {34}, {35})
INSERT INTO t1 VALUES (10),(11),(12),(13),(14),(15),(16),(17),(18),(19),
                      (20),(21),(22),(23),(24),(25),(26),(27),(28),(29),
                      (30),(31),(32),(33),(34),(35);
CREATE TABLE t2 (a CHAR(2), b CHAR(2), c CHAR(2), d CHAR(2),
                 INDEX idx (a,b,c));

EXPLAIN BASIC INSERT INTO t2 VALUES (10,10,10,10),(11,11,11,11),(12,12,12,12),(13,13,13,13),(14,14,14,14),(15,15,15,15),(16,16,16,16),(17,17,17,17),(18,18,18,18),(19,19,19,19);
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{t2: ({t2: (t2.__pk_increment, t2.a, t2.b, t2.c, t2.d)})}]), 
      column_values([T_HIDDEN_PK], [column_conv(CHAR,utf8mb4_general_ci,length:2,NULL,__values.a)], [column_conv(CHAR,utf8mb4_general_ci,length:2,NULL,__values.b)],
       [column_conv(CHAR,utf8mb4_general_ci,length:2,NULL,__values.c)], [column_conv(CHAR,utf8mb4_general_ci,length:2,NULL,__values.d)])
  1 - output([__values.a], [__values.b], [__values.c], [__values.d]), filter(nil)
      values({10, 10, 10, 10}, {11, 11, 11, 11}, {12, 12, 12, 12}, {13, 13, 13, 13}, {14, 14, 14, 14}, {15, 15, 15, 15}, {16, 16, 16, 16}, {17, 17, 17, 
      17}, {18, 18, 18, 18}, {19, 19, 19, 19})
INSERT INTO t2 VALUES (10,10,10,10),(11,11,11,11),(12,12,12,12),(13,13,13,13),(14,14,14,14),(15,15,15,15),(16,16,16,16),(17,17,17,17),(18,18,18,18),(19,19,19,19);

START TRANSACTION;
EXPLAIN BASIC UPDATE t2 SET d = 10 WHERE b = 10 LIMIT 5;
Query Plan
===========================
|ID|OPERATOR         |NAME|
---------------------------
|0 |UPDATE           |    |
|1 |└─TABLE FULL SCAN|t2  |
===========================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t2: ({t2: (t2.__pk_increment, t2.a, t2.b, t2.c, t2.d)})}]),
      update([t2.d=column_conv(CHAR,utf8mb4_general_ci,length:2,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast(10, VARCHAR(1048576))), CHAR(1048576)))])
  1 - output([t2.__pk_increment], [t2.d], [t2.a], [t2.b], [t2.c]), filter([cast(t2.b, DECIMAL(-1, -1)) = cast(10, DECIMAL(20, 0))]), rowset=16
      access([t2.__pk_increment], [t2.d], [t2.a], [t2.b], [t2.c]), partitions(p0)
      limit(5), offset(nil), is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
UPDATE t2 SET d = 10 WHERE b = 10 LIMIT 5;
ROLLBACK;
START TRANSACTION;
EXPLAIN BASIC UPDATE t2 SET d = 10 WHERE b = 10 ORDER BY a, c LIMIT 5;
Query Plan
=============================
|ID|OPERATOR           |NAME|
-----------------------------
|0 |UPDATE             |    |
|1 |└─TOP-N SORT       |    |
|2 |  └─TABLE FULL SCAN|t2  |
=============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t2: ({t2: (t2.__pk_increment, t2.a, t2.b, t2.c, t2.d)})}]),
      update([t2.d=column_conv(CHAR,utf8mb4_general_ci,length:2,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast(10, VARCHAR(1048576))), CHAR(1048576)))])
  1 - output([t2.__pk_increment], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      sort_keys([t2.a, ASC], [t2.c, ASC]), topn(5)
  2 - output([t2.__pk_increment], [t2.d], [t2.a], [t2.b], [t2.c]), filter([cast(t2.b, DECIMAL(-1, -1)) = cast(10, DECIMAL(20, 0))]), rowset=16
      access([t2.__pk_increment], [t2.d], [t2.a], [t2.b], [t2.c]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
UPDATE t2 SET d = 10 WHERE b = 10 ORDER BY a, c LIMIT 5;
ROLLBACK;

Same test with a different UPDATE.
ALTER TABLE t2 DROP INDEX idx;
alter table t2 ADD INDEX idx2 (a, b);
START TRANSACTION;
EXPLAIN BASIC UPDATE t2 SET c = 10 LIMIT 5;
Query Plan
===========================
|ID|OPERATOR         |NAME|
---------------------------
|0 |UPDATE           |    |
|1 |└─TABLE FULL SCAN|t2  |
===========================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t2: ({t2: (t2.__pk_increment, t2.a, t2.b, t2.c, t2.d)})}]),
      update([t2.c=column_conv(CHAR,utf8mb4_general_ci,length:2,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast(10, VARCHAR(1048576))), CHAR(1048576)))])
  1 - output([t2.__pk_increment], [t2.c], [t2.a], [t2.b], [t2.d]), filter(nil), rowset=16
      access([t2.__pk_increment], [t2.c], [t2.a], [t2.b], [t2.d]), partitions(p0)
      limit(5), offset(nil), is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
UPDATE t2 SET c = 10 LIMIT 5;
ROLLBACK;
START TRANSACTION;
EXPLAIN BASIC UPDATE t2 SET c = 10 ORDER BY a, b DESC LIMIT 5;
Query Plan
=================================
|ID|OPERATOR           |NAME    |
---------------------------------
|0 |UPDATE             |        |
|1 |└─TOP-N SORT       |        |
|2 |  └─TABLE FULL SCAN|t2(idx2)|
=================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{t2: ({t2: (t2.__pk_increment, t2.a, t2.b, t2.c, t2.d)})}]),
      update([t2.c=column_conv(CHAR,utf8mb4_general_ci,length:2,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast(10, VARCHAR(1048576))), CHAR(1048576)))])
  1 - output([t2.__pk_increment], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      sort_keys([t2.a, ASC], [t2.b, DESC]), topn(5), prefix_pos(1)
  2 - output([t2.__pk_increment], [t2.c], [t2.a], [t2.b], [t2.d]), filter(nil), rowset=16
      access([t2.__pk_increment], [t2.c], [t2.a], [t2.b], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
UPDATE t2 SET c = 10 ORDER BY a, b DESC LIMIT 5;
ROLLBACK;
DROP TABLE t1, t2;

drop table if exists table10_bigint;
CREATE TABLE table10_bigint (col_char_34_key char(34),col_char_24 char(24),col_char_48_unique_index char(48),col_char_26_unique_index char(26),col_char_36 char(36),col_char_26 char(26),col_char_20 char(20),col_char_37 char(37),col_char_29_key char(29),pk bigint,col_char_20_unique_index char(20),col_char_39 char(39),col_char_23 char(23),col_char_28_key char(28),col_char_45 char(45),col_char_40_unique_index char(40),col_char_43_unique_index char(43),col_char_21_key char(21),col_char_29 char(29),col_char_25_key char(25),col_timestamp_6 timestamp(6) NULL DEFAULT NULL,col_char_32_key char(32),col_char_22 char(22),col_char_45_key char(45),col_char_20_key char(20),col_char_35_key char(35),col_char_22_unique_index char(22),col_char_46_unique_index char(46),col_char_28_unique_index char(28),col_char_25 char(25),col_char_42_unique_index char(42),col_char_30_key char(30),col_char_33_unique_index char(33),col_char_42 char(42),col_char_23_key char(23),col_char_36_key char(36),col_timestamp_6_unique_index timestamp(6) NULL DEFAULT NULL,col_char_37_unique_index char(37),col_char_46_key char(46),col_char_32_unique_index char(32),col_char_34_unique_index char(34),col_char_28 char(28),col_char_25_unique_index char(25),col_char_39_unique_index char(39),col_char_30 char(30),col_char_36_unique_index char(36),col_char_47_key char(47),col_char_41_unique_index char(41),col_char_42_key char(42),col_char_48 char(48),col_char_46 char(46),col_char_48_key char(48),col_char_22_key char(22),col_bigint_unique_index bigint,col_char_38 char(38),col_char_21 char(21),col_char_43 char(43),col_char_27 char(27),col_char_40_key char(40),col_char_40 char(40),col_char_47_unique_index char(47),col_char_21_unique_index char(21),col_char_33 char(33),col_char_27_unique_index char(27),col_char_44_key char(44),col_char_35_unique_index char(35),col_char_26_key char(26),col_bigint bigint,col_char_30_unique_index char(30),col_char_45_unique_index char(45),col_char_32 char(32),col_char_41 char(41),col_char_24_unique_index char(24),col_char_31_unique_index char(31),col_char_33_key char(33),col_char_39_key char(39),col_char_35 char(35),col_timestamp_6_key timestamp(6) NULL DEFAULT NULL,col_char_44 char(44),col_char_31 char(31),col_char_43_key char(43),col_char_29_unique_index char(29),col_char_37_key char(37),col_char_23_unique_index char(23),col_char_41_key char(41),col_char_38_unique_index char(38),col_char_44_unique_index char(44),col_bigint_key bigint,col_char_24_key char(24),col_char_27_key char(27),col_char_38_key char(38),col_char_47 char(47),col_char_31_key char(31),col_char_34 char(34),key idx46(col_char_34_key ),key idx31(col_char_29_key ),primary key (pk)) ;
EXPLAIN BASIC insert into table10_bigint values('a', 'b','c','d','e', 'f', 'h','i','j',1,'a', 'b','c','d','e', 'f', 'h','i','j','k','2001-03-04 10:10:10', 'a', 'b','c','d','e', 'f', 'h','i','j','k','j','i','o','p','u','2001-03-04 10:10:10','a', 'b','c','d','e', 'f',     'h','i','j','k','j','i','o','p','u','y',2,'a', 'b','c','d','e', 'f','h','i','j','k','j','i','o',3,'a', 'b','c','d','e', 'f', 'h','i','j','2001-03-04 10:10:10','a', 'b','c','d','e', 'f', 'h','i','j',4,'a', 'b','c','d','e', 'f');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{table10_bigint: ({table10_bigint: (table10_bigint.pk, table10_bigint.col_char_34_key, table10_bigint.col_char_24, table10_bigint.col_char_48_unique_index,
       table10_bigint.col_char_26_unique_index, table10_bigint.col_char_36, table10_bigint.col_char_26, table10_bigint.col_char_20, table10_bigint.col_char_37,
       table10_bigint.col_char_29_key, table10_bigint.col_char_20_unique_index, table10_bigint.col_char_39, table10_bigint.col_char_23, table10_bigint.col_char_28_key,
       table10_bigint.col_char_45, table10_bigint.col_char_40_unique_index, table10_bigint.col_char_43_unique_index, table10_bigint.col_char_21_key, table10_bigint.col_char_29,
       table10_bigint.col_char_25_key, table10_bigint.col_timestamp_6, table10_bigint.col_char_32_key, table10_bigint.col_char_22, table10_bigint.col_char_45_key,
       table10_bigint.col_char_20_key, table10_bigint.col_char_35_key, table10_bigint.col_char_22_unique_index, table10_bigint.col_char_46_unique_index, table10_bigint.col_char_28_unique_index,
       table10_bigint.col_char_25, table10_bigint.col_char_42_unique_index, table10_bigint.col_char_30_key, table10_bigint.col_char_33_unique_index, table10_bigint.col_char_42,
       table10_bigint.col_char_23_key, table10_bigint.col_char_36_key, table10_bigint.col_timestamp_6_unique_index, table10_bigint.col_char_37_unique_index, table10_bigint.col_char_46_key,
       table10_bigint.col_char_32_unique_index, table10_bigint.col_char_34_unique_index, table10_bigint.col_char_28, table10_bigint.col_char_25_unique_index, 
      table10_bigint.col_char_39_unique_index, table10_bigint.col_char_30, table10_bigint.col_char_36_unique_index, table10_bigint.col_char_47_key, table10_bigint.col_char_41_unique_index,
       table10_bigint.col_char_42_key, table10_bigint.col_char_48, table10_bigint.col_char_46, table10_bigint.col_char_48_key, table10_bigint.col_char_22_key,
       table10_bigint.col_bigint_unique_index, table10_bigint.col_char_38, table10_bigint.col_char_21, table10_bigint.col_char_43, table10_bigint.col_char_27,
       table10_bigint.col_char_40_key, table10_bigint.col_char_40, table10_bigint.col_char_47_unique_index, table10_bigint.col_char_21_unique_index, table10_bigint.col_char_33,
       table10_bigint.col_char_27_unique_index, table10_bigint.col_char_44_key, table10_bigint.col_char_35_unique_index, table10_bigint.col_char_26_key, table10_bigint.col_bigint,
       table10_bigint.col_char_30_unique_index, table10_bigint.col_char_45_unique_index, table10_bigint.col_char_32, table10_bigint.col_char_41, table10_bigint.col_char_24_unique_index,
       table10_bigint.col_char_31_unique_index, table10_bigint.col_char_33_key, table10_bigint.col_char_39_key, table10_bigint.col_char_35, table10_bigint.col_timestamp_6_key,
       table10_bigint.col_char_44, table10_bigint.col_char_31, table10_bigint.col_char_43_key, table10_bigint.col_char_29_unique_index, table10_bigint.col_char_37_key,
       table10_bigint.col_char_23_unique_index, table10_bigint.col_char_41_key, table10_bigint.col_char_38_unique_index, table10_bigint.col_char_44_unique_index,
       table10_bigint.col_bigint_key, table10_bigint.col_char_24_key, table10_bigint.col_char_27_key, table10_bigint.col_char_38_key, table10_bigint.col_char_47,
       table10_bigint.col_char_31_key, table10_bigint.col_char_34)})}]), 
      column_values([column_conv(BIGINT,PS:(20,0),NOT NULL,__values.pk)], [column_conv(CHAR,utf8mb4_general_ci,length:34,NULL,__values.col_char_34_key)],
       [column_conv(CHAR,utf8mb4_general_ci,length:24,NULL,__values.col_char_24)], [column_conv(CHAR,utf8mb4_general_ci,length:48,NULL,__values.col_char_48_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:26,NULL,__values.col_char_26_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:36,NULL,__values.col_char_36)],
       [column_conv(CHAR,utf8mb4_general_ci,length:26,NULL,__values.col_char_26)], [column_conv(CHAR,utf8mb4_general_ci,length:20,NULL,__values.col_char_20)],
       [column_conv(CHAR,utf8mb4_general_ci,length:37,NULL,__values.col_char_37)], [column_conv(CHAR,utf8mb4_general_ci,length:29,NULL,__values.col_char_29_key)],
       [column_conv(CHAR,utf8mb4_general_ci,length:20,NULL,__values.col_char_20_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:39,NULL,__values.col_char_39)],
       [column_conv(CHAR,utf8mb4_general_ci,length:23,NULL,__values.col_char_23)], [column_conv(CHAR,utf8mb4_general_ci,length:28,NULL,__values.col_char_28_key)],
       [column_conv(CHAR,utf8mb4_general_ci,length:45,NULL,__values.col_char_45)], [column_conv(CHAR,utf8mb4_general_ci,length:40,NULL,__values.col_char_40_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:43,NULL,__values.col_char_43_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:21,NULL,__values.col_char_21_key)],
       [column_conv(CHAR,utf8mb4_general_ci,length:29,NULL,__values.col_char_29)], [column_conv(CHAR,utf8mb4_general_ci,length:25,NULL,__values.col_char_25_key)],
       [column_conv(TIMESTAMP,PS:(25,6),NULL,__values.col_timestamp_6)], [column_conv(CHAR,utf8mb4_general_ci,length:32,NULL,__values.col_char_32_key)], [column_conv(CHAR,
      utf8mb4_general_ci,length:22,NULL,__values.col_char_22)], [column_conv(CHAR,utf8mb4_general_ci,length:45,NULL,__values.col_char_45_key)], [column_conv(CHAR,
      utf8mb4_general_ci,length:20,NULL,__values.col_char_20_key)], [column_conv(CHAR,utf8mb4_general_ci,length:35,NULL,__values.col_char_35_key)], [column_conv(CHAR,
      utf8mb4_general_ci,length:22,NULL,__values.col_char_22_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:46,NULL,__values.col_char_46_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:28,NULL,__values.col_char_28_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:25,NULL,__values.col_char_25)],
       [column_conv(CHAR,utf8mb4_general_ci,length:42,NULL,__values.col_char_42_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:30,NULL,__values.col_char_30_key)],
       [column_conv(CHAR,utf8mb4_general_ci,length:33,NULL,__values.col_char_33_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:42,NULL,__values.col_char_42)],
       [column_conv(CHAR,utf8mb4_general_ci,length:23,NULL,__values.col_char_23_key)], [column_conv(CHAR,utf8mb4_general_ci,length:36,NULL,__values.col_char_36_key)],
       [column_conv(TIMESTAMP,PS:(25,6),NULL,__values.col_timestamp_6_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:37,NULL,__values.col_char_37_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:46,NULL,__values.col_char_46_key)], [column_conv(CHAR,utf8mb4_general_ci,length:32,NULL,__values.col_char_32_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:34,NULL,__values.col_char_34_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:28,NULL,__values.col_char_28)],
       [column_conv(CHAR,utf8mb4_general_ci,length:25,NULL,__values.col_char_25_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:39,NULL,__values.col_char_39_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:30,NULL,__values.col_char_30)], [column_conv(CHAR,utf8mb4_general_ci,length:36,NULL,__values.col_char_36_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:47,NULL,__values.col_char_47_key)], [column_conv(CHAR,utf8mb4_general_ci,length:41,NULL,__values.col_char_41_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:42,NULL,__values.col_char_42_key)], [column_conv(CHAR,utf8mb4_general_ci,length:48,NULL,__values.col_char_48)],
       [column_conv(CHAR,utf8mb4_general_ci,length:46,NULL,__values.col_char_46)], [column_conv(CHAR,utf8mb4_general_ci,length:48,NULL,__values.col_char_48_key)],
       [column_conv(CHAR,utf8mb4_general_ci,length:22,NULL,__values.col_char_22_key)], [column_conv(BIGINT,PS:(20,0),NULL,__values.col_bigint_unique_index)], 
      [column_conv(CHAR,utf8mb4_general_ci,length:38,NULL,__values.col_char_38)], [column_conv(CHAR,utf8mb4_general_ci,length:21,NULL,__values.col_char_21)], 
      [column_conv(CHAR,utf8mb4_general_ci,length:43,NULL,__values.col_char_43)], [column_conv(CHAR,utf8mb4_general_ci,length:27,NULL,__values.col_char_27)], 
      [column_conv(CHAR,utf8mb4_general_ci,length:40,NULL,__values.col_char_40_key)], [column_conv(CHAR,utf8mb4_general_ci,length:40,NULL,__values.col_char_40)],
       [column_conv(CHAR,utf8mb4_general_ci,length:47,NULL,__values.col_char_47_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:21,NULL,__values.col_char_21_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:33,NULL,__values.col_char_33)], [column_conv(CHAR,utf8mb4_general_ci,length:27,NULL,__values.col_char_27_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:44,NULL,__values.col_char_44_key)], [column_conv(CHAR,utf8mb4_general_ci,length:35,NULL,__values.col_char_35_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:26,NULL,__values.col_char_26_key)], [column_conv(BIGINT,PS:(20,0),NULL,__values.col_bigint)], [column_conv(CHAR,
      utf8mb4_general_ci,length:30,NULL,__values.col_char_30_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:45,NULL,__values.col_char_45_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:32,NULL,__values.col_char_32)], [column_conv(CHAR,utf8mb4_general_ci,length:41,NULL,__values.col_char_41)],
       [column_conv(CHAR,utf8mb4_general_ci,length:24,NULL,__values.col_char_24_unique_index)], [column_conv(CHAR,utf8mb4_general_ci,length:31,NULL,__values.col_char_31_unique_index)],
       [column_conv(CHAR,utf8mb4_general_ci,length:33,NULL,__values.col_char_33_key)], [column_conv(CHAR,utf8mb4_general_ci,length:39,NULL,__values.col_char_39_key)],
       [column_conv(CHAR,utf8mb4_general_ci,length:35,NULL,__values.col_char_35)], [column_conv(TIMESTAMP,PS:(25,6),NULL,__values.col_timestamp_6_key)], [column_conv(CHAR,
      utf8mb4_general_ci,length:44,NULL,__values.col_char_44)], [column_conv(CHAR,utf8mb4_general_ci,length:31,NULL,__values.col_char_31)], [column_conv(CHAR,
      utf8mb4_general_ci,length:43,NULL,__values.col_char_43_key)], [column_conv(CHAR,utf8mb4_general_ci,length:29,NULL,__values.col_char_29_unique_index)], [column_conv(CHAR,
      utf8mb4_general_ci,length:37,NULL,__values.col_char_37_key)], [column_conv(CHAR,utf8mb4_general_ci,length:23,NULL,__values.col_char_23_unique_index)], [column_conv(CHAR,
      utf8mb4_general_ci,length:41,NULL,__values.col_char_41_key)], [column_conv(CHAR,utf8mb4_general_ci,length:38,NULL,__values.col_char_38_unique_index)], [column_conv(CHAR,
      utf8mb4_general_ci,length:44,NULL,__values.col_char_44_unique_index)], [column_conv(BIGINT,PS:(20,0),NULL,__values.col_bigint_key)], [column_conv(CHAR,utf8mb4_general_ci,
      length:24,NULL,__values.col_char_24_key)], [column_conv(CHAR,utf8mb4_general_ci,length:27,NULL,__values.col_char_27_key)], [column_conv(CHAR,utf8mb4_general_ci,
      length:38,NULL,__values.col_char_38_key)], [column_conv(CHAR,utf8mb4_general_ci,length:47,NULL,__values.col_char_47)], [column_conv(CHAR,utf8mb4_general_ci,
      length:31,NULL,__values.col_char_31_key)], [column_conv(CHAR,utf8mb4_general_ci,length:34,NULL,__values.col_char_34)])
  1 - output([__values.col_char_34_key], [__values.col_char_24], [__values.col_char_48_unique_index], [__values.col_char_26_unique_index], [__values.col_char_36],
       [__values.col_char_26], [__values.col_char_20], [__values.col_char_37], [__values.col_char_29_key], [__values.pk], [__values.col_char_20_unique_index],
       [__values.col_char_39], [__values.col_char_23], [__values.col_char_28_key], [__values.col_char_45], [__values.col_char_40_unique_index], [__values.col_char_43_unique_index],
       [__values.col_char_21_key], [__values.col_char_29], [__values.col_char_25_key], [__values.col_timestamp_6], [__values.col_char_32_key], [__values.col_char_22],
       [__values.col_char_45_key], [__values.col_char_20_key], [__values.col_char_35_key], [__values.col_char_22_unique_index], [__values.col_char_46_unique_index],
       [__values.col_char_28_unique_index], [__values.col_char_25], [__values.col_char_42_unique_index], [__values.col_char_30_key], [__values.col_char_33_unique_index],
       [__values.col_char_42], [__values.col_char_23_key], [__values.col_char_36_key], [__values.col_timestamp_6_unique_index], [__values.col_char_37_unique_index],
       [__values.col_char_46_key], [__values.col_char_32_unique_index], [__values.col_char_34_unique_index], [__values.col_char_28], [__values.col_char_25_unique_index],
       [__values.col_char_39_unique_index], [__values.col_char_30], [__values.col_char_36_unique_index], [__values.col_char_47_key], [__values.col_char_41_unique_index],
       [__values.col_char_42_key], [__values.col_char_48], [__values.col_char_46], [__values.col_char_48_key], [__values.col_char_22_key], [__values.col_bigint_unique_index],
       [__values.col_char_38], [__values.col_char_21], [__values.col_char_43], [__values.col_char_27], [__values.col_char_40_key], [__values.col_char_40], [__values.col_char_47_unique_index],
       [__values.col_char_21_unique_index], [__values.col_char_33], [__values.col_char_27_unique_index], [__values.col_char_44_key], [__values.col_char_35_unique_index],
       [__values.col_char_26_key], [__values.col_bigint], [__values.col_char_30_unique_index], [__values.col_char_45_unique_index], [__values.col_char_32], [__values.col_char_41],
       [__values.col_char_24_unique_index], [__values.col_char_31_unique_index], [__values.col_char_33_key], [__values.col_char_39_key], [__values.col_char_35],
       [__values.col_timestamp_6_key], [__values.col_char_44], [__values.col_char_31], [__values.col_char_43_key], [__values.col_char_29_unique_index], [__values.col_char_37_key],
       [__values.col_char_23_unique_index], [__values.col_char_41_key], [__values.col_char_38_unique_index], [__values.col_char_44_unique_index], [__values.col_bigint_key],
       [__values.col_char_24_key], [__values.col_char_27_key], [__values.col_char_38_key], [__values.col_char_47], [__values.col_char_31_key], [__values.col_char_34]), filter(nil)
      values({'a', 'b', 'c', 'd', 'e', 'f', 'h', 'i', 'j', 1, 'a', 'b', 'c', 'd', 'e', 'f', 'h', 'i', 'j', 'k', '2001-03-04 10:10:10', 'a', 'b', 'c', 'd',
       'e', 'f', 'h', 'i', 'j', 'k', 'j', 'i', 'o', 'p', 'u', '2001-03-04 10:10:10', 'a', 'b', 'c', 'd', 'e', 'f', 'h', 'i', 'j', 'k', 'j', 'i', 'o', 'p', 'u',
       'y', 2, 'a', 'b', 'c', 'd', 'e', 'f', 'h', 'i', 'j', 'k', 'j', 'i', 'o', 3, 'a', 'b', 'c', 'd', 'e', 'f', 'h', 'i', 'j', '2001-03-04 10:10:10', 'a', 'b',
       'c', 'd', 'e', 'f', 'h', 'i', 'j', 4, 'a', 'b', 'c', 'd', 'e', 'f'})
insert into table10_bigint values('a', 'b','c','d','e', 'f', 'h','i','j',1,'a', 'b','c','d','e', 'f', 'h','i','j','k','2001-03-04 10:10:10', 'a', 'b','c','d','e', 'f', 'h','i','j','k','j','i','o','p','u','2001-03-04 10:10:10','a', 'b','c','d','e', 'f',     'h','i','j','k','j','i','o','p','u','y',2,'a', 'b','c','d','e', 'f','h','i','j','k','j','i','o',3,'a', 'b','c','d','e', 'f', 'h','i','j','2001-03-04 10:10:10','a', 'b','c','d','e', 'f', 'h','i','j',4,'a', 'b','c','d','e', 'f');
EXPLAIN BASIC UPDATE table10_bigint SET col_char_20 = 'a' ;
Query Plan
=====================================
|ID|OPERATOR         |NAME          |
-------------------------------------
|0 |UPDATE           |              |
|1 |└─TABLE FULL SCAN|table10_bigint|
=====================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{table10_bigint: ({table10_bigint: (table10_bigint.pk, table10_bigint.col_char_34_key, table10_bigint.col_char_24, table10_bigint.col_char_48_unique_index,
       table10_bigint.col_char_26_unique_index, table10_bigint.col_char_36, table10_bigint.col_char_26, table10_bigint.col_char_20, table10_bigint.col_char_37,
       table10_bigint.col_char_29_key, table10_bigint.col_char_20_unique_index, table10_bigint.col_char_39, table10_bigint.col_char_23, table10_bigint.col_char_28_key,
       table10_bigint.col_char_45, table10_bigint.col_char_40_unique_index, table10_bigint.col_char_43_unique_index, table10_bigint.col_char_21_key, table10_bigint.col_char_29,
       table10_bigint.col_char_25_key, table10_bigint.col_timestamp_6, table10_bigint.col_char_32_key, table10_bigint.col_char_22, table10_bigint.col_char_45_key,
       table10_bigint.col_char_20_key, table10_bigint.col_char_35_key, table10_bigint.col_char_22_unique_index, table10_bigint.col_char_46_unique_index, table10_bigint.col_char_28_unique_index,
       table10_bigint.col_char_25, table10_bigint.col_char_42_unique_index, table10_bigint.col_char_30_key, table10_bigint.col_char_33_unique_index, table10_bigint.col_char_42,
       table10_bigint.col_char_23_key, table10_bigint.col_char_36_key, table10_bigint.col_timestamp_6_unique_index, table10_bigint.col_char_37_unique_index, table10_bigint.col_char_46_key,
       table10_bigint.col_char_32_unique_index, table10_bigint.col_char_34_unique_index, table10_bigint.col_char_28, table10_bigint.col_char_25_unique_index, 
      table10_bigint.col_char_39_unique_index, table10_bigint.col_char_30, table10_bigint.col_char_36_unique_index, table10_bigint.col_char_47_key, table10_bigint.col_char_41_unique_index,
       table10_bigint.col_char_42_key, table10_bigint.col_char_48, table10_bigint.col_char_46, table10_bigint.col_char_48_key, table10_bigint.col_char_22_key,
       table10_bigint.col_bigint_unique_index, table10_bigint.col_char_38, table10_bigint.col_char_21, table10_bigint.col_char_43, table10_bigint.col_char_27,
       table10_bigint.col_char_40_key, table10_bigint.col_char_40, table10_bigint.col_char_47_unique_index, table10_bigint.col_char_21_unique_index, table10_bigint.col_char_33,
       table10_bigint.col_char_27_unique_index, table10_bigint.col_char_44_key, table10_bigint.col_char_35_unique_index, table10_bigint.col_char_26_key, table10_bigint.col_bigint,
       table10_bigint.col_char_30_unique_index, table10_bigint.col_char_45_unique_index, table10_bigint.col_char_32, table10_bigint.col_char_41, table10_bigint.col_char_24_unique_index,
       table10_bigint.col_char_31_unique_index, table10_bigint.col_char_33_key, table10_bigint.col_char_39_key, table10_bigint.col_char_35, table10_bigint.col_timestamp_6_key,
       table10_bigint.col_char_44, table10_bigint.col_char_31, table10_bigint.col_char_43_key, table10_bigint.col_char_29_unique_index, table10_bigint.col_char_37_key,
       table10_bigint.col_char_23_unique_index, table10_bigint.col_char_41_key, table10_bigint.col_char_38_unique_index, table10_bigint.col_char_44_unique_index,
       table10_bigint.col_bigint_key, table10_bigint.col_char_24_key, table10_bigint.col_char_27_key, table10_bigint.col_char_38_key, table10_bigint.col_char_47,
       table10_bigint.col_char_31_key, table10_bigint.col_char_34)})}]),
      update([table10_bigint.col_char_20=column_conv(CHAR,utf8mb4_general_ci,length:20,NULL,cast(inner_trim(2, cast(' ', VARCHAR(1048576)), cast('a', VARCHAR(1048576))),
       CHAR(1048576)))])
  1 - output([table10_bigint.pk], [table10_bigint.col_char_20], [table10_bigint.col_char_34_key], [table10_bigint.col_char_24], [table10_bigint.col_char_48_unique_index],
       [table10_bigint.col_char_26_unique_index], [table10_bigint.col_char_36], [table10_bigint.col_char_26], [table10_bigint.col_char_37], [table10_bigint.col_char_29_key],
       [table10_bigint.col_char_20_unique_index], [table10_bigint.col_char_39], [table10_bigint.col_char_23], [table10_bigint.col_char_28_key], [table10_bigint.col_char_45],
       [table10_bigint.col_char_40_unique_index], [table10_bigint.col_char_43_unique_index], [table10_bigint.col_char_21_key], [table10_bigint.col_char_29], [table10_bigint.col_char_25_key],
       [table10_bigint.col_timestamp_6], [table10_bigint.col_char_32_key], [table10_bigint.col_char_22], [table10_bigint.col_char_45_key], [table10_bigint.col_char_20_key],
       [table10_bigint.col_char_35_key], [table10_bigint.col_char_22_unique_index], [table10_bigint.col_char_46_unique_index], [table10_bigint.col_char_28_unique_index],
       [table10_bigint.col_char_25], [table10_bigint.col_char_42_unique_index], [table10_bigint.col_char_30_key], [table10_bigint.col_char_33_unique_index], [table10_bigint.col_char_42],
       [table10_bigint.col_char_23_key], [table10_bigint.col_char_36_key], [table10_bigint.col_timestamp_6_unique_index], [table10_bigint.col_char_37_unique_index],
       [table10_bigint.col_char_46_key], [table10_bigint.col_char_32_unique_index], [table10_bigint.col_char_34_unique_index], [table10_bigint.col_char_28], [table10_bigint.col_char_25_unique_index],
       [table10_bigint.col_char_39_unique_index], [table10_bigint.col_char_30], [table10_bigint.col_char_36_unique_index], [table10_bigint.col_char_47_key], [table10_bigint.col_char_41_unique_index],
       [table10_bigint.col_char_42_key], [table10_bigint.col_char_48], [table10_bigint.col_char_46], [table10_bigint.col_char_48_key], [table10_bigint.col_char_22_key],
       [table10_bigint.col_bigint_unique_index], [table10_bigint.col_char_38], [table10_bigint.col_char_21], [table10_bigint.col_char_43], [table10_bigint.col_char_27],
       [table10_bigint.col_char_40_key], [table10_bigint.col_char_40], [table10_bigint.col_char_47_unique_index], [table10_bigint.col_char_21_unique_index], [table10_bigint.col_char_33],
       [table10_bigint.col_char_27_unique_index], [table10_bigint.col_char_44_key], [table10_bigint.col_char_35_unique_index], [table10_bigint.col_char_26_key],
       [table10_bigint.col_bigint], [table10_bigint.col_char_30_unique_index], [table10_bigint.col_char_45_unique_index], [table10_bigint.col_char_32], [table10_bigint.col_char_41],
       [table10_bigint.col_char_24_unique_index], [table10_bigint.col_char_31_unique_index], [table10_bigint.col_char_33_key], [table10_bigint.col_char_39_key],
       [table10_bigint.col_char_35], [table10_bigint.col_timestamp_6_key], [table10_bigint.col_char_44], [table10_bigint.col_char_31], [table10_bigint.col_char_43_key],
       [table10_bigint.col_char_29_unique_index], [table10_bigint.col_char_37_key], [table10_bigint.col_char_23_unique_index], [table10_bigint.col_char_41_key],
       [table10_bigint.col_char_38_unique_index], [table10_bigint.col_char_44_unique_index], [table10_bigint.col_bigint_key], [table10_bigint.col_char_24_key],
       [table10_bigint.col_char_27_key], [table10_bigint.col_char_38_key], [table10_bigint.col_char_47], [table10_bigint.col_char_31_key], [table10_bigint.col_char_34]), filter(nil), rowset=16
      access([table10_bigint.pk], [table10_bigint.col_char_20], [table10_bigint.col_char_34_key], [table10_bigint.col_char_24], [table10_bigint.col_char_48_unique_index],
       [table10_bigint.col_char_26_unique_index], [table10_bigint.col_char_36], [table10_bigint.col_char_26], [table10_bigint.col_char_37], [table10_bigint.col_char_29_key],
       [table10_bigint.col_char_20_unique_index], [table10_bigint.col_char_39], [table10_bigint.col_char_23], [table10_bigint.col_char_28_key], [table10_bigint.col_char_45],
       [table10_bigint.col_char_40_unique_index], [table10_bigint.col_char_43_unique_index], [table10_bigint.col_char_21_key], [table10_bigint.col_char_29], [table10_bigint.col_char_25_key],
       [table10_bigint.col_timestamp_6], [table10_bigint.col_char_32_key], [table10_bigint.col_char_22], [table10_bigint.col_char_45_key], [table10_bigint.col_char_20_key],
       [table10_bigint.col_char_35_key], [table10_bigint.col_char_22_unique_index], [table10_bigint.col_char_46_unique_index], [table10_bigint.col_char_28_unique_index],
       [table10_bigint.col_char_25], [table10_bigint.col_char_42_unique_index], [table10_bigint.col_char_30_key], [table10_bigint.col_char_33_unique_index], [table10_bigint.col_char_42],
       [table10_bigint.col_char_23_key], [table10_bigint.col_char_36_key], [table10_bigint.col_timestamp_6_unique_index], [table10_bigint.col_char_37_unique_index],
       [table10_bigint.col_char_46_key], [table10_bigint.col_char_32_unique_index], [table10_bigint.col_char_34_unique_index], [table10_bigint.col_char_28], [table10_bigint.col_char_25_unique_index],
       [table10_bigint.col_char_39_unique_index], [table10_bigint.col_char_30], [table10_bigint.col_char_36_unique_index], [table10_bigint.col_char_47_key], [table10_bigint.col_char_41_unique_index],
       [table10_bigint.col_char_42_key], [table10_bigint.col_char_48], [table10_bigint.col_char_46], [table10_bigint.col_char_48_key], [table10_bigint.col_char_22_key],
       [table10_bigint.col_bigint_unique_index], [table10_bigint.col_char_38], [table10_bigint.col_char_21], [table10_bigint.col_char_43], [table10_bigint.col_char_27],
       [table10_bigint.col_char_40_key], [table10_bigint.col_char_40], [table10_bigint.col_char_47_unique_index], [table10_bigint.col_char_21_unique_index], [table10_bigint.col_char_33],
       [table10_bigint.col_char_27_unique_index], [table10_bigint.col_char_44_key], [table10_bigint.col_char_35_unique_index], [table10_bigint.col_char_26_key],
       [table10_bigint.col_bigint], [table10_bigint.col_char_30_unique_index], [table10_bigint.col_char_45_unique_index], [table10_bigint.col_char_32], [table10_bigint.col_char_41],
       [table10_bigint.col_char_24_unique_index], [table10_bigint.col_char_31_unique_index], [table10_bigint.col_char_33_key], [table10_bigint.col_char_39_key],
       [table10_bigint.col_char_35], [table10_bigint.col_timestamp_6_key], [table10_bigint.col_char_44], [table10_bigint.col_char_31], [table10_bigint.col_char_43_key],
       [table10_bigint.col_char_29_unique_index], [table10_bigint.col_char_37_key], [table10_bigint.col_char_23_unique_index], [table10_bigint.col_char_41_key],
       [table10_bigint.col_char_38_unique_index], [table10_bigint.col_char_44_unique_index], [table10_bigint.col_bigint_key], [table10_bigint.col_char_24_key],
       [table10_bigint.col_char_27_key], [table10_bigint.col_char_38_key], [table10_bigint.col_char_47], [table10_bigint.col_char_31_key], [table10_bigint.col_char_34]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([table10_bigint.pk]), range(MIN ; MAX)always true
UPDATE table10_bigint SET col_char_20 = 'a' ;
EXPLAIN BASIC delete from table10_bigint;
Query Plan
=====================================
|ID|OPERATOR         |NAME          |
-------------------------------------
|0 |DELETE           |              |
|1 |└─TABLE FULL SCAN|table10_bigint|
=====================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{table10_bigint: ({table10_bigint: (table10_bigint.pk, table10_bigint.col_char_34_key, table10_bigint.col_char_24, table10_bigint.col_char_48_unique_index,
       table10_bigint.col_char_26_unique_index, table10_bigint.col_char_36, table10_bigint.col_char_26, table10_bigint.col_char_20, table10_bigint.col_char_37,
       table10_bigint.col_char_29_key, table10_bigint.col_char_20_unique_index, table10_bigint.col_char_39, table10_bigint.col_char_23, table10_bigint.col_char_28_key,
       table10_bigint.col_char_45, table10_bigint.col_char_40_unique_index, table10_bigint.col_char_43_unique_index, table10_bigint.col_char_21_key, table10_bigint.col_char_29,
       table10_bigint.col_char_25_key, table10_bigint.col_timestamp_6, table10_bigint.col_char_32_key, table10_bigint.col_char_22, table10_bigint.col_char_45_key,
       table10_bigint.col_char_20_key, table10_bigint.col_char_35_key, table10_bigint.col_char_22_unique_index, table10_bigint.col_char_46_unique_index, table10_bigint.col_char_28_unique_index,
       table10_bigint.col_char_25, table10_bigint.col_char_42_unique_index, table10_bigint.col_char_30_key, table10_bigint.col_char_33_unique_index, table10_bigint.col_char_42,
       table10_bigint.col_char_23_key, table10_bigint.col_char_36_key, table10_bigint.col_timestamp_6_unique_index, table10_bigint.col_char_37_unique_index, table10_bigint.col_char_46_key,
       table10_bigint.col_char_32_unique_index, table10_bigint.col_char_34_unique_index, table10_bigint.col_char_28, table10_bigint.col_char_25_unique_index, 
      table10_bigint.col_char_39_unique_index, table10_bigint.col_char_30, table10_bigint.col_char_36_unique_index, table10_bigint.col_char_47_key, table10_bigint.col_char_41_unique_index,
       table10_bigint.col_char_42_key, table10_bigint.col_char_48, table10_bigint.col_char_46, table10_bigint.col_char_48_key, table10_bigint.col_char_22_key,
       table10_bigint.col_bigint_unique_index, table10_bigint.col_char_38, table10_bigint.col_char_21, table10_bigint.col_char_43, table10_bigint.col_char_27,
       table10_bigint.col_char_40_key, table10_bigint.col_char_40, table10_bigint.col_char_47_unique_index, table10_bigint.col_char_21_unique_index, table10_bigint.col_char_33,
       table10_bigint.col_char_27_unique_index, table10_bigint.col_char_44_key, table10_bigint.col_char_35_unique_index, table10_bigint.col_char_26_key, table10_bigint.col_bigint,
       table10_bigint.col_char_30_unique_index, table10_bigint.col_char_45_unique_index, table10_bigint.col_char_32, table10_bigint.col_char_41, table10_bigint.col_char_24_unique_index,
       table10_bigint.col_char_31_unique_index, table10_bigint.col_char_33_key, table10_bigint.col_char_39_key, table10_bigint.col_char_35, table10_bigint.col_timestamp_6_key,
       table10_bigint.col_char_44, table10_bigint.col_char_31, table10_bigint.col_char_43_key, table10_bigint.col_char_29_unique_index, table10_bigint.col_char_37_key,
       table10_bigint.col_char_23_unique_index, table10_bigint.col_char_41_key, table10_bigint.col_char_38_unique_index, table10_bigint.col_char_44_unique_index,
       table10_bigint.col_bigint_key, table10_bigint.col_char_24_key, table10_bigint.col_char_27_key, table10_bigint.col_char_38_key, table10_bigint.col_char_47,
       table10_bigint.col_char_31_key, table10_bigint.col_char_34)})}])
  1 - output([table10_bigint.pk], [table10_bigint.col_char_34_key], [table10_bigint.col_char_24], [table10_bigint.col_char_48_unique_index], [table10_bigint.col_char_26_unique_index],
       [table10_bigint.col_char_36], [table10_bigint.col_char_26], [table10_bigint.col_char_20], [table10_bigint.col_char_37], [table10_bigint.col_char_29_key],
       [table10_bigint.col_char_20_unique_index], [table10_bigint.col_char_39], [table10_bigint.col_char_23], [table10_bigint.col_char_28_key], [table10_bigint.col_char_45],
       [table10_bigint.col_char_40_unique_index], [table10_bigint.col_char_43_unique_index], [table10_bigint.col_char_21_key], [table10_bigint.col_char_29], [table10_bigint.col_char_25_key],
       [table10_bigint.col_timestamp_6], [table10_bigint.col_char_32_key], [table10_bigint.col_char_22], [table10_bigint.col_char_45_key], [table10_bigint.col_char_20_key],
       [table10_bigint.col_char_35_key], [table10_bigint.col_char_22_unique_index], [table10_bigint.col_char_46_unique_index], [table10_bigint.col_char_28_unique_index],
       [table10_bigint.col_char_25], [table10_bigint.col_char_42_unique_index], [table10_bigint.col_char_30_key], [table10_bigint.col_char_33_unique_index], [table10_bigint.col_char_42],
       [table10_bigint.col_char_23_key], [table10_bigint.col_char_36_key], [table10_bigint.col_timestamp_6_unique_index], [table10_bigint.col_char_37_unique_index],
       [table10_bigint.col_char_46_key], [table10_bigint.col_char_32_unique_index], [table10_bigint.col_char_34_unique_index], [table10_bigint.col_char_28], [table10_bigint.col_char_25_unique_index],
       [table10_bigint.col_char_39_unique_index], [table10_bigint.col_char_30], [table10_bigint.col_char_36_unique_index], [table10_bigint.col_char_47_key], [table10_bigint.col_char_41_unique_index],
       [table10_bigint.col_char_42_key], [table10_bigint.col_char_48], [table10_bigint.col_char_46], [table10_bigint.col_char_48_key], [table10_bigint.col_char_22_key],
       [table10_bigint.col_bigint_unique_index], [table10_bigint.col_char_38], [table10_bigint.col_char_21], [table10_bigint.col_char_43], [table10_bigint.col_char_27],
       [table10_bigint.col_char_40_key], [table10_bigint.col_char_40], [table10_bigint.col_char_47_unique_index], [table10_bigint.col_char_21_unique_index], [table10_bigint.col_char_33],
       [table10_bigint.col_char_27_unique_index], [table10_bigint.col_char_44_key], [table10_bigint.col_char_35_unique_index], [table10_bigint.col_char_26_key],
       [table10_bigint.col_bigint], [table10_bigint.col_char_30_unique_index], [table10_bigint.col_char_45_unique_index], [table10_bigint.col_char_32], [table10_bigint.col_char_41],
       [table10_bigint.col_char_24_unique_index], [table10_bigint.col_char_31_unique_index], [table10_bigint.col_char_33_key], [table10_bigint.col_char_39_key],
       [table10_bigint.col_char_35], [table10_bigint.col_timestamp_6_key], [table10_bigint.col_char_44], [table10_bigint.col_char_31], [table10_bigint.col_char_43_key],
       [table10_bigint.col_char_29_unique_index], [table10_bigint.col_char_37_key], [table10_bigint.col_char_23_unique_index], [table10_bigint.col_char_41_key],
       [table10_bigint.col_char_38_unique_index], [table10_bigint.col_char_44_unique_index], [table10_bigint.col_bigint_key], [table10_bigint.col_char_24_key],
       [table10_bigint.col_char_27_key], [table10_bigint.col_char_38_key], [table10_bigint.col_char_47], [table10_bigint.col_char_31_key], [table10_bigint.col_char_34]), filter(nil), rowset=16
      access([table10_bigint.pk], [table10_bigint.col_char_34_key], [table10_bigint.col_char_24], [table10_bigint.col_char_48_unique_index], [table10_bigint.col_char_26_unique_index],
       [table10_bigint.col_char_36], [table10_bigint.col_char_26], [table10_bigint.col_char_20], [table10_bigint.col_char_37], [table10_bigint.col_char_29_key],
       [table10_bigint.col_char_20_unique_index], [table10_bigint.col_char_39], [table10_bigint.col_char_23], [table10_bigint.col_char_28_key], [table10_bigint.col_char_45],
       [table10_bigint.col_char_40_unique_index], [table10_bigint.col_char_43_unique_index], [table10_bigint.col_char_21_key], [table10_bigint.col_char_29], [table10_bigint.col_char_25_key],
       [table10_bigint.col_timestamp_6], [table10_bigint.col_char_32_key], [table10_bigint.col_char_22], [table10_bigint.col_char_45_key], [table10_bigint.col_char_20_key],
       [table10_bigint.col_char_35_key], [table10_bigint.col_char_22_unique_index], [table10_bigint.col_char_46_unique_index], [table10_bigint.col_char_28_unique_index],
       [table10_bigint.col_char_25], [table10_bigint.col_char_42_unique_index], [table10_bigint.col_char_30_key], [table10_bigint.col_char_33_unique_index], [table10_bigint.col_char_42],
       [table10_bigint.col_char_23_key], [table10_bigint.col_char_36_key], [table10_bigint.col_timestamp_6_unique_index], [table10_bigint.col_char_37_unique_index],
       [table10_bigint.col_char_46_key], [table10_bigint.col_char_32_unique_index], [table10_bigint.col_char_34_unique_index], [table10_bigint.col_char_28], [table10_bigint.col_char_25_unique_index],
       [table10_bigint.col_char_39_unique_index], [table10_bigint.col_char_30], [table10_bigint.col_char_36_unique_index], [table10_bigint.col_char_47_key], [table10_bigint.col_char_41_unique_index],
       [table10_bigint.col_char_42_key], [table10_bigint.col_char_48], [table10_bigint.col_char_46], [table10_bigint.col_char_48_key], [table10_bigint.col_char_22_key],
       [table10_bigint.col_bigint_unique_index], [table10_bigint.col_char_38], [table10_bigint.col_char_21], [table10_bigint.col_char_43], [table10_bigint.col_char_27],
       [table10_bigint.col_char_40_key], [table10_bigint.col_char_40], [table10_bigint.col_char_47_unique_index], [table10_bigint.col_char_21_unique_index], [table10_bigint.col_char_33],
       [table10_bigint.col_char_27_unique_index], [table10_bigint.col_char_44_key], [table10_bigint.col_char_35_unique_index], [table10_bigint.col_char_26_key],
       [table10_bigint.col_bigint], [table10_bigint.col_char_30_unique_index], [table10_bigint.col_char_45_unique_index], [table10_bigint.col_char_32], [table10_bigint.col_char_41],
       [table10_bigint.col_char_24_unique_index], [table10_bigint.col_char_31_unique_index], [table10_bigint.col_char_33_key], [table10_bigint.col_char_39_key],
       [table10_bigint.col_char_35], [table10_bigint.col_timestamp_6_key], [table10_bigint.col_char_44], [table10_bigint.col_char_31], [table10_bigint.col_char_43_key],
       [table10_bigint.col_char_29_unique_index], [table10_bigint.col_char_37_key], [table10_bigint.col_char_23_unique_index], [table10_bigint.col_char_41_key],
       [table10_bigint.col_char_38_unique_index], [table10_bigint.col_char_44_unique_index], [table10_bigint.col_bigint_key], [table10_bigint.col_char_24_key],
       [table10_bigint.col_char_27_key], [table10_bigint.col_char_38_key], [table10_bigint.col_char_47], [table10_bigint.col_char_31_key], [table10_bigint.col_char_34]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([table10_bigint.pk]), range(MIN ; MAX)always true
delete from table10_bigint;
alter system set ob_enable_batched_multi_statement=false;
DROP TABLE /*! IF EXISTS*/ table10_bigint;

drop table if exists t1,t2;
drop view if exists update_view, update_view1;
create table t1 (c1 int, c2 int, c3 int);
create table t2 (c1 int, c2 int, c3 int);
create view update_view (c1,c2) as select t1.c2 as c1, t2.c2 as c2 from t1, t2 where t1.c1 = t2.c1;
create view update_view1 (c1,c2) as select t1.c2 as c1, t2.c2 as c2 from t1 join t2 on t1.c1 = t2.c1;
update t1, t2 set t1.c2 = t2.c2 where t1.c1 = t2.c1 order by t2.c2;
ERROR HY000: Incorrect usage of UPDATE and ORDER BY
update t1 join t2 on t1.c1 = t2.c1 set t1.c2 = t2.c2 order by t2.c2;
ERROR HY000: Incorrect usage of UPDATE and ORDER BY
update t1 left join t2 on t1.c1 = t2.c1 set t1.c2 = t2.c2 order by t2.c2;
ERROR HY000: Incorrect usage of UPDATE and ORDER BY
update update_view set c1 = c2 order by c2;
ERROR HY000: Incorrect usage of UPDATE and ORDER BY
update update_view1 set c1 = c2 order by c2;
ERROR HY000: Incorrect usage of UPDATE and ORDER BY
update t1, t2 set t1.c2 = t2.c2 where t1.c1 = t2.c1 limit 10;
ERROR HY000: Incorrect usage of UPDATE and LIMIT
update t1 join t2 on t1.c1 = t2.c1 set t1.c2 = t2.c2 limit 10;
ERROR HY000: Incorrect usage of UPDATE and LIMIT
update t1 left join t2 on t1.c1 = t2.c1 set t1.c2 = t2.c2 limit 10;
ERROR HY000: Incorrect usage of UPDATE and LIMIT
update update_view set c1 = c2 limit 10;
ERROR HY000: Incorrect usage of UPDATE and LIMIT
update update_view1 set c1 = c2 limit 10;
ERROR HY000: Incorrect usage of UPDATE and LIMIT
drop view update_view;
drop view update_view1;
drop table t1;
drop table t2;

drop table if exists gf_ar_mthly_bill;
set binlog_row_image='MINIMAL';
CREATE TABLE `gf_ar_mthly_bill` (
   `tnt_inst_id` varchar(8) COLLATE utf8mb4_bin NOT NULL COMMENT '租户机构id',
   `bill_no` varchar(64) COLLATE utf8mb4_bin NOT NULL COMMENT '账单号',
   `ip_id` varchar(32) COLLATE utf8mb4_bin NOT NULL COMMENT '结算对象ipid',
   `ip_role_id` varchar(32) COLLATE utf8mb4_bin NOT NULL COMMENT '结算对象pid',
   `inst_id` varchar(32) COLLATE utf8mb4_bin NOT NULL COMMENT '分支机构',
   `pd_code` varchar(64) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '产品码',
   `ar_no` varchar(34) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '合约号',
   `bill_tp` varchar(2) COLLATE utf8mb4_bin NOT NULL COMMENT '账单类型',
   `setl_tp` varchar(2) COLLATE utf8mb4_bin NOT NULL COMMENT '结算方式',
   `bill_st` varchar(2) COLLATE utf8mb4_bin NOT NULL COMMENT '核销状态',
   `bill_strt_dt` varchar(8) COLLATE utf8mb4_bin NOT NULL COMMENT '账单开始日期',
   `bill_end_dt` varchar(8) COLLATE utf8mb4_bin NOT NULL COMMENT '账单结束日期',
   `bill_mth` varchar(6) COLLATE utf8mb4_bin NOT NULL COMMENT '账单月份',
   `acrd_dt` varchar(8) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '应收日期',
   `gmt_pay` timestamp(6) NULL DEFAULT NULL COMMENT '付款时间',
   `payee_ac` varchar(34) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '收款方账号',
   `payer_ac` varchar(34) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '付款方账号',
   `pay_way` varchar(2) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '支付方式',
   `pay_orig` varchar(2) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '支付来源',
   `clcn_bsc_amt` decimal(25,4) DEFAULT NULL COMMENT '计算交易量',
   `clcn_bsc_tp` varchar(2) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '计算依据',
   `clcn_mthd` varchar(2) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '计算方法',
   `chrg_itm_code` varchar(64) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '收费项编码',
   `ccy` varchar(3) COLLATE utf8mb4_bin NOT NULL COMMENT '币种',
   `bill_amt` bigint(20) NOT NULL COMMENT '账单金额',
   `adj_amt` bigint(20) NOT NULL COMMENT '调整金额',
   `rcvd_amt` bigint(20) NOT NULL COMMENT '已收金额',
   `tax_tp` varchar(16) COLLATE utf8mb4_bin NOT NULL COMMENT '税种 01:增值税 02:营业税',
   `tax_rate` decimal(10,8) NOT NULL COMMENT '税率',
   `tax_amt` bigint(20) NOT NULL COMMENT '税额',
   `exn_inf` varchar(4000) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '扩展信息',
   `anl_dmsn1` varchar(1000) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '分析维度1',
   `anl_dmsn2` varchar(1000) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '分析维度2',
   `anl_dmsn3` varchar(1000) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '分析维度3',
   `anl_dmsn4` varchar(1000) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '分析维度4',
   `wrtof_dtl_cnt` bigint(20) DEFAULT NULL COMMENT '已核销明细数量',
   `to_wrtof_dtl_cnt` bigint(20) DEFAULT NULL COMMENT '待核销明细数量',
   `rcrd_id` varchar(64) COLLATE utf8mb4_bin NOT NULL COMMENT '数据唯一ID',
   `last_moder` varchar(32) COLLATE utf8mb4_bin NOT NULL COMMENT '最近修改人',
   `gmt_create` timestamp(6) NOT NULL COMMENT '创建时间',
   `gmt_modified` timestamp(6) NOT NULL COMMENT '修改时间',
   `charge_tp` varchar(32) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '计收费环境类型 01 主站云计收费 02 主站离线计收费 03 主站老计收费',
   `stl_ip_role_id` varchar(32) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '结算对象',
   `svc_amt` bigint(20) DEFAULT NULL COMMENT '交易金额',
   `inved_amt` bigint(20) DEFAULT NULL COMMENT '已开票金额',
   `chk_st` varchar(2) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '出账状态 01 初始化 02 待确认出账 03 已出账 04 客户已对账 05 对账差异',
   `acnt_day` varchar(14) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '出账日',
   `inv_amt` bigint(20) DEFAULT NULL COMMENT '可开票金额',
   `rel_inv_amt` bigint(20) DEFAULT NULL COMMENT '已关联发票金额',
   `tp` varchar(2) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '应收1 返点2',
   `payer_ip_role_id` varchar(32) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '扣款对象pid',
   `sgn_ip_id` varchar(32) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '签约对象ipid',
   `sgn_ip_role_id` varchar(32) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '签约对象pid',
   `chking_amt` bigint(20) DEFAULT '0' COMMENT '出账中金额',
   `frz_amt` bigint(20) DEFAULT '0' COMMENT '冻结金额（用于控制流程上互斥的业务）',
   `chked_amt` bigint(20) DEFAULT '0' COMMENT '已出账金额',
   `writingoff_amt` bigint(20) DEFAULT '0' COMMENT '核销中金额',
   `svc_bill_amt` bigint(20) DEFAULT NULL COMMENT '账单计费金额，计收费计费时生成的中间金额',
   `svc_ccy` varchar(3) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '账单计费币种',
   `env_source` varchar(16) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '环境标识',
   `metadata_source` varchar(1024) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '元数据来源标识，包括(用户、商户、产品、合约、计费)来源',
   `setl_time_zone` varchar(12) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '账单结算时区',
   `actg_time_zone` varchar(12) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '账单核算时区',
   `inter_trade_flag` varchar(1) COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Y: 是关联交易 N: 不是关联交易',
   `actg_bill_mth` varchar(6) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '核算时区账单月份',
   `auto_writeoff_group_no` varchar(64) COLLATE utf8mb4_bin DEFAULT NULL COMMENT '自动核销关联组号',
   `partition_id` varchar(4) COLLATE utf8mb4_bin GENERATED ALWAYS AS (substr(`bill_no`,23,2)) VIRTUAL,
   PRIMARY KEY (`tnt_inst_id`, `bill_no`),
   UNIQUE KEY `uk_tnt_inst_id_rcrd_id` (`tnt_inst_id`, `rcrd_id`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_tnt_inst_id_acnt_day_chk_st_gmt_create` (`tnt_inst_id`, `acnt_day`, `chk_st`, `gmt_create`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_tnt_inst_id_acnt_day_chk_st` (`tnt_inst_id`, `acnt_day`, `chk_st`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_tnt_inst_id_ip_role_id` (`tnt_inst_id`, `ip_role_id`) LOCAL  BLOCK_SIZE 16384,
   KEY `idx_tnt_inst_id_setl_tp_bill_st` (`tnt_inst_id`, `setl_tp`, `bill_st`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_tnt_inst_id_ar_no` (`tnt_inst_id`, `ar_no`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_tnt_inst_id_bill_mth` (`tnt_inst_id`, `bill_mth`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_ip_role_id_bill_mth` (`tnt_inst_id`, `ip_role_id`, `bill_mth`) LOCAL  BLOCK_SIZE 16384,
   KEY `idx_tnt_inst_id_ip_id` (`tnt_inst_id`, `ip_id`, `bill_mth`, `setl_tp`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_acrd_dt_setl_tp_bill_st` (`tnt_inst_id`, `acrd_dt`, `setl_tp`, `bill_st`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_tnt_inst_id_ip_role_id_bill_mth_setl_tp` (`tnt_inst_id`, `ip_role_id`, `bill_mth`, `setl_tp`) LOCAL  BLOCK_SIZE 16384,
   KEY `idx_bill_mth` (`bill_mth`, `tnt_inst_id`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_payer_ip_role_id_bill_mth` (`tnt_inst_id`, `payer_ip_role_id`, `bill_mth`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_ip_id_bill_mth` (`tnt_inst_id`, `ip_id`, `bill_mth`) GLOBAL  BLOCK_SIZE 16384,
   KEY `idx_policy_id_bill_mth_inst_id_type` (`tnt_inst_id`, `inst_id`, `bill_mth`, `tp`, `anl_dmsn2`) GLOBAL,
   KEY `idx_tnt_inst_id_inst_id_tp_anl_dmsn_1_bill_mth` (`tnt_inst_id`, `inst_id`, `tp`, `anl_dmsn1`, `bill_mth`) GLOBAL,
   KEY `idx_tnt_inst_id_inst_id_tp_anl_dmsn_3_bill_mth` (`tnt_inst_id`, `inst_id`, `tp`, `anl_dmsn3`, `bill_mth`) GLOBAL,
   KEY `idx_tnt_inst_id_inst_id_tp_anl_dmsn_4_bill_mth` (`tnt_inst_id`, `inst_id`, `tp`, `anl_dmsn4`, `bill_mth`) GLOBAL,
   KEY `idx_tnt_inst_id_inst_id_tp_anl_dmsn_2_bill_mth` (`tnt_inst_id`, `inst_id`, `tp`, `anl_dmsn2`, `bill_mth`) GLOBAL
 ) partition by list columns(partition_id)
 (partition p0 values in ('00'),
 partition p80 values in ('80'),
 partition p81 values in ('81'),
 partition p82 values in ('82'),
 partition p95 values in ('95'),
 partition p96 values in ('96'),
 partition p97 values in ('97'),
 partition p98 values in ('98'),
 partition p99 values in ('99'));

EXPLAIN BASIC insert into gf_ar_mthly_bill(tnt_inst_id, bill_no, ip_id, ip_role_id, inst_id,
bill_tp, setl_tp, bill_st, bill_strt_dt, bill_end_dt, bill_mth, ccy, bill_amt,
adj_amt, rcvd_amt, tax_tp, tax_rate, tax_amt, rcrd_id, last_moder, gmt_create, gmt_modified)
values('ylctest', '2018090310122000040400820033834415',
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, '2021-05-17 12:09:34', '2021-05-17 12:09:34');
Query Plan
============================
|ID|OPERATOR          |NAME|
----------------------------
|0 |DISTRIBUTED INSERT|    |
|1 |└─EXPRESSION      |    |
============================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      columns([{gf_ar_mthly_bill: ({gf_ar_mthly_bill: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.bill_no, gf_ar_mthly_bill.ip_id, gf_ar_mthly_bill.ip_role_id,
       gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.pd_code, gf_ar_mthly_bill.ar_no, gf_ar_mthly_bill.bill_tp, gf_ar_mthly_bill.setl_tp, gf_ar_mthly_bill.bill_st,
       gf_ar_mthly_bill.bill_strt_dt, gf_ar_mthly_bill.bill_end_dt, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.acrd_dt, gf_ar_mthly_bill.gmt_pay, gf_ar_mthly_bill.payee_ac,
       gf_ar_mthly_bill.payer_ac, gf_ar_mthly_bill.pay_way, gf_ar_mthly_bill.pay_orig, gf_ar_mthly_bill.clcn_bsc_amt, gf_ar_mthly_bill.clcn_bsc_tp, gf_ar_mthly_bill.clcn_mthd,
       gf_ar_mthly_bill.chrg_itm_code, gf_ar_mthly_bill.ccy, gf_ar_mthly_bill.bill_amt, gf_ar_mthly_bill.adj_amt, gf_ar_mthly_bill.rcvd_amt, gf_ar_mthly_bill.tax_tp,
       gf_ar_mthly_bill.tax_rate, gf_ar_mthly_bill.tax_amt, gf_ar_mthly_bill.exn_inf, gf_ar_mthly_bill.anl_dmsn1, gf_ar_mthly_bill.anl_dmsn2, gf_ar_mthly_bill.anl_dmsn3,
       gf_ar_mthly_bill.anl_dmsn4, gf_ar_mthly_bill.wrtof_dtl_cnt, gf_ar_mthly_bill.to_wrtof_dtl_cnt, gf_ar_mthly_bill.rcrd_id, gf_ar_mthly_bill.last_moder, gf_ar_mthly_bill.gmt_create,
       gf_ar_mthly_bill.gmt_modified, gf_ar_mthly_bill.charge_tp, gf_ar_mthly_bill.stl_ip_role_id, gf_ar_mthly_bill.svc_amt, gf_ar_mthly_bill.inved_amt, gf_ar_mthly_bill.chk_st,
       gf_ar_mthly_bill.acnt_day, gf_ar_mthly_bill.inv_amt, gf_ar_mthly_bill.rel_inv_amt, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.payer_ip_role_id, gf_ar_mthly_bill.sgn_ip_id,
       gf_ar_mthly_bill.sgn_ip_role_id, gf_ar_mthly_bill.chking_amt, gf_ar_mthly_bill.frz_amt, gf_ar_mthly_bill.chked_amt, gf_ar_mthly_bill.writingoff_amt, gf_ar_mthly_bill.svc_bill_amt,
       gf_ar_mthly_bill.svc_ccy, gf_ar_mthly_bill.env_source, gf_ar_mthly_bill.metadata_source, gf_ar_mthly_bill.setl_time_zone, gf_ar_mthly_bill.actg_time_zone,
       gf_ar_mthly_bill.inter_trade_flag, gf_ar_mthly_bill.actg_bill_mth, gf_ar_mthly_bill.auto_writeoff_group_no, gf_ar_mthly_bill.partition_id)}, {uk_tnt_inst_id_rcrd_id: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.rcrd_id, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_acnt_day_chk_st_gmt_create: (gf_ar_mthly_bill.tnt_inst_id,
       gf_ar_mthly_bill.acnt_day, gf_ar_mthly_bill.chk_st, gf_ar_mthly_bill.gmt_create, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_acnt_day_chk_st: (gf_ar_mthly_bill.tnt_inst_id,
       gf_ar_mthly_bill.acnt_day, gf_ar_mthly_bill.chk_st, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_setl_tp_bill_st: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.setl_tp,
       gf_ar_mthly_bill.bill_st, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_ar_no: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.ar_no, gf_ar_mthly_bill.bill_no)},
       {idx_tnt_inst_id_bill_mth: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_ip_id: (gf_ar_mthly_bill.tnt_inst_id,
       gf_ar_mthly_bill.ip_id, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.setl_tp, gf_ar_mthly_bill.bill_no)}, {idx_acrd_dt_setl_tp_bill_st: (gf_ar_mthly_bill.tnt_inst_id,
       gf_ar_mthly_bill.acrd_dt, gf_ar_mthly_bill.setl_tp, gf_ar_mthly_bill.bill_st, gf_ar_mthly_bill.bill_no)}, {idx_bill_mth: (gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.tnt_inst_id,
       gf_ar_mthly_bill.bill_no)}, {idx_payer_ip_role_id_bill_mth: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.payer_ip_role_id, gf_ar_mthly_bill.bill_mth,
       gf_ar_mthly_bill.bill_no)}, {idx_ip_id_bill_mth: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.ip_id, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)},
       {idx_policy_id_bill_mth_inst_id_type: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn2,
       gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_inst_id_tp_anl_dmsn_1_bill_mth: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp,
       gf_ar_mthly_bill.anl_dmsn1, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_inst_id_tp_anl_dmsn_3_bill_mth: (gf_ar_mthly_bill.tnt_inst_id,
       gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn3, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_inst_id_tp_anl_dmsn_4_bill_mth: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn4, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)},
       {idx_tnt_inst_id_inst_id_tp_anl_dmsn_2_bill_mth: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn2,
       gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)})}]), 
      column_values([column_conv(VARCHAR,utf8mb4_bin,length:8,NOT NULL,__values.tnt_inst_id)], [column_conv(VARCHAR,utf8mb4_bin,length:64,NOT NULL,__values.bill_no)],
       [column_conv(VARCHAR,utf8mb4_bin,length:32,NOT NULL,__values.ip_id)], [column_conv(VARCHAR,utf8mb4_bin,length:32,NOT NULL,__values.ip_role_id)], [column_conv(VARCHAR,
      utf8mb4_bin,length:32,NOT NULL,__values.inst_id)], [column_conv(VARCHAR,utf8mb4_bin,length:64,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,
      utf8mb4_bin,length:34,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:2,NOT NULL,__values.bill_tp)], [column_conv(VARCHAR,utf8mb4_bin,
      length:2,NOT NULL,__values.setl_tp)], [column_conv(VARCHAR,utf8mb4_bin,length:2,NOT NULL,__values.bill_st)], [column_conv(VARCHAR,utf8mb4_bin,length:8,NOT 
      NULL,__values.bill_strt_dt)], [column_conv(VARCHAR,utf8mb4_bin,length:8,NOT NULL,__values.bill_end_dt)], [column_conv(VARCHAR,utf8mb4_bin,length:6,NOT NULL,
      __values.bill_mth)], [column_conv(VARCHAR,utf8mb4_bin,length:8,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(TIMESTAMP,PS:(25,6),NULL,cast(NULL, TIMESTAMP(-1,
       -1)))], [column_conv(VARCHAR,utf8mb4_bin,length:34,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:34,NULL,cast(NULL, VARCHAR(1048576)))],
       [column_conv(VARCHAR,utf8mb4_bin,length:2,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:2,NULL,cast(NULL, VARCHAR(1048576)))],
       [column_conv(DECIMAL_INT,PS:(25,4),NULL,cast(NULL, DECIMAL_INT(25, 4)))], [column_conv(VARCHAR,utf8mb4_bin,length:2,NULL,cast(NULL, VARCHAR(1048576)))],
       [column_conv(VARCHAR,utf8mb4_bin,length:2,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:64,NULL,cast(NULL, VARCHAR(1048576)))],
       [column_conv(VARCHAR,utf8mb4_bin,length:3,NOT NULL,__values.ccy)], [column_conv(BIGINT,PS:(20,0),NOT NULL,__values.bill_amt)], [column_conv(BIGINT,PS:(20,
      0),NOT NULL,__values.adj_amt)], [column_conv(BIGINT,PS:(20,0),NOT NULL,__values.rcvd_amt)], [column_conv(VARCHAR,utf8mb4_bin,length:16,NOT NULL,__values.tax_tp)],
       [column_conv(DECIMAL_INT,PS:(10,8),NOT NULL,__values.tax_rate)], [column_conv(BIGINT,PS:(20,0),NOT NULL,__values.tax_amt)], [column_conv(VARCHAR,utf8mb4_bin,
      length:4000,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:1000,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,
      utf8mb4_bin,length:1000,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:1000,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,
      utf8mb4_bin,length:1000,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(BIGINT,PS:(20,0),NULL,cast(NULL, BIGINT(20, 0)))], [column_conv(BIGINT,PS:(20,
      0),NULL,cast(NULL, BIGINT(20, 0)))], [column_conv(VARCHAR,utf8mb4_bin,length:64,NOT NULL,__values.rcrd_id)], [column_conv(VARCHAR,utf8mb4_bin,length:32,
      NOT NULL,__values.last_moder)], [column_conv(TIMESTAMP,PS:(25,6),NOT NULL,timestamp_nvl(__values.gmt_create, cast(current_timestamp(), TIMESTAMP(25, 6))))],
       [column_conv(TIMESTAMP,PS:(25,6),NOT NULL,timestamp_nvl(__values.gmt_modified, cast(current_timestamp(), TIMESTAMP(25, 6))))], [column_conv(VARCHAR,utf8mb4_bin,
      length:32,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:32,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(BIGINT,PS:(20,
      0),NULL,cast(NULL, BIGINT(20, 0)))], [column_conv(BIGINT,PS:(20,0),NULL,cast(NULL, BIGINT(20, 0)))], [column_conv(VARCHAR,utf8mb4_bin,length:2,NULL,cast(NULL,
       VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:14,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(BIGINT,PS:(20,0),NULL,cast(NULL, BIGINT(20,
       0)))], [column_conv(BIGINT,PS:(20,0),NULL,cast(NULL, BIGINT(20, 0)))], [column_conv(VARCHAR,utf8mb4_bin,length:2,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,
      utf8mb4_bin,length:32,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:32,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,
      utf8mb4_bin,length:32,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(BIGINT,PS:(20,0),NULL,0)], [column_conv(BIGINT,PS:(20,0),NULL,0)], [column_conv(BIGINT,
      PS:(20,0),NULL,0)], [column_conv(BIGINT,PS:(20,0),NULL,0)], [column_conv(BIGINT,PS:(20,0),NULL,cast(NULL, BIGINT(20, 0)))], [column_conv(VARCHAR,utf8mb4_bin,
      length:3,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:16,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,
      length:1024,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:12,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,
      length:12,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:1,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,
      length:6,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,length:64,NULL,cast(NULL, VARCHAR(1048576)))], [column_conv(VARCHAR,utf8mb4_bin,
      length:4,NULL,column_conv(VARCHAR,utf8mb4_bin,length:4,NULL,substr(column_conv(VARCHAR,utf8mb4_bin,length:64,NOT NULL,__values.bill_no), 23, 2)))])
  1 - output([__values.tnt_inst_id], [__values.bill_no], [__values.ip_id], [__values.ip_role_id], [__values.inst_id], [__values.bill_tp], [__values.setl_tp],
       [__values.bill_st], [__values.bill_strt_dt], [__values.bill_end_dt], [__values.bill_mth], [__values.ccy], [__values.bill_amt], [__values.adj_amt], [__values.rcvd_amt],
       [__values.tax_tp], [__values.tax_rate], [__values.tax_amt], [__values.rcrd_id], [__values.last_moder], [__values.gmt_create], [__values.gmt_modified]), filter(nil)
      values({'ylctest', '2018090310122000040400820033834415', 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, '2021-05-17 12:09:34', '2021-05-17 
      12:09:34'})
insert into gf_ar_mthly_bill(tnt_inst_id, bill_no, ip_id, ip_role_id, inst_id,
bill_tp, setl_tp, bill_st, bill_strt_dt, bill_end_dt, bill_mth, ccy, bill_amt,
adj_amt, rcvd_amt, tax_tp, tax_rate, tax_amt, rcrd_id, last_moder, gmt_create, gmt_modified)
values('ylctest', '2018090310122000040400820033834415',
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, '2021-05-17 12:09:34', '2021-05-17 12:09:34');
begin;
EXPLAIN BASIC update gf_ar_mthly_bill
    set bill_st='01',
    gmt_pay='2021-05-17 12:09:35',
    clcn_bsc_amt='123.12',
    bill_amt=1,
    rcvd_amt=2,
    tax_amt=3,
    exn_inf='123456',
    anl_dmsn1='123456',
    anl_dmsn2='234567',
    anl_dmsn3='345678',
    anl_dmsn4='456789',
    last_moder='ylc',
    adj_amt=4,
    svc_amt = 5,
    chk_st = '06',
    inv_amt = 6,
    writingoff_amt = 7,
    wrtof_dtl_cnt = 9 ,
    to_wrtof_dtl_cnt = 8,
    chking_amt=10,
    chked_amt=11,
    frz_amt=12,
    svc_bill_amt=13,
    gmt_modified='2021-05-17 12:09:34'
 where
    tnt_inst_id='ylctest' and bill_no='2018090310122000040400820033834415';
Query Plan
========================================
|ID|OPERATOR          |NAME            |
----------------------------------------
|0 |DISTRIBUTED UPDATE|                |
|1 |└─TABLE GET       |gf_ar_mthly_bill|
========================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{gf_ar_mthly_bill: ({gf_ar_mthly_bill: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.bill_no, gf_ar_mthly_bill.ip_id, gf_ar_mthly_bill.ip_role_id,
       gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.pd_code, gf_ar_mthly_bill.ar_no, gf_ar_mthly_bill.bill_tp, gf_ar_mthly_bill.setl_tp, gf_ar_mthly_bill.bill_st,
       gf_ar_mthly_bill.bill_strt_dt, gf_ar_mthly_bill.bill_end_dt, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.acrd_dt, gf_ar_mthly_bill.gmt_pay, gf_ar_mthly_bill.payee_ac,
       gf_ar_mthly_bill.payer_ac, gf_ar_mthly_bill.pay_way, gf_ar_mthly_bill.pay_orig, gf_ar_mthly_bill.clcn_bsc_amt, gf_ar_mthly_bill.clcn_bsc_tp, gf_ar_mthly_bill.clcn_mthd,
       gf_ar_mthly_bill.chrg_itm_code, gf_ar_mthly_bill.ccy, gf_ar_mthly_bill.bill_amt, gf_ar_mthly_bill.adj_amt, gf_ar_mthly_bill.rcvd_amt, gf_ar_mthly_bill.tax_tp,
       gf_ar_mthly_bill.tax_rate, gf_ar_mthly_bill.tax_amt, gf_ar_mthly_bill.exn_inf, gf_ar_mthly_bill.anl_dmsn1, gf_ar_mthly_bill.anl_dmsn2, gf_ar_mthly_bill.anl_dmsn3,
       gf_ar_mthly_bill.anl_dmsn4, gf_ar_mthly_bill.wrtof_dtl_cnt, gf_ar_mthly_bill.to_wrtof_dtl_cnt, gf_ar_mthly_bill.rcrd_id, gf_ar_mthly_bill.last_moder, gf_ar_mthly_bill.gmt_create,
       gf_ar_mthly_bill.gmt_modified, gf_ar_mthly_bill.charge_tp, gf_ar_mthly_bill.stl_ip_role_id, gf_ar_mthly_bill.svc_amt, gf_ar_mthly_bill.inved_amt, gf_ar_mthly_bill.chk_st,
       gf_ar_mthly_bill.acnt_day, gf_ar_mthly_bill.inv_amt, gf_ar_mthly_bill.rel_inv_amt, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.payer_ip_role_id, gf_ar_mthly_bill.sgn_ip_id,
       gf_ar_mthly_bill.sgn_ip_role_id, gf_ar_mthly_bill.chking_amt, gf_ar_mthly_bill.frz_amt, gf_ar_mthly_bill.chked_amt, gf_ar_mthly_bill.writingoff_amt, gf_ar_mthly_bill.svc_bill_amt,
       gf_ar_mthly_bill.svc_ccy, gf_ar_mthly_bill.env_source, gf_ar_mthly_bill.metadata_source, gf_ar_mthly_bill.setl_time_zone, gf_ar_mthly_bill.actg_time_zone,
       gf_ar_mthly_bill.inter_trade_flag, gf_ar_mthly_bill.actg_bill_mth, gf_ar_mthly_bill.auto_writeoff_group_no, gf_ar_mthly_bill.partition_id)}, {idx_tnt_inst_id_acnt_day_chk_st_gmt_create: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.acnt_day, gf_ar_mthly_bill.chk_st, gf_ar_mthly_bill.gmt_create, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_acnt_day_chk_st: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.acnt_day, gf_ar_mthly_bill.chk_st, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_setl_tp_bill_st: (gf_ar_mthly_bill.tnt_inst_id,
       gf_ar_mthly_bill.setl_tp, gf_ar_mthly_bill.bill_st, gf_ar_mthly_bill.bill_no)}, {idx_acrd_dt_setl_tp_bill_st: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.acrd_dt,
       gf_ar_mthly_bill.setl_tp, gf_ar_mthly_bill.bill_st, gf_ar_mthly_bill.bill_no)}, {idx_policy_id_bill_mth_inst_id_type: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id,
       gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn2, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_inst_id_tp_anl_dmsn_1_bill_mth: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn1, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)},
       {idx_tnt_inst_id_inst_id_tp_anl_dmsn_3_bill_mth: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn3,
       gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_inst_id_tp_anl_dmsn_4_bill_mth: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id,
       gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn4, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_inst_id_tp_anl_dmsn_2_bill_mth: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn2, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)})}]),
      
      update([gf_ar_mthly_bill.bill_st=column_conv(VARCHAR,utf8mb4_bin,length:2,NOT NULL,'01')], [gf_ar_mthly_bill.gmt_pay=column_conv(TIMESTAMP,PS:(25,
      6),NULL,'2021-05-17 12:09:35')], [gf_ar_mthly_bill.clcn_bsc_amt=column_conv(DECIMAL_INT,PS:(25,4),NULL,'123.12')], [gf_ar_mthly_bill.bill_amt=column_conv(BIGINT,
      PS:(20,0),NOT NULL,1)], [gf_ar_mthly_bill.rcvd_amt=column_conv(BIGINT,PS:(20,0),NOT NULL,2)], [gf_ar_mthly_bill.tax_amt=column_conv(BIGINT,PS:(20,0),NOT 
      NULL,3)], [gf_ar_mthly_bill.exn_inf=column_conv(VARCHAR,utf8mb4_bin,length:4000,NULL,'123456')], [gf_ar_mthly_bill.anl_dmsn1=column_conv(VARCHAR,utf8mb4_bin,
      length:1000,NULL,'123456')], [gf_ar_mthly_bill.anl_dmsn2=column_conv(VARCHAR,utf8mb4_bin,length:1000,NULL,'234567')], [gf_ar_mthly_bill.anl_dmsn3=column_conv(VARCHAR,
      utf8mb4_bin,length:1000,NULL,'345678')], [gf_ar_mthly_bill.anl_dmsn4=column_conv(VARCHAR,utf8mb4_bin,length:1000,NULL,'456789')], [gf_ar_mthly_bill.last_moder=column_conv(VARCHAR,
      utf8mb4_bin,length:32,NOT NULL,'ylc')], [gf_ar_mthly_bill.adj_amt=column_conv(BIGINT,PS:(20,0),NOT NULL,4)], [gf_ar_mthly_bill.svc_amt=column_conv(BIGINT,
      PS:(20,0),NULL,5)], [gf_ar_mthly_bill.chk_st=column_conv(VARCHAR,utf8mb4_bin,length:2,NULL,'06')], [gf_ar_mthly_bill.inv_amt=column_conv(BIGINT,PS:(20,0),
      NULL,6)], [gf_ar_mthly_bill.writingoff_amt=column_conv(BIGINT,PS:(20,0),NULL,7)], [gf_ar_mthly_bill.wrtof_dtl_cnt=column_conv(BIGINT,PS:(20,0),NULL,9)],
       [gf_ar_mthly_bill.to_wrtof_dtl_cnt=column_conv(BIGINT,PS:(20,0),NULL,8)], [gf_ar_mthly_bill.chking_amt=column_conv(BIGINT,PS:(20,0),NULL,10)], [gf_ar_mthly_bill.chked_amt=column_conv(BIGINT,
      PS:(20,0),NULL,11)], [gf_ar_mthly_bill.frz_amt=column_conv(BIGINT,PS:(20,0),NULL,12)], [gf_ar_mthly_bill.svc_bill_amt=column_conv(BIGINT,PS:(20,0),NULL,
      13)], [gf_ar_mthly_bill.gmt_modified=column_conv(TIMESTAMP,PS:(25,6),NOT NULL,timestamp_nvl('2021-05-17 12:09:34', cast(current_timestamp(), TIMESTAMP(25,
       6))))])
  1 - output([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no], [column_conv(VARCHAR,utf8mb4_bin,length:4,NULL,substr(gf_ar_mthly_bill.bill_no,
       23, 2))], [gf_ar_mthly_bill.bill_st], [gf_ar_mthly_bill.gmt_pay], [gf_ar_mthly_bill.clcn_bsc_amt], [gf_ar_mthly_bill.bill_amt], [gf_ar_mthly_bill.rcvd_amt],
       [gf_ar_mthly_bill.tax_amt], [gf_ar_mthly_bill.exn_inf], [gf_ar_mthly_bill.anl_dmsn1], [gf_ar_mthly_bill.anl_dmsn2], [gf_ar_mthly_bill.anl_dmsn3], [gf_ar_mthly_bill.anl_dmsn4],
       [gf_ar_mthly_bill.last_moder], [gf_ar_mthly_bill.adj_amt], [gf_ar_mthly_bill.svc_amt], [gf_ar_mthly_bill.chk_st], [gf_ar_mthly_bill.inv_amt], [gf_ar_mthly_bill.writingoff_amt],
       [gf_ar_mthly_bill.wrtof_dtl_cnt], [gf_ar_mthly_bill.to_wrtof_dtl_cnt], [gf_ar_mthly_bill.chking_amt], [gf_ar_mthly_bill.chked_amt], [gf_ar_mthly_bill.frz_amt],
       [gf_ar_mthly_bill.svc_bill_amt], [gf_ar_mthly_bill.gmt_modified], [gf_ar_mthly_bill.ip_id], [gf_ar_mthly_bill.ip_role_id], [gf_ar_mthly_bill.inst_id], 
      [gf_ar_mthly_bill.pd_code], [gf_ar_mthly_bill.ar_no], [gf_ar_mthly_bill.bill_tp], [gf_ar_mthly_bill.setl_tp], [gf_ar_mthly_bill.bill_strt_dt], [gf_ar_mthly_bill.bill_end_dt],
       [gf_ar_mthly_bill.bill_mth], [gf_ar_mthly_bill.acrd_dt], [gf_ar_mthly_bill.payee_ac], [gf_ar_mthly_bill.payer_ac], [gf_ar_mthly_bill.pay_way], [gf_ar_mthly_bill.pay_orig],
       [gf_ar_mthly_bill.clcn_bsc_tp], [gf_ar_mthly_bill.clcn_mthd], [gf_ar_mthly_bill.chrg_itm_code], [gf_ar_mthly_bill.ccy], [gf_ar_mthly_bill.tax_tp], [gf_ar_mthly_bill.tax_rate],
       [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.gmt_create], [gf_ar_mthly_bill.charge_tp], [gf_ar_mthly_bill.stl_ip_role_id], [gf_ar_mthly_bill.inved_amt],
       [gf_ar_mthly_bill.acnt_day], [gf_ar_mthly_bill.rel_inv_amt], [gf_ar_mthly_bill.tp], [gf_ar_mthly_bill.payer_ip_role_id], [gf_ar_mthly_bill.sgn_ip_id], 
      [gf_ar_mthly_bill.sgn_ip_role_id], [gf_ar_mthly_bill.svc_ccy], [gf_ar_mthly_bill.env_source], [gf_ar_mthly_bill.metadata_source], [gf_ar_mthly_bill.setl_time_zone],
       [gf_ar_mthly_bill.actg_time_zone], [gf_ar_mthly_bill.inter_trade_flag], [gf_ar_mthly_bill.actg_bill_mth], [gf_ar_mthly_bill.auto_writeoff_group_no]), filter(nil), rowset=16
      access([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no], [gf_ar_mthly_bill.bill_st], [gf_ar_mthly_bill.gmt_pay], [gf_ar_mthly_bill.clcn_bsc_amt],
       [gf_ar_mthly_bill.bill_amt], [gf_ar_mthly_bill.rcvd_amt], [gf_ar_mthly_bill.tax_amt], [gf_ar_mthly_bill.exn_inf], [gf_ar_mthly_bill.anl_dmsn1], [gf_ar_mthly_bill.anl_dmsn2],
       [gf_ar_mthly_bill.anl_dmsn3], [gf_ar_mthly_bill.anl_dmsn4], [gf_ar_mthly_bill.last_moder], [gf_ar_mthly_bill.adj_amt], [gf_ar_mthly_bill.svc_amt], [gf_ar_mthly_bill.chk_st],
       [gf_ar_mthly_bill.inv_amt], [gf_ar_mthly_bill.writingoff_amt], [gf_ar_mthly_bill.wrtof_dtl_cnt], [gf_ar_mthly_bill.to_wrtof_dtl_cnt], [gf_ar_mthly_bill.chking_amt],
       [gf_ar_mthly_bill.chked_amt], [gf_ar_mthly_bill.frz_amt], [gf_ar_mthly_bill.svc_bill_amt], [gf_ar_mthly_bill.gmt_modified], [gf_ar_mthly_bill.ip_id], [gf_ar_mthly_bill.ip_role_id],
       [gf_ar_mthly_bill.inst_id], [gf_ar_mthly_bill.pd_code], [gf_ar_mthly_bill.ar_no], [gf_ar_mthly_bill.bill_tp], [gf_ar_mthly_bill.setl_tp], [gf_ar_mthly_bill.bill_strt_dt],
       [gf_ar_mthly_bill.bill_end_dt], [gf_ar_mthly_bill.bill_mth], [gf_ar_mthly_bill.acrd_dt], [gf_ar_mthly_bill.payee_ac], [gf_ar_mthly_bill.payer_ac], [gf_ar_mthly_bill.pay_way],
       [gf_ar_mthly_bill.pay_orig], [gf_ar_mthly_bill.clcn_bsc_tp], [gf_ar_mthly_bill.clcn_mthd], [gf_ar_mthly_bill.chrg_itm_code], [gf_ar_mthly_bill.ccy], [gf_ar_mthly_bill.tax_tp],
       [gf_ar_mthly_bill.tax_rate], [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.gmt_create], [gf_ar_mthly_bill.charge_tp], [gf_ar_mthly_bill.stl_ip_role_id],
       [gf_ar_mthly_bill.inved_amt], [gf_ar_mthly_bill.acnt_day], [gf_ar_mthly_bill.rel_inv_amt], [gf_ar_mthly_bill.tp], [gf_ar_mthly_bill.payer_ip_role_id], 
      [gf_ar_mthly_bill.sgn_ip_id], [gf_ar_mthly_bill.sgn_ip_role_id], [gf_ar_mthly_bill.svc_ccy], [gf_ar_mthly_bill.env_source], [gf_ar_mthly_bill.metadata_source],
       [gf_ar_mthly_bill.setl_time_zone], [gf_ar_mthly_bill.actg_time_zone], [gf_ar_mthly_bill.inter_trade_flag], [gf_ar_mthly_bill.actg_bill_mth], [gf_ar_mthly_bill.auto_writeoff_group_no]), partitions(p3)
      is_index_back=false, is_global_index=false, 
      range_key([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no]), range[ylctest,2018090310122000040400820033834415 ; ylctest,2018090310122000040400820033834415],
       
      range_cond([gf_ar_mthly_bill.tnt_inst_id = cast('ylctest', VARCHAR(1048576))], [gf_ar_mthly_bill.bill_no = cast('2018090310122000040400820033834415',
       VARCHAR(1048576))])
update gf_ar_mthly_bill
    set bill_st='01',
    gmt_pay='2021-05-17 12:09:35',
    clcn_bsc_amt='123.12',
    bill_amt=1,
    rcvd_amt=2,
    tax_amt=3,
    exn_inf='123456',
    anl_dmsn1='123456',
    anl_dmsn2='234567',
    anl_dmsn3='345678',
    anl_dmsn4='456789',
    last_moder='ylc',
    adj_amt=4,
    svc_amt = 5,
    chk_st = '06',
    inv_amt = 6,
    writingoff_amt = 7,
    wrtof_dtl_cnt = 9 ,
    to_wrtof_dtl_cnt = 8,
    chking_amt=10,
    chked_amt=11,
    frz_amt=12,
    svc_bill_amt=13,
    gmt_modified='2021-05-17 12:09:34'
 where
    tnt_inst_id='ylctest' and bill_no='2018090310122000040400820033834415';

EXPLAIN BASIC select * from gf_ar_mthly_bill;
Query Plan
=========================================================================
|ID|OPERATOR                   |NAME                                    |
-------------------------------------------------------------------------
|0 |DISTRIBUTED TABLE FULL SCAN|gf_ar_mthly_bill(uk_tnt_inst_id_rcrd_id)|
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no], [gf_ar_mthly_bill.ip_id], [gf_ar_mthly_bill.ip_role_id], [gf_ar_mthly_bill.inst_id],
       [gf_ar_mthly_bill.pd_code], [gf_ar_mthly_bill.ar_no], [gf_ar_mthly_bill.bill_tp], [gf_ar_mthly_bill.setl_tp], [gf_ar_mthly_bill.bill_st], [gf_ar_mthly_bill.bill_strt_dt],
       [gf_ar_mthly_bill.bill_end_dt], [gf_ar_mthly_bill.bill_mth], [gf_ar_mthly_bill.acrd_dt], [gf_ar_mthly_bill.gmt_pay], [gf_ar_mthly_bill.payee_ac], [gf_ar_mthly_bill.payer_ac],
       [gf_ar_mthly_bill.pay_way], [gf_ar_mthly_bill.pay_orig], [gf_ar_mthly_bill.clcn_bsc_amt], [gf_ar_mthly_bill.clcn_bsc_tp], [gf_ar_mthly_bill.clcn_mthd],
       [gf_ar_mthly_bill.chrg_itm_code], [gf_ar_mthly_bill.ccy], [gf_ar_mthly_bill.bill_amt], [gf_ar_mthly_bill.adj_amt], [gf_ar_mthly_bill.rcvd_amt], [gf_ar_mthly_bill.tax_tp],
       [gf_ar_mthly_bill.tax_rate], [gf_ar_mthly_bill.tax_amt], [gf_ar_mthly_bill.exn_inf], [gf_ar_mthly_bill.anl_dmsn1], [gf_ar_mthly_bill.anl_dmsn2], [gf_ar_mthly_bill.anl_dmsn3],
       [gf_ar_mthly_bill.anl_dmsn4], [gf_ar_mthly_bill.wrtof_dtl_cnt], [gf_ar_mthly_bill.to_wrtof_dtl_cnt], [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.last_moder],
       [gf_ar_mthly_bill.gmt_create], [gf_ar_mthly_bill.gmt_modified], [gf_ar_mthly_bill.charge_tp], [gf_ar_mthly_bill.stl_ip_role_id], [gf_ar_mthly_bill.svc_amt],
       [gf_ar_mthly_bill.inved_amt], [gf_ar_mthly_bill.chk_st], [gf_ar_mthly_bill.acnt_day], [gf_ar_mthly_bill.inv_amt], [gf_ar_mthly_bill.rel_inv_amt], [gf_ar_mthly_bill.tp],
       [gf_ar_mthly_bill.payer_ip_role_id], [gf_ar_mthly_bill.sgn_ip_id], [gf_ar_mthly_bill.sgn_ip_role_id], [gf_ar_mthly_bill.chking_amt], [gf_ar_mthly_bill.frz_amt],
       [gf_ar_mthly_bill.chked_amt], [gf_ar_mthly_bill.writingoff_amt], [gf_ar_mthly_bill.svc_bill_amt], [gf_ar_mthly_bill.svc_ccy], [gf_ar_mthly_bill.env_source],
       [gf_ar_mthly_bill.metadata_source], [gf_ar_mthly_bill.setl_time_zone], [gf_ar_mthly_bill.actg_time_zone], [gf_ar_mthly_bill.inter_trade_flag], [gf_ar_mthly_bill.actg_bill_mth],
       [gf_ar_mthly_bill.auto_writeoff_group_no], [column_conv(VARCHAR,utf8mb4_bin,length:4,NULL,substr(gf_ar_mthly_bill.bill_no, 23, 2))]), filter(nil), rowset=16
      access([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no], [gf_ar_mthly_bill.ip_id], [gf_ar_mthly_bill.ip_role_id], [gf_ar_mthly_bill.inst_id],
       [gf_ar_mthly_bill.pd_code], [gf_ar_mthly_bill.ar_no], [gf_ar_mthly_bill.bill_tp], [gf_ar_mthly_bill.setl_tp], [gf_ar_mthly_bill.bill_st], [gf_ar_mthly_bill.bill_strt_dt],
       [gf_ar_mthly_bill.bill_end_dt], [gf_ar_mthly_bill.bill_mth], [gf_ar_mthly_bill.acrd_dt], [gf_ar_mthly_bill.gmt_pay], [gf_ar_mthly_bill.payee_ac], [gf_ar_mthly_bill.payer_ac],
       [gf_ar_mthly_bill.pay_way], [gf_ar_mthly_bill.pay_orig], [gf_ar_mthly_bill.clcn_bsc_amt], [gf_ar_mthly_bill.clcn_bsc_tp], [gf_ar_mthly_bill.clcn_mthd],
       [gf_ar_mthly_bill.chrg_itm_code], [gf_ar_mthly_bill.ccy], [gf_ar_mthly_bill.bill_amt], [gf_ar_mthly_bill.adj_amt], [gf_ar_mthly_bill.rcvd_amt], [gf_ar_mthly_bill.tax_tp],
       [gf_ar_mthly_bill.tax_rate], [gf_ar_mthly_bill.tax_amt], [gf_ar_mthly_bill.exn_inf], [gf_ar_mthly_bill.anl_dmsn1], [gf_ar_mthly_bill.anl_dmsn2], [gf_ar_mthly_bill.anl_dmsn3],
       [gf_ar_mthly_bill.anl_dmsn4], [gf_ar_mthly_bill.wrtof_dtl_cnt], [gf_ar_mthly_bill.to_wrtof_dtl_cnt], [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.last_moder],
       [gf_ar_mthly_bill.gmt_create], [gf_ar_mthly_bill.gmt_modified], [gf_ar_mthly_bill.charge_tp], [gf_ar_mthly_bill.stl_ip_role_id], [gf_ar_mthly_bill.svc_amt],
       [gf_ar_mthly_bill.inved_amt], [gf_ar_mthly_bill.chk_st], [gf_ar_mthly_bill.acnt_day], [gf_ar_mthly_bill.inv_amt], [gf_ar_mthly_bill.rel_inv_amt], [gf_ar_mthly_bill.tp],
       [gf_ar_mthly_bill.payer_ip_role_id], [gf_ar_mthly_bill.sgn_ip_id], [gf_ar_mthly_bill.sgn_ip_role_id], [gf_ar_mthly_bill.chking_amt], [gf_ar_mthly_bill.frz_amt],
       [gf_ar_mthly_bill.chked_amt], [gf_ar_mthly_bill.writingoff_amt], [gf_ar_mthly_bill.svc_bill_amt], [gf_ar_mthly_bill.svc_ccy], [gf_ar_mthly_bill.env_source],
       [gf_ar_mthly_bill.metadata_source], [gf_ar_mthly_bill.setl_time_zone], [gf_ar_mthly_bill.actg_time_zone], [gf_ar_mthly_bill.inter_trade_flag], [gf_ar_mthly_bill.actg_bill_mth],
       [gf_ar_mthly_bill.auto_writeoff_group_no]), partitions(p0)
      is_index_back=true, is_global_index=true, keep_ordering=true, 
      range_key([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.shadow_pk_0], [gf_ar_mthly_bill.shadow_pk_1]), range(MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX)always true
select * from gf_ar_mthly_bill;
+-------------+------------------------------------+-------+------------+---------+---------+-------+---------+---------+---------+--------------+-------------+----------+---------+----------------------------+----------+----------+---------+----------+--------------+-------------+-----------+---------------+-----+----------+---------+----------+--------+------------+---------+---------+-----------+-----------+-----------+-----------+---------------+------------------+---------+------------+----------------------------+----------------------------+-----------+----------------+---------+-----------+--------+----------+---------+-------------+------+------------------+-----------+----------------+------------+---------+-----------+----------------+--------------+---------+------------+-----------------+----------------+----------------+------------------+---------------+------------------------+--------------+
| tnt_inst_id | bill_no                            | ip_id | ip_role_id | inst_id | pd_code | ar_no | bill_tp | setl_tp | bill_st | bill_strt_dt | bill_end_dt | bill_mth | acrd_dt | gmt_pay                    | payee_ac | payer_ac | pay_way | pay_orig | clcn_bsc_amt | clcn_bsc_tp | clcn_mthd | chrg_itm_code | ccy | bill_amt | adj_amt | rcvd_amt | tax_tp | tax_rate   | tax_amt | exn_inf | anl_dmsn1 | anl_dmsn2 | anl_dmsn3 | anl_dmsn4 | wrtof_dtl_cnt | to_wrtof_dtl_cnt | rcrd_id | last_moder | gmt_create                 | gmt_modified               | charge_tp | stl_ip_role_id | svc_amt | inved_amt | chk_st | acnt_day | inv_amt | rel_inv_amt | tp   | payer_ip_role_id | sgn_ip_id | sgn_ip_role_id | chking_amt | frz_amt | chked_amt | writingoff_amt | svc_bill_amt | svc_ccy | env_source | metadata_source | setl_time_zone | actg_time_zone | inter_trade_flag | actg_bill_mth | auto_writeoff_group_no | partition_id |

| ylctest     | 2018090310122000040400820033834415 | 1     | 1          | 1       | NULL    | NULL  | 1       | 1       | 01      | 1            | 1           | 1        | NULL    | 2021-05-17 12:09:35.000000 | NULL     | NULL     | NULL    | NULL     |     123.1200 | NULL        | NULL      | NULL          | 1   |        1 |       4 |        2 | 1      | 1.00000000 |       3 | 123456  | 123456    | 234567    | 345678    | 456789    |             9 |                8 | 1       | ylc        | 2021-05-17 12:09:34.000000 | 2021-05-17 12:09:34.000000 | NULL      | NULL           |       5 |      NULL | 06     | NULL     |       6 |        NULL | NULL | NULL             | NULL      | NULL           |         10 |      12 |        11 |              7 |           13 | NULL    | NULL       | NULL            | NULL           | NULL           | NULL             | NULL          | NULL                   | 82           |

rollback;
set binlog_row_image='MINIMAL';
EXPLAIN BASIC update gf_ar_mthly_bill
    set bill_st='01',
    gmt_pay='2021-05-17 12:09:35',
    clcn_bsc_amt='123.12',
    bill_amt=1,
    rcvd_amt=2,
    tax_amt=3,
    exn_inf='123456',
    anl_dmsn1='123456',
    anl_dmsn2='234567',
    anl_dmsn3='345678',
    anl_dmsn4='456789',
    last_moder='ylc',
    adj_amt=4,
    svc_amt = 5,
    chk_st = '06',
    inv_amt = 6,
    writingoff_amt = 7,
    wrtof_dtl_cnt = 9 , 
    to_wrtof_dtl_cnt = 8,
    chking_amt=10,
    chked_amt=11,
    frz_amt=12,
    svc_bill_amt=13,
    gmt_modified='2021-05-17 12:09:34'
 where
    tnt_inst_id='ylctest' and bill_no='2018090310122000040400820033834415';
Query Plan
========================================
|ID|OPERATOR          |NAME            |
----------------------------------------
|0 |DISTRIBUTED UPDATE|                |
|1 |└─TABLE GET       |gf_ar_mthly_bill|
========================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{gf_ar_mthly_bill: ({gf_ar_mthly_bill: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.bill_no, gf_ar_mthly_bill.ip_id, gf_ar_mthly_bill.ip_role_id,
       gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.pd_code, gf_ar_mthly_bill.ar_no, gf_ar_mthly_bill.bill_tp, gf_ar_mthly_bill.setl_tp, gf_ar_mthly_bill.bill_st,
       gf_ar_mthly_bill.bill_strt_dt, gf_ar_mthly_bill.bill_end_dt, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.acrd_dt, gf_ar_mthly_bill.gmt_pay, gf_ar_mthly_bill.payee_ac,
       gf_ar_mthly_bill.payer_ac, gf_ar_mthly_bill.pay_way, gf_ar_mthly_bill.pay_orig, gf_ar_mthly_bill.clcn_bsc_amt, gf_ar_mthly_bill.clcn_bsc_tp, gf_ar_mthly_bill.clcn_mthd,
       gf_ar_mthly_bill.chrg_itm_code, gf_ar_mthly_bill.ccy, gf_ar_mthly_bill.bill_amt, gf_ar_mthly_bill.adj_amt, gf_ar_mthly_bill.rcvd_amt, gf_ar_mthly_bill.tax_tp,
       gf_ar_mthly_bill.tax_rate, gf_ar_mthly_bill.tax_amt, gf_ar_mthly_bill.exn_inf, gf_ar_mthly_bill.anl_dmsn1, gf_ar_mthly_bill.anl_dmsn2, gf_ar_mthly_bill.anl_dmsn3,
       gf_ar_mthly_bill.anl_dmsn4, gf_ar_mthly_bill.wrtof_dtl_cnt, gf_ar_mthly_bill.to_wrtof_dtl_cnt, gf_ar_mthly_bill.rcrd_id, gf_ar_mthly_bill.last_moder, gf_ar_mthly_bill.gmt_create,
       gf_ar_mthly_bill.gmt_modified, gf_ar_mthly_bill.charge_tp, gf_ar_mthly_bill.stl_ip_role_id, gf_ar_mthly_bill.svc_amt, gf_ar_mthly_bill.inved_amt, gf_ar_mthly_bill.chk_st,
       gf_ar_mthly_bill.acnt_day, gf_ar_mthly_bill.inv_amt, gf_ar_mthly_bill.rel_inv_amt, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.payer_ip_role_id, gf_ar_mthly_bill.sgn_ip_id,
       gf_ar_mthly_bill.sgn_ip_role_id, gf_ar_mthly_bill.chking_amt, gf_ar_mthly_bill.frz_amt, gf_ar_mthly_bill.chked_amt, gf_ar_mthly_bill.writingoff_amt, gf_ar_mthly_bill.svc_bill_amt,
       gf_ar_mthly_bill.svc_ccy, gf_ar_mthly_bill.env_source, gf_ar_mthly_bill.metadata_source, gf_ar_mthly_bill.setl_time_zone, gf_ar_mthly_bill.actg_time_zone,
       gf_ar_mthly_bill.inter_trade_flag, gf_ar_mthly_bill.actg_bill_mth, gf_ar_mthly_bill.auto_writeoff_group_no, gf_ar_mthly_bill.partition_id)}, {idx_tnt_inst_id_acnt_day_chk_st_gmt_create: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.acnt_day, gf_ar_mthly_bill.chk_st, gf_ar_mthly_bill.gmt_create, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_acnt_day_chk_st: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.acnt_day, gf_ar_mthly_bill.chk_st, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_setl_tp_bill_st: (gf_ar_mthly_bill.tnt_inst_id,
       gf_ar_mthly_bill.setl_tp, gf_ar_mthly_bill.bill_st, gf_ar_mthly_bill.bill_no)}, {idx_acrd_dt_setl_tp_bill_st: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.acrd_dt,
       gf_ar_mthly_bill.setl_tp, gf_ar_mthly_bill.bill_st, gf_ar_mthly_bill.bill_no)}, {idx_policy_id_bill_mth_inst_id_type: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id,
       gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn2, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_inst_id_tp_anl_dmsn_1_bill_mth: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn1, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)},
       {idx_tnt_inst_id_inst_id_tp_anl_dmsn_3_bill_mth: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn3,
       gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_inst_id_tp_anl_dmsn_4_bill_mth: (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id,
       gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn4, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)}, {idx_tnt_inst_id_inst_id_tp_anl_dmsn_2_bill_mth: 
      (gf_ar_mthly_bill.tnt_inst_id, gf_ar_mthly_bill.inst_id, gf_ar_mthly_bill.tp, gf_ar_mthly_bill.anl_dmsn2, gf_ar_mthly_bill.bill_mth, gf_ar_mthly_bill.bill_no)})}]),
      
      update([gf_ar_mthly_bill.bill_st=column_conv(VARCHAR,utf8mb4_bin,length:2,NOT NULL,'01')], [gf_ar_mthly_bill.gmt_pay=column_conv(TIMESTAMP,PS:(25,
      6),NULL,'2021-05-17 12:09:35')], [gf_ar_mthly_bill.clcn_bsc_amt=column_conv(DECIMAL_INT,PS:(25,4),NULL,'123.12')], [gf_ar_mthly_bill.bill_amt=column_conv(BIGINT,
      PS:(20,0),NOT NULL,1)], [gf_ar_mthly_bill.rcvd_amt=column_conv(BIGINT,PS:(20,0),NOT NULL,2)], [gf_ar_mthly_bill.tax_amt=column_conv(BIGINT,PS:(20,0),NOT 
      NULL,3)], [gf_ar_mthly_bill.exn_inf=column_conv(VARCHAR,utf8mb4_bin,length:4000,NULL,'123456')], [gf_ar_mthly_bill.anl_dmsn1=column_conv(VARCHAR,utf8mb4_bin,
      length:1000,NULL,'123456')], [gf_ar_mthly_bill.anl_dmsn2=column_conv(VARCHAR,utf8mb4_bin,length:1000,NULL,'234567')], [gf_ar_mthly_bill.anl_dmsn3=column_conv(VARCHAR,
      utf8mb4_bin,length:1000,NULL,'345678')], [gf_ar_mthly_bill.anl_dmsn4=column_conv(VARCHAR,utf8mb4_bin,length:1000,NULL,'456789')], [gf_ar_mthly_bill.last_moder=column_conv(VARCHAR,
      utf8mb4_bin,length:32,NOT NULL,'ylc')], [gf_ar_mthly_bill.adj_amt=column_conv(BIGINT,PS:(20,0),NOT NULL,4)], [gf_ar_mthly_bill.svc_amt=column_conv(BIGINT,
      PS:(20,0),NULL,5)], [gf_ar_mthly_bill.chk_st=column_conv(VARCHAR,utf8mb4_bin,length:2,NULL,'06')], [gf_ar_mthly_bill.inv_amt=column_conv(BIGINT,PS:(20,0),
      NULL,6)], [gf_ar_mthly_bill.writingoff_amt=column_conv(BIGINT,PS:(20,0),NULL,7)], [gf_ar_mthly_bill.wrtof_dtl_cnt=column_conv(BIGINT,PS:(20,0),NULL,9)],
       [gf_ar_mthly_bill.to_wrtof_dtl_cnt=column_conv(BIGINT,PS:(20,0),NULL,8)], [gf_ar_mthly_bill.chking_amt=column_conv(BIGINT,PS:(20,0),NULL,10)], [gf_ar_mthly_bill.chked_amt=column_conv(BIGINT,
      PS:(20,0),NULL,11)], [gf_ar_mthly_bill.frz_amt=column_conv(BIGINT,PS:(20,0),NULL,12)], [gf_ar_mthly_bill.svc_bill_amt=column_conv(BIGINT,PS:(20,0),NULL,
      13)], [gf_ar_mthly_bill.gmt_modified=column_conv(TIMESTAMP,PS:(25,6),NOT NULL,timestamp_nvl('2021-05-17 12:09:34', cast(current_timestamp(), TIMESTAMP(25,
       6))))])
  1 - output([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no], [column_conv(VARCHAR,utf8mb4_bin,length:4,NULL,substr(gf_ar_mthly_bill.bill_no,
       23, 2))], [gf_ar_mthly_bill.bill_st], [gf_ar_mthly_bill.gmt_pay], [gf_ar_mthly_bill.clcn_bsc_amt], [gf_ar_mthly_bill.bill_amt], [gf_ar_mthly_bill.rcvd_amt],
       [gf_ar_mthly_bill.tax_amt], [gf_ar_mthly_bill.exn_inf], [gf_ar_mthly_bill.anl_dmsn1], [gf_ar_mthly_bill.anl_dmsn2], [gf_ar_mthly_bill.anl_dmsn3], [gf_ar_mthly_bill.anl_dmsn4],
       [gf_ar_mthly_bill.last_moder], [gf_ar_mthly_bill.adj_amt], [gf_ar_mthly_bill.svc_amt], [gf_ar_mthly_bill.chk_st], [gf_ar_mthly_bill.inv_amt], [gf_ar_mthly_bill.writingoff_amt],
       [gf_ar_mthly_bill.wrtof_dtl_cnt], [gf_ar_mthly_bill.to_wrtof_dtl_cnt], [gf_ar_mthly_bill.chking_amt], [gf_ar_mthly_bill.chked_amt], [gf_ar_mthly_bill.frz_amt],
       [gf_ar_mthly_bill.svc_bill_amt], [gf_ar_mthly_bill.gmt_modified], [gf_ar_mthly_bill.ip_id], [gf_ar_mthly_bill.ip_role_id], [gf_ar_mthly_bill.inst_id], 
      [gf_ar_mthly_bill.pd_code], [gf_ar_mthly_bill.ar_no], [gf_ar_mthly_bill.bill_tp], [gf_ar_mthly_bill.setl_tp], [gf_ar_mthly_bill.bill_strt_dt], [gf_ar_mthly_bill.bill_end_dt],
       [gf_ar_mthly_bill.bill_mth], [gf_ar_mthly_bill.acrd_dt], [gf_ar_mthly_bill.payee_ac], [gf_ar_mthly_bill.payer_ac], [gf_ar_mthly_bill.pay_way], [gf_ar_mthly_bill.pay_orig],
       [gf_ar_mthly_bill.clcn_bsc_tp], [gf_ar_mthly_bill.clcn_mthd], [gf_ar_mthly_bill.chrg_itm_code], [gf_ar_mthly_bill.ccy], [gf_ar_mthly_bill.tax_tp], [gf_ar_mthly_bill.tax_rate],
       [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.gmt_create], [gf_ar_mthly_bill.charge_tp], [gf_ar_mthly_bill.stl_ip_role_id], [gf_ar_mthly_bill.inved_amt],
       [gf_ar_mthly_bill.acnt_day], [gf_ar_mthly_bill.rel_inv_amt], [gf_ar_mthly_bill.tp], [gf_ar_mthly_bill.payer_ip_role_id], [gf_ar_mthly_bill.sgn_ip_id], 
      [gf_ar_mthly_bill.sgn_ip_role_id], [gf_ar_mthly_bill.svc_ccy], [gf_ar_mthly_bill.env_source], [gf_ar_mthly_bill.metadata_source], [gf_ar_mthly_bill.setl_time_zone],
       [gf_ar_mthly_bill.actg_time_zone], [gf_ar_mthly_bill.inter_trade_flag], [gf_ar_mthly_bill.actg_bill_mth], [gf_ar_mthly_bill.auto_writeoff_group_no]), filter(nil), rowset=16
      access([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no], [gf_ar_mthly_bill.bill_st], [gf_ar_mthly_bill.gmt_pay], [gf_ar_mthly_bill.clcn_bsc_amt],
       [gf_ar_mthly_bill.bill_amt], [gf_ar_mthly_bill.rcvd_amt], [gf_ar_mthly_bill.tax_amt], [gf_ar_mthly_bill.exn_inf], [gf_ar_mthly_bill.anl_dmsn1], [gf_ar_mthly_bill.anl_dmsn2],
       [gf_ar_mthly_bill.anl_dmsn3], [gf_ar_mthly_bill.anl_dmsn4], [gf_ar_mthly_bill.last_moder], [gf_ar_mthly_bill.adj_amt], [gf_ar_mthly_bill.svc_amt], [gf_ar_mthly_bill.chk_st],
       [gf_ar_mthly_bill.inv_amt], [gf_ar_mthly_bill.writingoff_amt], [gf_ar_mthly_bill.wrtof_dtl_cnt], [gf_ar_mthly_bill.to_wrtof_dtl_cnt], [gf_ar_mthly_bill.chking_amt],
       [gf_ar_mthly_bill.chked_amt], [gf_ar_mthly_bill.frz_amt], [gf_ar_mthly_bill.svc_bill_amt], [gf_ar_mthly_bill.gmt_modified], [gf_ar_mthly_bill.ip_id], [gf_ar_mthly_bill.ip_role_id],
       [gf_ar_mthly_bill.inst_id], [gf_ar_mthly_bill.pd_code], [gf_ar_mthly_bill.ar_no], [gf_ar_mthly_bill.bill_tp], [gf_ar_mthly_bill.setl_tp], [gf_ar_mthly_bill.bill_strt_dt],
       [gf_ar_mthly_bill.bill_end_dt], [gf_ar_mthly_bill.bill_mth], [gf_ar_mthly_bill.acrd_dt], [gf_ar_mthly_bill.payee_ac], [gf_ar_mthly_bill.payer_ac], [gf_ar_mthly_bill.pay_way],
       [gf_ar_mthly_bill.pay_orig], [gf_ar_mthly_bill.clcn_bsc_tp], [gf_ar_mthly_bill.clcn_mthd], [gf_ar_mthly_bill.chrg_itm_code], [gf_ar_mthly_bill.ccy], [gf_ar_mthly_bill.tax_tp],
       [gf_ar_mthly_bill.tax_rate], [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.gmt_create], [gf_ar_mthly_bill.charge_tp], [gf_ar_mthly_bill.stl_ip_role_id],
       [gf_ar_mthly_bill.inved_amt], [gf_ar_mthly_bill.acnt_day], [gf_ar_mthly_bill.rel_inv_amt], [gf_ar_mthly_bill.tp], [gf_ar_mthly_bill.payer_ip_role_id], 
      [gf_ar_mthly_bill.sgn_ip_id], [gf_ar_mthly_bill.sgn_ip_role_id], [gf_ar_mthly_bill.svc_ccy], [gf_ar_mthly_bill.env_source], [gf_ar_mthly_bill.metadata_source],
       [gf_ar_mthly_bill.setl_time_zone], [gf_ar_mthly_bill.actg_time_zone], [gf_ar_mthly_bill.inter_trade_flag], [gf_ar_mthly_bill.actg_bill_mth], [gf_ar_mthly_bill.auto_writeoff_group_no]), partitions(p3)
      is_index_back=false, is_global_index=false, 
      range_key([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no]), range[ylctest,2018090310122000040400820033834415 ; ylctest,2018090310122000040400820033834415],
       
      range_cond([gf_ar_mthly_bill.tnt_inst_id = cast('ylctest', VARCHAR(1048576))], [gf_ar_mthly_bill.bill_no = cast('2018090310122000040400820033834415',
       VARCHAR(1048576))])
update gf_ar_mthly_bill
    set bill_st='01',
    gmt_pay='2021-05-17 12:09:35',
    clcn_bsc_amt='123.12',
    bill_amt=1,
    rcvd_amt=2,
    tax_amt=3,
    exn_inf='123456',
    anl_dmsn1='123456',
    anl_dmsn2='234567',
    anl_dmsn3='345678',
    anl_dmsn4='456789',
    last_moder='ylc',
    adj_amt=4,
    svc_amt = 5,
    chk_st = '06',
    inv_amt = 6,
    writingoff_amt = 7,
    wrtof_dtl_cnt = 9 , 
    to_wrtof_dtl_cnt = 8,
    chking_amt=10,
    chked_amt=11,
    frz_amt=12,
    svc_bill_amt=13,
    gmt_modified='2021-05-17 12:09:34'
 where
    tnt_inst_id='ylctest' and bill_no='2018090310122000040400820033834415';

EXPLAIN BASIC select * from gf_ar_mthly_bill;
Query Plan
=========================================================================
|ID|OPERATOR                   |NAME                                    |
-------------------------------------------------------------------------
|0 |DISTRIBUTED TABLE FULL SCAN|gf_ar_mthly_bill(uk_tnt_inst_id_rcrd_id)|
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no], [gf_ar_mthly_bill.ip_id], [gf_ar_mthly_bill.ip_role_id], [gf_ar_mthly_bill.inst_id],
       [gf_ar_mthly_bill.pd_code], [gf_ar_mthly_bill.ar_no], [gf_ar_mthly_bill.bill_tp], [gf_ar_mthly_bill.setl_tp], [gf_ar_mthly_bill.bill_st], [gf_ar_mthly_bill.bill_strt_dt],
       [gf_ar_mthly_bill.bill_end_dt], [gf_ar_mthly_bill.bill_mth], [gf_ar_mthly_bill.acrd_dt], [gf_ar_mthly_bill.gmt_pay], [gf_ar_mthly_bill.payee_ac], [gf_ar_mthly_bill.payer_ac],
       [gf_ar_mthly_bill.pay_way], [gf_ar_mthly_bill.pay_orig], [gf_ar_mthly_bill.clcn_bsc_amt], [gf_ar_mthly_bill.clcn_bsc_tp], [gf_ar_mthly_bill.clcn_mthd],
       [gf_ar_mthly_bill.chrg_itm_code], [gf_ar_mthly_bill.ccy], [gf_ar_mthly_bill.bill_amt], [gf_ar_mthly_bill.adj_amt], [gf_ar_mthly_bill.rcvd_amt], [gf_ar_mthly_bill.tax_tp],
       [gf_ar_mthly_bill.tax_rate], [gf_ar_mthly_bill.tax_amt], [gf_ar_mthly_bill.exn_inf], [gf_ar_mthly_bill.anl_dmsn1], [gf_ar_mthly_bill.anl_dmsn2], [gf_ar_mthly_bill.anl_dmsn3],
       [gf_ar_mthly_bill.anl_dmsn4], [gf_ar_mthly_bill.wrtof_dtl_cnt], [gf_ar_mthly_bill.to_wrtof_dtl_cnt], [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.last_moder],
       [gf_ar_mthly_bill.gmt_create], [gf_ar_mthly_bill.gmt_modified], [gf_ar_mthly_bill.charge_tp], [gf_ar_mthly_bill.stl_ip_role_id], [gf_ar_mthly_bill.svc_amt],
       [gf_ar_mthly_bill.inved_amt], [gf_ar_mthly_bill.chk_st], [gf_ar_mthly_bill.acnt_day], [gf_ar_mthly_bill.inv_amt], [gf_ar_mthly_bill.rel_inv_amt], [gf_ar_mthly_bill.tp],
       [gf_ar_mthly_bill.payer_ip_role_id], [gf_ar_mthly_bill.sgn_ip_id], [gf_ar_mthly_bill.sgn_ip_role_id], [gf_ar_mthly_bill.chking_amt], [gf_ar_mthly_bill.frz_amt],
       [gf_ar_mthly_bill.chked_amt], [gf_ar_mthly_bill.writingoff_amt], [gf_ar_mthly_bill.svc_bill_amt], [gf_ar_mthly_bill.svc_ccy], [gf_ar_mthly_bill.env_source],
       [gf_ar_mthly_bill.metadata_source], [gf_ar_mthly_bill.setl_time_zone], [gf_ar_mthly_bill.actg_time_zone], [gf_ar_mthly_bill.inter_trade_flag], [gf_ar_mthly_bill.actg_bill_mth],
       [gf_ar_mthly_bill.auto_writeoff_group_no], [column_conv(VARCHAR,utf8mb4_bin,length:4,NULL,substr(gf_ar_mthly_bill.bill_no, 23, 2))]), filter(nil), rowset=16
      access([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.bill_no], [gf_ar_mthly_bill.ip_id], [gf_ar_mthly_bill.ip_role_id], [gf_ar_mthly_bill.inst_id],
       [gf_ar_mthly_bill.pd_code], [gf_ar_mthly_bill.ar_no], [gf_ar_mthly_bill.bill_tp], [gf_ar_mthly_bill.setl_tp], [gf_ar_mthly_bill.bill_st], [gf_ar_mthly_bill.bill_strt_dt],
       [gf_ar_mthly_bill.bill_end_dt], [gf_ar_mthly_bill.bill_mth], [gf_ar_mthly_bill.acrd_dt], [gf_ar_mthly_bill.gmt_pay], [gf_ar_mthly_bill.payee_ac], [gf_ar_mthly_bill.payer_ac],
       [gf_ar_mthly_bill.pay_way], [gf_ar_mthly_bill.pay_orig], [gf_ar_mthly_bill.clcn_bsc_amt], [gf_ar_mthly_bill.clcn_bsc_tp], [gf_ar_mthly_bill.clcn_mthd],
       [gf_ar_mthly_bill.chrg_itm_code], [gf_ar_mthly_bill.ccy], [gf_ar_mthly_bill.bill_amt], [gf_ar_mthly_bill.adj_amt], [gf_ar_mthly_bill.rcvd_amt], [gf_ar_mthly_bill.tax_tp],
       [gf_ar_mthly_bill.tax_rate], [gf_ar_mthly_bill.tax_amt], [gf_ar_mthly_bill.exn_inf], [gf_ar_mthly_bill.anl_dmsn1], [gf_ar_mthly_bill.anl_dmsn2], [gf_ar_mthly_bill.anl_dmsn3],
       [gf_ar_mthly_bill.anl_dmsn4], [gf_ar_mthly_bill.wrtof_dtl_cnt], [gf_ar_mthly_bill.to_wrtof_dtl_cnt], [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.last_moder],
       [gf_ar_mthly_bill.gmt_create], [gf_ar_mthly_bill.gmt_modified], [gf_ar_mthly_bill.charge_tp], [gf_ar_mthly_bill.stl_ip_role_id], [gf_ar_mthly_bill.svc_amt],
       [gf_ar_mthly_bill.inved_amt], [gf_ar_mthly_bill.chk_st], [gf_ar_mthly_bill.acnt_day], [gf_ar_mthly_bill.inv_amt], [gf_ar_mthly_bill.rel_inv_amt], [gf_ar_mthly_bill.tp],
       [gf_ar_mthly_bill.payer_ip_role_id], [gf_ar_mthly_bill.sgn_ip_id], [gf_ar_mthly_bill.sgn_ip_role_id], [gf_ar_mthly_bill.chking_amt], [gf_ar_mthly_bill.frz_amt],
       [gf_ar_mthly_bill.chked_amt], [gf_ar_mthly_bill.writingoff_amt], [gf_ar_mthly_bill.svc_bill_amt], [gf_ar_mthly_bill.svc_ccy], [gf_ar_mthly_bill.env_source],
       [gf_ar_mthly_bill.metadata_source], [gf_ar_mthly_bill.setl_time_zone], [gf_ar_mthly_bill.actg_time_zone], [gf_ar_mthly_bill.inter_trade_flag], [gf_ar_mthly_bill.actg_bill_mth],
       [gf_ar_mthly_bill.auto_writeoff_group_no]), partitions(p0)
      is_index_back=true, is_global_index=true, keep_ordering=true, 
      range_key([gf_ar_mthly_bill.tnt_inst_id], [gf_ar_mthly_bill.rcrd_id], [gf_ar_mthly_bill.shadow_pk_0], [gf_ar_mthly_bill.shadow_pk_1]), range(MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX)always true
select * from gf_ar_mthly_bill;

| tnt_inst_id | bill_no                            | ip_id | ip_role_id | inst_id | pd_code | ar_no | bill_tp | setl_tp | bill_st | bill_strt_dt | bill_end_dt | bill_mth | acrd_dt | gmt_pay                    | payee_ac | payer_ac | pay_way | pay_orig | clcn_bsc_amt | clcn_bsc_tp | clcn_mthd | chrg_itm_code | ccy | bill_amt | adj_amt | rcvd_amt | tax_tp | tax_rate   | tax_amt | exn_inf | anl_dmsn1 | anl_dmsn2 | anl_dmsn3 | anl_dmsn4 | wrtof_dtl_cnt | to_wrtof_dtl_cnt | rcrd_id | last_moder | gmt_create                 | gmt_modified               | charge_tp | stl_ip_role_id | svc_amt | inved_amt | chk_st | acnt_day | inv_amt | rel_inv_amt | tp   | payer_ip_role_id | sgn_ip_id | sgn_ip_role_id | chking_amt | frz_amt | chked_amt | writingoff_amt | svc_bill_amt | svc_ccy | env_source | metadata_source | setl_time_zone | actg_time_zone | inter_trade_flag | actg_bill_mth | auto_writeoff_group_no | partition_id |

| ylctest     | 2018090310122000040400820033834415 | 1     | 1          | 1       | NULL    | NULL  | 1       | 1       | 01      | 1            | 1           | 1        | NULL    | 2021-05-17 12:09:35.000000 | NULL     | NULL     | NULL    | NULL     |     123.1200 | NULL        | NULL      | NULL          | 1   |        1 |       4 |        2 | 1      | 1.00000000 |       3 | 123456  | 123456    | 234567    | 345678    | 456789    |             9 |                8 | 1       | ylc        | 2021-05-17 12:09:34.000000 | 2021-05-17 12:09:34.000000 | NULL      | NULL           |       5 |      NULL | 06     | NULL     |       6 |        NULL | NULL | NULL             | NULL      | NULL           |         10 |      12 |        11 |              7 |           13 | NULL    | NULL       | NULL            | NULL           | NULL           | NULL             | NULL          | NULL                   | 82           |

drop table gf_ar_mthly_bill;
set binlog_row_image='FULL';

drop table if exists TBFUNDSALESTAT;
Warnings:
Note	1051	Unknown table 'test.tbfundsalestat'
CREATE TABLE TBFUNDSALESTAT (
  PRD_CODE VARCHAR(32) DEFAULT ' ',
  SELLER_CODE VARCHAR(9) DEFAULT ' ',
  HOLD_AMT NUMBER(18,2) DEFAULT 0 
);


EXPLAIN BASIC UPDATE tbfundsalestat a
SET    a.hold_amt = (SELECT /*+merge*/Sum(c.hold_amt)
                      FROM tbfundsalestat c
                      WHERE c.prd_code = a.prd_code)
WHERE  a.seller_code = (SELECT /*+unnest*/Max(b.seller_code)
                            FROM   tbfundsalestat b
                            WHERE  a.prd_code = b.prd_code);
Query Plan
========================================
|ID|OPERATOR                     |NAME |
----------------------------------------
|0 |UPDATE                       |     |
|1 |└─SUBPLAN SCAN               |VIEW3|
|2 |  └─HASH GROUP BY            |     |
|3 |    └─HASH RIGHT OUTER JOIN  |     |
|4 |      ├─TABLE FULL SCAN      |c    |
|5 |      └─HASH JOIN            |     |
|6 |        ├─SUBPLAN SCAN       |VIEW1|
|7 |        │ └─HASH GROUP BY    |     |
|8 |        │   └─TABLE FULL SCAN|b    |
|9 |        └─TABLE FULL SCAN    |a    |
========================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{VIEW3: ({tbfundsalestat: (VIEW3.a.__pk_increment, VIEW3.a.PRD_CODE, VIEW3.a.SELLER_CODE, VIEW3.a.HOLD_AMT)}), hash_distinct}]),
      update([VIEW3.a.HOLD_AMT=column_conv(DECIMAL_INT,PS:(18,2),NULL,cast(VIEW3.VIEW2.Sum(c.hold_amt), DECIMAL_INT(18, 2)))])
  1 - output([VIEW3.a.__pk_increment], [VIEW3.a.PRD_CODE], [VIEW3.a.SELLER_CODE], [VIEW3.a.HOLD_AMT], [VIEW3.VIEW2.Sum(c.hold_amt)]), filter(nil), rowset=16
      access([VIEW3.a.__pk_increment], [VIEW3.a.PRD_CODE], [VIEW3.a.SELLER_CODE], [VIEW3.a.HOLD_AMT], [VIEW3.VIEW2.Sum(c.hold_amt)])
  2 - output([a.__pk_increment], [a.PRD_CODE], [a.SELLER_CODE], [a.HOLD_AMT], [T_FUN_SUM(c.HOLD_AMT)]), filter(nil), rowset=16
      group([a.__pk_increment], [c.PRD_CODE]), agg_func([T_FUN_SUM(c.HOLD_AMT)])
  3 - output([a.__pk_increment], [c.PRD_CODE], [a.PRD_CODE], [a.SELLER_CODE], [a.HOLD_AMT], [c.HOLD_AMT]), filter(nil), rowset=16
      equal_conds([c.PRD_CODE = a.PRD_CODE]), other_conds(nil)
  4 - output([c.PRD_CODE], [c.HOLD_AMT]), filter(nil), rowset=16
      access([c.PRD_CODE], [c.HOLD_AMT]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  5 - output([a.__pk_increment], [a.PRD_CODE], [a.SELLER_CODE], [a.HOLD_AMT]), filter(nil), rowset=16
      equal_conds([a.SELLER_CODE = VIEW1.Max(b.seller_code)], [a.PRD_CODE = VIEW1.b.PRD_CODE]), other_conds(nil)
  6 - output([VIEW1.Max(b.seller_code)], [VIEW1.b.PRD_CODE]), filter(nil), rowset=16
      access([VIEW1.Max(b.seller_code)], [VIEW1.b.PRD_CODE])
  7 - output([T_FUN_MAX(b.SELLER_CODE)], [b.PRD_CODE]), filter(nil), rowset=16
      group([b.PRD_CODE]), agg_func([T_FUN_MAX(b.SELLER_CODE)])
  8 - output([b.PRD_CODE], [b.SELLER_CODE]), filter(nil), rowset=16
      access([b.PRD_CODE], [b.SELLER_CODE]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
  9 - output([a.__pk_increment], [a.HOLD_AMT], [a.PRD_CODE], [a.SELLER_CODE]), filter(nil), rowset=16
      access([a.__pk_increment], [a.HOLD_AMT], [a.PRD_CODE], [a.SELLER_CODE]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
UPDATE tbfundsalestat a
SET    a.hold_amt = (SELECT /*+merge*/Sum(c.hold_amt)
                      FROM tbfundsalestat c
                      WHERE c.prd_code = a.prd_code)
WHERE  a.seller_code = (SELECT /*+unnest*/Max(b.seller_code)
                            FROM   tbfundsalestat b
                            WHERE  a.prd_code = b.prd_code);


EXPLAIN BASIC UPDATE tbfundsalestat a
SET    a.hold_amt = (SELECT /*+merge*/Sum(c.hold_amt)
                      FROM tbfundsalestat c
                      WHERE c.prd_code = a.prd_code)
WHERE  a.seller_code = (SELECT /*+unnest*/Max(b.seller_code)
                            FROM   tbfundsalestat b
                            WHERE  a.prd_code = b.prd_code);
Query Plan
========================================
|ID|OPERATOR                     |NAME |
----------------------------------------
|0 |UPDATE                       |     |
|1 |└─SUBPLAN SCAN               |VIEW3|
|2 |  └─HASH GROUP BY            |     |
|3 |    └─HASH RIGHT OUTER JOIN  |     |
|4 |      ├─TABLE FULL SCAN      |c    |
|5 |      └─HASH JOIN            |     |
|6 |        ├─SUBPLAN SCAN       |VIEW1|
|7 |        │ └─HASH GROUP BY    |     |
|8 |        │   └─TABLE FULL SCAN|b    |
|9 |        └─TABLE FULL SCAN    |a    |
========================================
Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil)
      table_columns([{VIEW3: ({tbfundsalestat: (VIEW3.a.__pk_increment, VIEW3.a.PRD_CODE, VIEW3.a.SELLER_CODE, VIEW3.a.HOLD_AMT)}), hash_distinct}]),
      update([VIEW3.a.HOLD_AMT=column_conv(DECIMAL_INT,PS:(18,2),NULL,cast(VIEW3.VIEW2.Sum(c.hold_amt), DECIMAL_INT(18, 2)))])
  1 - output([VIEW3.a.__pk_increment], [VIEW3.a.PRD_CODE], [VIEW3.a.SELLER_CODE], [VIEW3.a.HOLD_AMT], [VIEW3.VIEW2.Sum(c.hold_amt)]), filter(nil), rowset=16
      access([VIEW3.a.__pk_increment], [VIEW3.a.PRD_CODE], [VIEW3.a.SELLER_CODE], [VIEW3.a.HOLD_AMT], [VIEW3.VIEW2.Sum(c.hold_amt)])
  2 - output([a.__pk_increment], [a.PRD_CODE], [a.SELLER_CODE], [a.HOLD_AMT], [T_FUN_SUM(c.HOLD_AMT)]), filter(nil), rowset=16
      group([a.__pk_increment], [c.PRD_CODE]), agg_func([T_FUN_SUM(c.HOLD_AMT)])
  3 - output([a.__pk_increment], [c.PRD_CODE], [a.PRD_CODE], [a.SELLER_CODE], [a.HOLD_AMT], [c.HOLD_AMT]), filter(nil), rowset=16
      equal_conds([c.PRD_CODE = a.PRD_CODE]), other_conds(nil)
  4 - output([c.PRD_CODE], [c.HOLD_AMT]), filter(nil), rowset=16
      access([c.PRD_CODE], [c.HOLD_AMT]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  5 - output([a.__pk_increment], [a.PRD_CODE], [a.SELLER_CODE], [a.HOLD_AMT]), filter(nil), rowset=16
      equal_conds([a.SELLER_CODE = VIEW1.Max(b.seller_code)], [a.PRD_CODE = VIEW1.b.PRD_CODE]), other_conds(nil)
  6 - output([VIEW1.Max(b.seller_code)], [VIEW1.b.PRD_CODE]), filter(nil), rowset=16
      access([VIEW1.Max(b.seller_code)], [VIEW1.b.PRD_CODE])
  7 - output([T_FUN_MAX(b.SELLER_CODE)], [b.PRD_CODE]), filter(nil), rowset=16
      group([b.PRD_CODE]), agg_func([T_FUN_MAX(b.SELLER_CODE)])
  8 - output([b.PRD_CODE], [b.SELLER_CODE]), filter(nil), rowset=16
      access([b.PRD_CODE], [b.SELLER_CODE]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
  9 - output([a.__pk_increment], [a.HOLD_AMT], [a.PRD_CODE], [a.SELLER_CODE]), filter(nil), rowset=16
      access([a.__pk_increment], [a.HOLD_AMT], [a.PRD_CODE], [a.SELLER_CODE]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
UPDATE tbfundsalestat a
SET    a.hold_amt = (SELECT /*+merge*/Sum(c.hold_amt)
                      FROM tbfundsalestat c
                      WHERE c.prd_code = a.prd_code)
WHERE  a.seller_code = (SELECT /*+unnest*/Max(b.seller_code)
                            FROM   tbfundsalestat b
                            WHERE  a.prd_code = b.prd_code);

drop table if exists TBFUNDSALESTAT;
