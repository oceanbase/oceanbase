#owner: yunxing.cyx
#owner group: trans
#tags: trx, tx_free_route

connect (sys,$OBMYSQL_MS0,root,"",oceanbase,$OBMYSQL_PORT);

connection sys;

# alter proxy config for this test
--disable_abort_on_error
--disable_query_log
--disable_result_log
eval alter proxyconfig set enable_single_leader_node_routing=0;
let $client_session_id_version=query_get_value(show proxyconfigs like 'client_session_id_version', value, 1);
if ($client_session_id_version == '2') {
  let proxy_id=query_get_value(show proxyconfigs like 'proxy_id', value, 1);
  alter proxyconfig set proxy_id = 1;
  alter proxyconfig set client_session_id_version = 1;
}
--enable_abort_on_error
--enable_query_log
--enable_result_log

let $compat_mode=mysql;
--source mysql_test/test_suite/trx/t/tx_free_route.inc

connection conn0;

--echo "-------------- 1 - basic in txn free route -----------------"
#--------------------------------------------------------------------------
#    Server1           Server2
#    ---------------   --------------------
#CASE 1: cross
#    begin;insert 10
#                      insert 10001
#    rollback
#                      begin; insert 10002;
#    insert 11
#                      commit;
#CASE 2: begin implicit commit
#   begin;insert 20
#                      insert 10003
#   begin;
#                      insert 10004
#   begin;
#   commit;
#--------------------------------------------------------------------------
set autocommit=1;
--echo "CASE 1.1"
begin;
insert into t(id) values(10);
let $session_1=`select connection_id()`;
insert into t(id) values(10001);
let $session_2=`select connection_id()`;
rollback;
if ($session_1 == $session_2) {  --echo "explicit txn not free routed !! $session_1 = $session_2"
}
select "txn rollback atomic", count(1) from t where id in (10,10001);
begin;
insert into t(id) values(10002);
let $session_1=`select connection_id()`;
insert into t(id) values(11);
let $session_2=`select connection_id()`;
commit;
if ($session_1 == $session_2) { --echo "explicit txn not free routed !! $session_1 = $session_2"
}
select "txn commit atomic", count(2) from t where id in (11,10002);
--echo "CASE 1.2"
begin;
insert into t(id) values(20);
let $session_1=`select connection_id()`;
insert into t(id) values(10003);
let $session_2=`select connection_id()`;
--echo "implicit commit prev txn and start new one"
begin;
insert into t(id) values(10004);
let $session_3=`select connection_id()`;
begin;
commit;
let $tx_id_1=query_get_value(select transaction_id from oceanbase.__all_virtual_sql_audit where session_id = $session_1 and query_sql = 'insert into t(id) values(20)' order by request_time desc, transaction_id, 1);
let $tx_id_2=query_get_value(select transaction_id from oceanbase.__all_virtual_sql_audit where session_id = $session_2 and query_sql = 'insert into t(id) values(10003)' order by request_time desc, transaction_id, 1);
let $tx_id_3=query_get_value(select transaction_id from oceanbase.__all_virtual_sql_audit where session_id = $session_3 and query_sql = 'insert into t(id) values(10004)' order by request_time desc, transaction_id, 1);
if ($session_1 == $session_2) { --echo "txn not free routed !! $session_1 = $session_2"
}
if ($session_2 != $session_3) { --echo "txn not free routed !! $session_1 = $session_2"
}
if ($tx_id_1 != $tx_id_2) {
if ($tx_id_2 != "No such row") {
if ($tx_id_1 != "No such row") {  --echo "oops ! txn split !! tx_id: $tx_id_1, $tx_id_2"
}
}
}
if ($tx_id_1 == $tx_id_3) {
if ($tx_id_1 != "No such row") { --echo "oops ! txn implicit commit not works !! tx_id: $tx_id_1, $tx_id_3"
}
}
--echo "------------- 2 - implicit start txn ----------------------"
#--------------------------------------------------------------------------
#    Server1           Server2
#    ---------------   --------------------
##Case 1: cross
#    insert 12
#                      insert 1000000003
#    rollback
#                      insert 1000000004;
#    insert 13
#                      commit;
##Case 2: select will not sync state repeately
#    insert 14
#                      select 1000000003;
#    select 14
#                      select 1000000004;
#    rollback;
#--------------------------------------------------------------------------
--echo "CASE 2.1"
set autocommit=0;
insert into t(id) values(12);
let $session_1=`select connection_id()`;
insert into t(id) values(1000000003);
let $session_2=`select connection_id()`;
rollback;
if ($session_1 == $session_2) { --echo "implicit txn not free routed !! $session_1 = $session_2"
}
select "implicit txn rollback atomic", count(1) from t where id in (12,1000000003);
insert into t(id) values(1000000004);
let $session_1=`select connection_id()`;
insert into t(id) values(13);
let $session_2=`select connection_id()`;
commit;
if ($session_1 == $session_2) { --echo "implicit txn not free routed !! $session_1 = $session_2"
}
select "implicit txn commit atomic", count(1) from t where id in (13,1000000004);
--echo "CASE 2.2"
set autocommit=0;
insert into t(id) values(14);
let $s1=`select connection_id()`;
select * from t where id = 1000000003;
let $s2=`select connection_id()`;
select * from t where id = 14;
let $s3=`select connection_id()`;
select * from t where id = 1000000004;
let $s4=`select connection_id()`;
rollback;
if ($s1 == $s2) { --echo "not free routed 1=$s1, 2=$s2";
}
if ($s3 == $s2) { --echo "not free routed 3=$3, 2=$s2";
}
if ($s4 != $s2) { --echo "unexpect route 4=$s4, 2=$s2";
}

--echo "------------- 3 - serializable read only txn ----------------------"
#--------------------------------------------------------------------------
#    Server1           Server2
#    ---------------   --------------------
##Case 1: cross
#    select 14
#                      select 1000000005;
#    commit;
#                      select 1000000006; // release old
#    select 15
#                      rollback;
##Case 2: release old, start txn remote
#    select 16
#                      insert 10000016;
#    commit;
##Case 3: release old remote of full, add extra only
#    select 17
#                      select 10000017;
#    insert 18
#    commit;
##Case 4: release old remote of extra only, add full
#    insert 19
#                     select 100000018; // replace
#    commit;
#--------------------------------------------------------------------------
set autocommit=0;
--echo "CASE 3.1"
set session transaction isolation level serializable;
select * from t where id = 14;
let $session_1=`select connection_id()`;
select * from t where id = 1000000005;
let $session_2=`select connection_id()`;
commit;
if ($session_1 == $session_2) { --echo "serializable read only txn not free routed !! $session_1 = $session_2";
}
let $snapshot_1=query_get_value(select snapshot_version from oceanbase.__all_virtual_sql_audit where session_id = $session_1 and query_sql = 'select * from t where id = 14' order by request_time desc, snapshot_version, 1);
let $snapshot_2=query_get_value(select snapshot_version from oceanbase.__all_virtual_sql_audit where session_id = $session_2 and query_sql = 'select * from t where id = 1000000005' order by request_time desc, snapshot_version, 1);
if ($snapshot_1 == 0) { --echo "unexpected snapshot version 0";
}
if ($snapshot_1 != $snapshot_2) {
if ($snapshot_2 != "No such row") {
if ($snapshot_1 != "No such row") { --echo "serializable read only txn snapshot volation !! $snapshot_1 = $snapshot_2";
}
}
}

--echo "commit a txn to promise max commit ts was advanced"
connection conn1;
set autocommit=0;
insert into t(id) values(100),(20000);
delete from t where id in (100,20000);
commit;
--echo "continue second read only txn"
connection conn0;
select * from t where id = 1000000006;
let $session_1=`select connection_id()`;
select * from t where id = 15;
let $session_2=`select connection_id()`;
commit;
if ($session_1 == $session_2) {  --echo "serializable read only txn not free routed !! $session_1 = $session_2";
}
let $snapshot_2_1=query_get_value(select snapshot_version from oceanbase.__all_virtual_sql_audit where session_id = $session_1 and query_sql = 'select * from t where id = 1000000006' order by request_time desc, snapshot_version, 1);
let $snapshot_2_2=query_get_value(select snapshot_version from oceanbase.__all_virtual_sql_audit where session_id = $session_2 and query_sql = 'select * from t where id = 15' order by request_time desc, snapshot_version, 1);
if ($snapshot_2_1 == 0) { --echo "unexpected snapshot version 0";
}
if ($snapshot_2_1 != $snapshot_2_2) {
if ($snapshot_2_2 != "No such row") {
if ($snapshot_2_1 != "No such row") { --echo "serializable read only txn snapshot volation !! $snapshot_2_1 = $snapshot_2_2";
}
}
}
if ($snapshot_2_1 == $snapshot_1) {
if ($snapshot_2_1 != "No such row") { --echo "serializable read only txn snapshot not changed after commit !! $snapshot_2_1 = $snapshot_1";
}
}

--echo "CASE 3.2"
select * from t where id = 16;
let $session_1=`select connection_id()`;
insert into t(id) values(10000016);
let $session_2=`select connection_id()`;
commit;
if ($session_2 == $session_1) { --echo "txn is not freely routed !! $session_1 = $session_2";
}
--echo "CASE 3.3"
select * from t where id = 17;
let $session_1=`select connection_id()`;
select * from t where id = 10000017;
let $session_2=`select connection_id()`;
insert into t(id) values(18);
let $session_3=`select connection_id()`;
commit;
if ($session_2 == $session_1) { --echo "txn is not freely routed !! session: 1=$session_1, 2=$session_2";
}
if ($session_3 == $session_2) { --echo "txn is not freely routed !! session: 1=$session_2, 2=$session_3";
}
let $snapshot_1=query_get_value(select snapshot_version from oceanbase.__all_virtual_sql_audit where session_id = $session_1 and query_sql = 'select * from t where id = 17' order by request_time desc, snapshot_version, 1);
let $snapshot_2=query_get_value(select snapshot_version from oceanbase.__all_virtual_sql_audit where session_id = $session_2 and query_sql = 'select * from t where id = 10000017' order by request_time desc, snapshot_version, 1);
if ($snapshot_1 == 0) { --echo "unexpected snapshot version 0";
}
if ($snapshot_1 != $snapshot_2) {
if ($snapshot_2 != "No such row") {
if ($snapshot_1 != "No such row") { --echo "serializable read only txn snapshot volation !! $snapshot_1 = $snapshot_2";
}
}
}
--echo "CASE 3.4"
insert into t(id) values(19);
let $session_1=`select connection_id()`;
select * from t where id = 10000018;
let $session_2=`select connection_id()`;
commit;
if ($session_2 == $session_1) { --echo "txn is not freely routed !! session: 1=$session_1, 2=$session_2";
}
--echo "recovery isolation level to RC"
set session transaction isolation level read committed;

--echo "------------- 4 - savepoint leading txn ----------------------"
#--------------------------------------------------------------------------
#    Server1           Server2
#    ---------------   --------------------
##Case 1: sync extra to remote, RC, no snapshot set
#    savepoint sp0
#    select 105
#                      select 1000005; // snapshot = v0
#    savepoint sp1
##Case 2: snapshot is set on remote
#    set session SERIALIZABLE
#                      select 1000006; // snapshot = v1
##Case 3: snapshot is synced from remote
#    select 101; // snapshot = v1
#                      insert 1000006; // start txn on remote
#    savepoint sp2
#                      insert 1000007;
#    insert 1007;
#    select 1007, 1000007, 1000006
##Case 4: rollback savepoint cross nodes
#    rollback to sp2
#    select 1007, 1000007, 1000006 // => 1000006
#    commit;
##Case 5: cross txn release old, add extra
#    savepoint sp3
#    select 106
#                      select 1000007
#    commit;
##Case 6: full txn replace old of extra
#    begin;insert 108
#                      insert 1000008
#    commit;
##Case 7: extra replace full
#    savepoint sp4
#    select 109;
#                      select 1000009
#    commit;
##Case 8: extra replace extra
#    savepoint sp5;
#    select 110;
#                      select 1000010 // replace old tx desc
#    commit;
#Case 9: savepoint start trx
#    savepoint sp6;
#                      insert 1000011
#    sleep 10s
#    commit;
#--------------------------------------------------------------------------
set autocommit=0;
--echo "CASE 4.1"
savepoint sp0;
let $session_0=`select connection_id()`;
select * from t where id = 105;
let $session_1=`select connection_id()`;
select * from t where id = 1000005;
let $session_2=`select connection_id()`;
savepoint sp1;
let $session_3=`select connection_id()`;
if ($session_2 == $session_1) { --echo "txn is not freely routed !! session: 1=$session_1, 2=$session_2";
}
if ($session_0 != $session_3) { --echo "savepoint should always on same session !! session: 1=$session_0, 2=$session_3";
}
--echo "CASE 4.2"
set session transaction isolation level SERIALIZABLE;
select * from t where id = 1000006;
let $session_4=`select connection_id()`;
--echo "CASE 4.3"
select * from t where id = 101;
let $session_5=`select connection_id()`;
if ($session_4 == $session_5) { --echo "txn is not freely routed !! session: 1=$session_4, 2=$session_5";
}
insert into t(id) values(1000006);
let $session_6=`select connection_id()`;
if ($session_5 == $session_6) { --echo "txn is not freely routed !! session: 1=$session_5, 2=$session_6";
}
savepoint sp2;
let $session_7=`select connection_id()`;
if ($session_0 != $session_7) { --echo "savepoint should always on same session !! session: 1=$session_0, 2=$session_7";
}
insert into t(id) values(1000007);
let $session_8=`select connection_id()`;
insert into t(id) values(1007);
let $session_9=`select connection_id()`;
if ($session_8 == $session_9) { --echo "txn is not freely routed !! session: 1=$session_8, 2=$session_9";
}
select * from t where id in (1007, 1000007, 1000006) order by id asc;
--echo "CASE 4.4"
rollback to sp2;
select * from t where id in (1007, 1000007, 1000006) order by id asc;
commit;
--echo "CASE 4.5"
savepoint sp3;
select * from t where id = 106;
let $session_10=`select connection_id()`;
select * from t where id = 1000007;
let $session_11=`select connection_id()`;
commit;
if ($session_10 == $session_11) { --echo "txn is not freely routed !! session: 1=$session_10, 2=$session_11";
}
--echo "CASE 4.6"
begin;
insert into t(id) values(108);
let $session_1=`select connection_id()`;
insert into t(id) values(1000008);
let $session_2=`select connection_id()`;
commit;
if ($session_1 == $session_2) { --echo "txn is not freely routed !! session: 1=$session_1, 2=$session_2";
}
--echo "CASE 4.7"
savepoint sp4;
select * from t where id = 109;
let $session_1=`select connection_id()`;
select * from t where id = 1000009;
let $session_2=`select connection_id()`;
commit;
if ($session_1 == $session_2) { --echo "txn is not freely routed !! session: 1=$session_1, 2=$session_2";
}
--echo "CASE 4.8"
savepoint sp5;
select * from t where id = 110;
let $session_1=`select connection_id()`;
select * from t where id = 1000010;
let $session_2=`select connection_id()`;
commit;
if ($session_1 == $session_2) { --echo "txn is not freely routed !! session: 1=$session_1, 2=$session_2";
}
--echo "CASE 4.9"
savepoint sp6;
let $session_0=`select connection_id()`;
select * from t where id = 110;
let $session_1=`select connection_id()`;
select * from t where id = 1000010;
let $session_2=`select connection_id()`;
if ($session_0 != $session_1) {
if ($session_0 != $session_2) {
  --echo "unexpected error happen!!!";
}
}
--disable_query_log
--disable_result_log
if ($session_0 == $session_1) {
  insert into t(id) values(1000011);
  let $session_3=`select connection_id()`;
}
if ($session_0 == $session_2) {
  insert into t(id) values(888);
  let $session_3=`select connection_id()`;
}
sleep 10;
if ($session_0 == $session_1) {
  select * from t where id = 1000011;
  let $session_4=`select connection_id()`;
  let $txid =`select ob_transaction_id()`;
}
if ($session_0 == $session_2) {
  select * from t where id = 888;
  let $session_4=`select connection_id()`;
  let $txid =`select ob_transaction_id()`;
}
--enable_result_log
--enable_query_log
if ($txid == 0) {
  --echo "unexpected error happen!!!";
}
if ($session_4 != $session_3) {
  --echo "unexpected error happen!!! session: 0:$session_0, 1:$session_1, 2:$session_2, 3:$session_3, 4:$session_4";
}
commit;
if ($sp_sess == $session_3) { --echo "txn is not freely routed !! session: 1=$session_1, 2=$session_2, 3=$session_3";
}

--echo "------------- 5 - change session auto_commit ----------------------"
#--------------------------------------------------------------------------
#    Server1           Server2
#    ---------------   --------------------
##Case 1: in txn change autocommit, will commit current txn
#    set autocommit=0
#    insert 100
#                      insert 1000001
#    set autocommit=1 // cause implicit commit, must send to txn start node
#                      insert 1000002 // sync txn-state, autocommit, insert
#                      set autocommit=0
#    insert 200; // ac=0
#                      insert 1000003
#    select *
#    rollback;
#    select *
##Case 2: change autocommit after commit, txn state should synced
#    begin; insert 300
#                      insert 1000004
#    commit;
#    set autocommit=1
#                      select 1000004
##Case 3: change autocommit for txn only has savepoint
#   set autocommit=0;
#   savepoint s1
#                      insert 1000005
#   set autocommit=1
#   rollback to s1;
#                      select 1000005
#--------------------------------------------------------------------------
--echo "CASE 5.1"
delete from t;
commit;
set autocommit=0;
insert into t(id) values(100);
let $session_1=`select connection_id()`;
insert into t(id) values(1000001);
let $session_2=`select connection_id()`;
set autocommit=1;
insert into t(id) values(1000002);
let $session_3=`select connection_id()`;
set autocommit=0;
insert into t(id) values(200);
let $session_4=`select connection_id()`;
insert into t(id) values(1000003);
let $session_5=`select connection_id()`;
select * from t order by id asc;
rollback;
select * from t order by id asc;
--echo "CASE 5.2"
begin;
insert into t(id) values(300);
let $session_6=`select connection_id()`;
insert into t(id) values(1000004);
let $session_7=`select connection_id()`;
commit;
set autocommit=1;
select * from t where id = 1000004;
let $session_8=`select connection_id()`;
--echo "CASE 5.3"
select * from t where id = 1;
set autocommit=0;
savepoint s52;
let $session_9=`select connection_id()`;
insert into t(id) values(1000005);
let $session_10=`select connection_id()`;
set autocommit=1;
let $session_11=`select connection_id()`;
--error 1305
rollback to s52;
select * from t where id = 1000005;
## VERIFY FREE ROUTE
if ($session_1 == $session_2) { echo "not free route session: 1 => $session_1, 2 => $session_2";
}
if ($session_2 != $session_3) { echo "not free route session: 2 => $session_2, 3 => $session_3";
}
if ($session_3 == $session_4) { echo "not free route session: 3 => $session_3, 4 => $session_4";
}
if ($session_5 == $session_4) { echo "not free route session: 4 => $session_4, 5 => $session_5";
}
if ($session_6 == $session_7) { echo "not free route session: 6 => $session_6, 7 => $session_7";
}
if ($session_7 != $session_8) { echo "not free route session: 7 => $session_7, 8 => $session_8";
}
if ($session_9 == $session_10) { echo "not free route session: 9 => $session_9, 10 => $session_10";
}
if ($session_9 != $session_11) { echo "not free route session: 9 => $session_9, 11 => $session_11";
}

--echo "------------- 6 - switch on/off ----------------------"
#--------------------------------------------------------------------------
#    Server1           Server2
#    ---------------   --------------------
##Case 1: off
##Case 2: off -> trun on during txn
#         expect:
#            1. current txn is always routing to one node
#            2. next txn routing freely
##Case 3: on -> trun off during txn
#         expect:
#            1. current txn is continue routing freely
#            2. next txn is routing to one node
#--------------------------------------------------------------------------
echo "CASE 6.1"
connection conn1;
alter system set _enable_transaction_internal_routing = false;
connection conn0;
--disable_warnings
drop view if exists check__enable_transaction_internal_routing;
--enable_warnings
create view check__enable_transaction_internal_routing as select Value from oceanbase.gv$ob_parameters where name = '_enable_transaction_internal_routing';
commit;
delete from t;
commit;
let $i = 0;
while ($i < 100)
{
   let $c=`select count(1) from check__enable_transaction_internal_routing WHERE Value != 'False'`;
   if ($c == 0)
   {
     let $i = 110;
   }
   if ($c != 0)
   {
     --sleep 1
     --inc $i
   }
}
if ($i != 110)
{
--echo "wait _enable_transaction_internal_routing to False failed : $i"
select * from oceanbase.gv$ob_parameters where name = '_enable_transaction_internal_routing';
}
set autocommit=0;
insert into t(id) values(1);
let $s1=`select connection_id()`;
insert into t(id) values(10001);
let $s2=`select connection_id()`;
select * from t where id = 1;
let $s3=`select connection_id()`;
select * from t where id = 10001;
let $s4=`select connection_id()`;
commit;
if ($s1 != $s2) { --echo "free routed 1: $s1, $s2"
}
if ($s3 != $s4) { --echo "free routed 2: $s3, $s4"
}
if ($s2 != $s3) { --echo "free routed 3: $s1, $s3"
}

--echo "CASE 6.2"
insert into t(id) values(2);
let $s1=`select connection_id()`;
connection conn1;
alter system set _enable_transaction_internal_routing = true;
connection conn0;
let $i = 0;
while ($i < 100)
{
   let $c=`select count(1) from check__enable_transaction_internal_routing where Value != 'True'`;
   if ($c == 0)
   {
     let $i = 110;
   }
   if ($c != 0)
   {
     --sleep 1
     --inc $i
   }
}
if ($i != 110)
{
--echo "wait _enable_transaction_internal_routing to True failed: $i"
select * from oceanbase.gv$ob_parameters where name = '_enable_transaction_internal_routing';
}
insert into t(id) values(10002);
let $s2=`select connection_id()`;
select * from t where id = 2;
let $s3=`select connection_id()`;
select * from t where id = 10002;
let $s4=`select connection_id()`;
commit;
if ($s1 != $s2) { --echo "free routed 1: $s1, $s2"
}
if ($s3 != $s4) { --echo "free routed 2: $s3, $s4"
}
if ($s2 != $s3) { --echo "free routed 3: $s1, $s3"
}
## next transaction: it should route freely
insert into t(id) values(3);
let $s1=`select connection_id()`;
insert into t(id) values(10003);
let $s2=`select connection_id()`;
select * from t where id = 3;
let $s3=`select connection_id()`;
select * from t where id = 10003;
let $s4=`select connection_id()`;
commit;
if ($s1 == $s2) { --echo "not free route 1: $s1, $s2"
}
if ($s3 == $s4) { --echo "not free routed 2: $s3, $s4"
}
if ($s1 != $s3) { --echo "not free routed 3: $s1, $s3"
}
if ($s2 != $s4) { --echo "not free routed 3: $s2, $s4"
}

--echo "CASE 6.3"
insert into t(id) values(4);
let $s1=`select connection_id()`;
connection conn1;
alter system set _enable_transaction_internal_routing = false;
connection conn0;
let $i = 0;
while ($i < 100)
{
   let $c=`select count(1) from check__enable_transaction_internal_routing WHERE Value != 'False'`;
   if ($c == 0)
   {
     let $i = 110;
   }
   if ($c != 0)
   {
     --sleep 1
     --inc $i
   }
}
if ($i != 110)
{
--echo "wait _enable_transaction_internal_routing to false failed"
select * from oceanbase.gv$ob_parameters where name = '_enable_transaction_internal_routing';
}
insert into t(id) values(10004);
let $s2=`select connection_id()`;
select * from t where id = 4;
let $s3=`select connection_id()`;
select * from t where id = 10004;
let $s4=`select connection_id()`;
commit;
if ($s1 == $s2) { --echo "not free route 1: $s1, $s2"
}
if ($s3 == $s4) { --echo "not free routed 2: $s3, $s4"
}
if ($s1 != $s3) { --echo "not free routed 3: $s1, $s3"
}
if ($s2 != $s4) { --echo "not free routed 3: $s2, $s4"
}
## next transaction: it should not freely routed
insert into t(id) values(5);
let $s1=`select connection_id()`;
insert into t(id) values(10005);
let $s2=`select connection_id()`;
select * from t where id = 5;
let $s3=`select connection_id()`;
select * from t where id = 10005;
let $s4=`select connection_id()`;
commit;
if ($s1 != $s2) { --echo "free routed 1: $s1, $s2"
}
if ($s3 != $s4) { --echo "free routed 2: $s3, $s4"
}
if ($s2 != $s3) { --echo "free routed 3: $s1, $s3"
}
--echo "reset _enable_transaction_internal_routing=true"
connection conn1;
alter system set _enable_transaction_internal_routing = true;
connection conn0;
let $i = 0;
while ($i < 100)
{
   let $c=`select count(1) from check__enable_transaction_internal_routing where Value != 'True'`;
   if ($c == 0)
   {
     let $i = 110;
   }
   if ($c != 0)
   {
     --sleep 1
     --inc $i
   }
}

if ($i != 110)
{
--echo "wait _enable_transaction_internal_routing to true failed";
select * from oceanbase.gv$ob_parameters where name = '_enable_transaction_internal_routing';
}
--echo "------------- 6 - in txn DDL ----------------------"
connection conn0;
delete from t;
commit;
begin;
insert into t(id) values(1);
let $s1=`select connection_id()`;
insert into t(id) values(10001);
let $s2=`select connection_id()`;
create table tx(id int);
let $s3=`select connection_id()`;
select * from t where id in (1, 10001) order by id asc;
drop table tx;
if ($s1 == $s2) { --echo "not free routed : $s1, $s2"
}
if ($s3 != $s1) { --echo "ddl is not routed to start tx node: $s3, $s1"
}

--echo "------------- 7 - multi-stmt route ----------------------"
connection conn0;
delete from t;
commit;
--delimiter /
begin /
insert into t(id) values(1) /
let $s1=`select connection_id()` /
insert into t(id) values(10001);insert into t(id) values(10002);/
let $s2=`select connection_id()` /
insert into t(id) values(10003) /
let $s3=`select connection_id()` /
if ($s1 != $s2) { --echo "multi stmt not routed to tx start node: $s2, $s1"
}
if ($s3 == $s1) { --echo "not free routed: $s3, $s1"
}
select * from t order by id asc /
--delimiter ;

--echo "------------- 8 - sync session var set autocommit=1 ----------------------"
#
#  Server 1           Server2
# -----------------   -------------------
##CASE 1: set ac = 1 sync
# set ac =1
# begin;
# insert 1
#                     insert 10001 <-- proxy will sync 'set ac = 1' before send insert 2
# commit;
##CASE 2: set ac = 1 commit current tx
# begin;
# insert 2
#                     insert 10002
# set ac = 1
# rollback
#----------------------------------------------------------------------------------
connection conn0;
delete from t;
commit;
set global autocommit=0;
--echo "CASE 8.1"
connect (conn8,$OBMYSQL_MS0, root@tx_free_route_tenant,,test,$OBMYSQL_PORT);
connection conn8;
select * from t where id = 1;
set autocommit=1;
begin;
insert into t(id) values(1);
let $s1=`select connection_id()`;
insert into t(id) values(10001);
let $s2=`select connection_id()`;
rollback;
select * from t order by id asc;
disconnect conn8;
if ($s1 == $2) { --echo "not free routed: $s1, $s2"
}
--echo "CASE 8.2"
connect (conn82,$OBMYSQL_MS0,root@tx_free_route_tenant,,test,$OBMYSQL_PORT);
begin;
insert into t(id) values(2);
let $s3=`select connection_id()`;
insert into t(id) values(10002);
let $s4=`select connection_id()`;
set autocommit=1;
rollback;
if ($s3 == $s4) { --echo "not free routed: $s3, $s4"
}
select * from t order by id asc;
disconnect conn82;
connection conn0;
set global autocommit=1;

--echo "------------- 9 - error-packet caused proxy duplicate sync etc ----------------------"
connect (conn90,$OBMYSQL_MS0,root@tx_free_route_tenant,,test,$OBMYSQL_PORT);
delete from t;
commit;
begin;
insert into t(id) values(1);
let $s1=`select connection_id()`;
--error 1136
insert into t(id) values(10001,1);
let $s2=`select connection_id()`;
insert into t(id) values(10001); ## duplicate sync: 5678, return 67
let $s3=`select connection_id()`;
--error 1136
insert into t(id) values(2, 1); ## sync 67
let $s4=`select connection_id()`;
update t set id = id + 1 where id = 10002; ## empty update, return 6
let $s5=`select connection_id()`;
insert into t(id) values(2); ## duplicate sync 67, 6's version is larger than 7
let $s6=`select connection_id()`;
select * from t order by id asc;
commit;
select * from t order by id asc;
if ($s1 == $s2) { --echo "not free routed: $s1, $s2"
}
if ($s2 != $s3) { --echo "s2 != s3: $s2, $s3"
}
if ($s4 != $s1) { --echo "s1 != s4: $s1, $s4"
}
if ($s5 != $s2) { --echo "s2 != s5: $s2, $s5"
}
if ($s6 != $s1) { --echo "s1 != s6: $s1, $s6"
}
disconnect conn90;
--echo "------------- 10 - readonly tx with serializable snapshot swtich txn----------------------"
connect (conn100,$OBMYSQL_MS0,root@tx_free_route_tenant,,test,$OBMYSQL_PORT);
delete from t;
commit;
--disable_abort_on_error
--disable_result_log
drop outline tx_route_test_ot_4;
--enable_abort_on_error
--enable_result_log
create outline tx_route_test_ot_4 on select * from (select * FROM t) a left join t b on a.id = b.id;
set session transaction ISOLATION LEVEL SERIALIZABLE;
set autocommit = 0;
select * from t where id = 1;
let $s1=`select connection_id()`;
select * from t where id = 10001;
let $s2=`select connection_id()`;
--error 5264
create outline tx_route_test_ot_4 on select * from (select * FROM t) a left join t b on a.id = b.id;
let $s3=`select connection_id()`;
select * from t where id = 10001;
let $s4=`select connection_id()`;
if ($s1 == $s2) { --echo "not free routed: $s1, $s2"
}
if ($s1 != $s3) { --echo "s1 != s3: $s1, $s3"
}
if ($s4 != $s2) { --echo "s2 != s4: $s2, $s4"
}
--disable_abort_on_error
--disable_result_log
drop outline tx_route_test_ot_4;
--enable_abort_on_error
--enable_result_log
disconnect conn100;

--echo "---- 11 deadlock ---"
connect (conn11,$OBMYSQL_MS0,root@tx_free_route_tenant,,test,$OBMYSQL_PORT);
connect (conn12,$OBMYSQL_MS0,root@tx_free_route_tenant,,test,$OBMYSQL_PORT);
connection conn11;
delete from t;
commit;
insert into t(id) values(1),(10001);
commit;
start transaction;
update t set v = 100 where id = 1;
connection conn12;
start transaction;
update t set v = 111 where id = 10001;
send update t set v = 112 where id = 1;
connection conn11;
update t set v = 101 where id = 10001;
select * from t where id = 1;
insert into t(id) values(2),(10002);
commit;
connection conn12;
--error 1213
reap;
--error 1213
select * from t where id = 10001;
--error 1213
insert into t(id) values(10003);
--error 1213
select * from t where id = 1;
--error 1213
insert into t(id) values(3);
--error 6002
commit;
disconnect conn11;
disconnect conn12;

--echo "------------- X - special query types ----------------------"
#--------------------------------------------------------------------------
#    Server1           Server2
#    ---------------   --------------------
##Case 1: TEXT Prepare stmt / TEXT Execute stmt / TEXT Dellocate stmt
##Case 2: prepare stmt / execute stmt / fetch stmt / close stmt
##Case 3: InitDb
##Case 4: ORACLE mode: alter system set current_schema = "XXX"
##Case 5: set transsaction characteristics
##Case 6: pl call
##Case 7: mysql select udf with DML
##Case 8: autonoumous transction
##Case 9: trigger / forigenkey check
##Case 10: cursor / for update cursor
##Case 11: mysql select udf as expr
##Case 12: insert ignore use local implicit savepoint
##Case 13: use PS protocol, start transaction, execute some stmt, then disable ps protocol, then execute continue: 
--echo "CLEANUP"
connection conn0;
drop table t;

disconnect conn0;
disconnect conn1;
disconnect conn2;

connection sys;
drop tenant tx_free_route_tenant force;
drop resource pool tx_free_route_pool;
drop resource unit tx_free_route_unit;

# recover proxy config
--disable_abort_on_error
--disable_query_log
--disable_result_log
eval alter proxyconfig set enable_single_leader_node_routing=1;
if ($client_session_id_version == 2) {
# **Note**
# must recover client_session_id_version before recover proxy_id
# otherwise, will report:
# ERROR:
#   When reset client_session_id_version to v1, proxy_id must be set to less than 255
  alter proxyconfig set client_session_id_version = 2;
  eval alter proxyconfig set proxy_id = $proxy_id;
}
--enable_abort_on_error
--enable_query_log
--enable_result_log

disconnect sys;
