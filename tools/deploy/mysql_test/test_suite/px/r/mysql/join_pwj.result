set ob_query_timeout=1000000000;
drop database if exists px_test;
create database px_test;
use px_test;
create table stu (
sid     int,
name    varchar(32),
cls     int,
primary key (cls, sid)
) partition by hash(sid) partitions 6;
create table teacher (
tid        int,
name       varchar(32),
subject    varchar(4),
primary key (tid)
) partition by hash(tid) partitions 8;
create table score (
sid     int,
subject varchar(4),
score   int,
primary key (sid, subject)
) partition by hash(sid) partitions 6;
insert into stu values
(11, 'a1', 1),
(12, 'b1', 1),
(13, 'c1', 1),
(21, 'a2', 2),
(22, 'b2', 2),
(31, 'a3', 3),
(41, 'a4', 4),
(42, 'b4', 4),
(51, 'a5', 5),
(52, 'b5', 5),
(61, 'a6', 6),
(62, 'b6', 6),
(63, 'c6', 6),
(64, 'd6', 6);
insert into teacher values
(1, 'Miss Zhang', 'EN'),
(2, 'Mr Wang', 'MA');
insert into score values
(11, 'EN', 60),
(12, 'EN', 70),
(13, 'EN', 80),
(21, 'EN', 58),
(22, 'EN', 90),
(31, 'EN', 80),
(41, 'EN', 80),
(42, 'EN', 90),
(51, 'EN', 89),
(52, 'EN', 99),
(61, 'EN', 100),
(62, 'EN', 90),
(63, 'EN', 99),
(64, 'EN', 87);
insert into score values
(11, 'MA', 60),
(12, 'MA', 70),
(13, 'MA', 80),
(21, 'MA', 58),
(22, 'MA', 90),
(31, 'MA', 80),
(41, 'MA', 80),
(42, 'MA', 90),
(51, 'MA', 89),
(52, 'MA', 99),
(61, 'MA', 100),
(62, 'MA', 90),
(63, 'MA', 99),
(64, 'MA', 87);
explain select /*+ USE_PX parallel(2) */ * from stu, score where stu.sid = score.sid;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |28      |76          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|28      |48          |
|2 |  └─PX PARTITION ITERATOR|        |28      |17          |
|3 |    └─MERGE JOIN         |        |28      |17          |
|4 |      ├─TABLE FULL SCAN  |score   |28      |8           |
|5 |      └─SORT             |        |14      |8           |
|6 |        └─TABLE FULL SCAN|stu     |14      |7           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(stu.sid, stu.name, stu.cls, score.sid, score.subject, score.score)]), filter(nil), rowset=256
  1 - output([INTERNAL_FUNCTION(stu.sid, stu.name, stu.cls, score.sid, score.subject, score.score)]), filter(nil), rowset=256
      dop=2
  2 - output([stu.sid], [score.sid], [score.subject], [score.score], [stu.cls], [stu.name]), filter(nil), rowset=256
      partition wise, force partition granule
  3 - output([stu.sid], [score.sid], [score.subject], [score.score], [stu.cls], [stu.name]), filter(nil), rowset=256
      equal_conds([stu.sid = score.sid]), other_conds(nil)
      merge_directions([ASC])
  4 - output([score.sid], [score.subject], [score.score]), filter(nil), rowset=256
      access([score.sid], [score.subject], [score.score]), partitions(p[0-5])
      is_index_back=false, is_global_index=false, 
      range_key([score.sid], [score.subject]), range(MIN,MIN ; MAX,MAX)always true
  5 - output([stu.sid], [stu.cls], [stu.name]), filter(nil), rowset=256
      sort_keys([stu.sid, ASC])
  6 - output([stu.cls], [stu.sid], [stu.name]), filter(nil), rowset=256
      access([stu.cls], [stu.sid], [stu.name]), partitions(p[0-5])
      is_index_back=false, is_global_index=false, 
      range_key([stu.cls], [stu.sid]), range(MIN,MIN ; MAX,MAX)always true
select /*+ USE_PX parallel(2) */ * from stu, score where stu.sid = score.sid;
sid	name	cls	sid	subject	score
11	a1	1	11	EN	60
11	a1	1	11	MA	60
12	b1	1	12	EN	70
12	b1	1	12	MA	70
13	c1	1	13	EN	80
13	c1	1	13	MA	80
21	a2	2	21	EN	58
21	a2	2	21	MA	58
22	b2	2	22	EN	90
22	b2	2	22	MA	90
31	a3	3	31	EN	80
31	a3	3	31	MA	80
41	a4	4	41	EN	80
41	a4	4	41	MA	80
42	b4	4	42	EN	90
42	b4	4	42	MA	90
51	a5	5	51	EN	89
51	a5	5	51	MA	89
52	b5	5	52	EN	99
52	b5	5	52	MA	99
61	a6	6	61	EN	100
61	a6	6	61	MA	100
62	b6	6	62	EN	90
62	b6	6	62	MA	90
63	c6	6	63	EN	99
63	c6	6	63	MA	99
64	d6	6	64	EN	87
64	d6	6	64	MA	87
