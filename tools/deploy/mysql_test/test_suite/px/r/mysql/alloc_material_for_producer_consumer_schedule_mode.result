drop table if exists t1, t2;
create table t1 (c1 int, c2 int, c3 int);
create table t2 (c1 int, c2 int, c3 int);
call dbms_stats.gather_table_stats(NULL, 't1');
call dbms_stats.gather_table_stats(NULL, 't2');
explain select /*+ use_px parallel(2) use_hash(c d) */ * from (select a.c2, b.c3 from  (select /*+ use_hash(a, b) */ c1, c2, count(*) c3 from t1 group by 1, 2) a, (select c1, c2, count(*) c3 from t1 group by 1, 2) b where a.c1 = b.c1) c, (select c1, c2, count(*) c3 from t1 group by 1, 2) d where c.c2 = d.c2;
Query Plan
====================================================================================
|ID|OPERATOR                                    |NAME        |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------------------
|0 |TEMP TABLE TRANSFORMATION                   |            |1       |6           |
|1 |├─PX COORDINATOR                            |            |0       |3           |
|2 |│ └─EXCHANGE OUT DISTR                      |:EX10001    |0       |3           |
|3 |│   └─TEMP TABLE INSERT                     |TEMP1       |0       |3           |
|4 |│     └─HASH GROUP BY                       |            |1       |3           |
|5 |│       └─EXCHANGE IN DISTR                 |            |1       |3           |
|6 |│         └─EXCHANGE OUT DISTR (HASH)       |:EX10000    |1       |2           |
|7 |│           └─HASH GROUP BY                 |            |1       |2           |
|8 |│             └─PX BLOCK ITERATOR           |            |1       |2           |
|9 |│               └─TABLE FULL SCAN           |t1          |1       |2           |
|10|└─PX COORDINATOR                            |            |1       |3           |
|11|  └─EXCHANGE OUT DISTR                      |:EX20002    |1       |3           |
|12|    └─SHARED HASH JOIN                      |            |1       |2           |
|13|      ├─EXCHANGE IN DISTR                   |            |1       |2           |
|14|      │ └─EXCHANGE OUT DISTR (BC2HOST)      |:EX20001    |1       |1           |
|15|      │   └─SHARED HASH JOIN                |            |1       |1           |
|16|      │     ├─EXCHANGE IN DISTR             |            |1       |1           |
|17|      │     │ └─EXCHANGE OUT DISTR (BC2HOST)|:EX20000    |1       |1           |
|18|      │     │   └─TEMP TABLE ACCESS         |VIEW2(TEMP1)|1       |1           |
|19|      │     └─TEMP TABLE ACCESS             |VIEW3(TEMP1)|1       |1           |
|20|      └─TEMP TABLE ACCESS                   |VIEW1(TEMP1)|1       |1           |
====================================================================================
Outputs & filters:
-------------------------------------
  0 - output([VIEW2.t1.c2], [VIEW3.T_FUN_COUNT(*)], [VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.T_FUN_COUNT(*)]), filter(nil), rowset=16
  1 - output(nil), filter(nil), rowset=16
  2 - output(nil), filter(nil), rowset=16
      dop=2
  3 - output(nil), filter(nil), rowset=16
  4 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(*))], [t1.c1], [t1.c2]), filter(nil), rowset=16
      group([t1.c1], [t1.c2]), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(*))])
  5 - output([t1.c1], [t1.c2], [T_FUN_COUNT(*)]), filter(nil), rowset=16
  6 - output([t1.c1], [t1.c2], [T_FUN_COUNT(*)]), filter(nil), rowset=16
      (#keys=2, [t1.c1], [t1.c2]), dop=2
  7 - output([t1.c1], [t1.c2], [T_FUN_COUNT(*)]), filter(nil), rowset=16
      group([t1.c1], [t1.c2]), agg_func([T_FUN_COUNT(*)])
  8 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
  9 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 10 - output([VIEW2.t1.c2], [VIEW3.T_FUN_COUNT(*)], [VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.T_FUN_COUNT(*)]), filter(nil), rowset=16
 11 - output([VIEW2.t1.c2], [VIEW3.T_FUN_COUNT(*)], [VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.T_FUN_COUNT(*)]), filter(nil), rowset=16
      dop=2
 12 - output([VIEW2.t1.c2], [VIEW3.T_FUN_COUNT(*)], [VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.T_FUN_COUNT(*)]), filter(nil), rowset=16
      equal_conds([VIEW2.t1.c2 = VIEW1.t1.c2]), other_conds(nil)
 13 - output([VIEW2.t1.c2], [VIEW3.T_FUN_COUNT(*)]), filter(nil), rowset=16
 14 - output([VIEW2.t1.c2], [VIEW3.T_FUN_COUNT(*)]), filter(nil), rowset=16
      dop=2
 15 - output([VIEW2.t1.c2], [VIEW3.T_FUN_COUNT(*)]), filter(nil), rowset=16
      equal_conds([VIEW2.t1.c1 = VIEW3.t1.c1]), other_conds(nil)
 16 - output([VIEW2.t1.c2], [VIEW2.t1.c1]), filter(nil), rowset=16
 17 - output([VIEW2.t1.c2], [VIEW2.t1.c1]), filter(nil), rowset=16
      dop=2
 18 - output([VIEW2.t1.c1], [VIEW2.t1.c2]), filter(nil), rowset=16
      access([VIEW2.t1.c1], [VIEW2.t1.c2])
 19 - output([VIEW3.T_FUN_COUNT(*)], [VIEW3.t1.c1]), filter(nil), rowset=16
      access([VIEW3.T_FUN_COUNT(*)], [VIEW3.t1.c1])
 20 - output([VIEW1.T_FUN_COUNT(*)], [VIEW1.t1.c1], [VIEW1.t1.c2]), filter(nil), rowset=16
      access([VIEW1.T_FUN_COUNT(*)], [VIEW1.t1.c1], [VIEW1.t1.c2])
explain select /*+ use_px parallel(2) use_merge(a b) */ b.c2, sum(a.c3) from (select /*+ NO_USE_HASH_AGGREGATION */ c1, c2, count(*) c3 from t1 group by 1, 2) a, t2 b where a.c1 = b.c1 group by 1;
Query Plan
=====================================================================================
|ID|OPERATOR                                         |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------------------
|0 |PX COORDINATOR                                   |        |1       |6           |
|1 |└─EXCHANGE OUT DISTR                             |:EX10003|1       |6           |
|2 |  └─HASH GROUP BY                                |        |1       |5           |
|3 |    └─EXCHANGE IN DISTR                          |        |1       |5           |
|4 |      └─EXCHANGE OUT DISTR (HASH)                |:EX10002|1       |5           |
|5 |        └─HASH GROUP BY                          |        |1       |4           |
|6 |          └─SUBPLAN SCAN                         |VIEW1   |1       |4           |
|7 |            └─MERGE GROUP BY                     |        |1       |4           |
|8 |              └─PARTITION SORT                   |        |1       |4           |
|9 |                └─MERGE JOIN                     |        |1       |4           |
|10|                  ├─SORT                         |        |1       |2           |
|11|                  │ └─EXCHANGE IN DISTR          |        |1       |2           |
|12|                  │   └─EXCHANGE OUT DISTR (HASH)|:EX10000|1       |2           |
|13|                  │     └─PX BLOCK ITERATOR      |        |1       |2           |
|14|                  │       └─TABLE FULL SCAN      |b       |1       |2           |
|15|                  └─SORT                         |        |1       |2           |
|16|                    └─EXCHANGE IN DISTR          |        |1       |2           |
|17|                      └─EXCHANGE OUT DISTR (HASH)|:EX10001|1       |2           |
|18|                        └─PX BLOCK ITERATOR      |        |1       |2           |
|19|                          └─TABLE FULL SCAN      |t1      |1       |2           |
=====================================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(VIEW1.b.c2, T_FUN_SUM(T_FUN_SUM(VIEW1.a.c3)))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(VIEW1.b.c2, T_FUN_SUM(T_FUN_SUM(VIEW1.a.c3)))]), filter(nil), rowset=16
      dop=2
  2 - output([VIEW1.b.c2], [T_FUN_SUM(T_FUN_SUM(VIEW1.a.c3))]), filter(nil), rowset=16
      group([VIEW1.b.c2]), agg_func([T_FUN_SUM(T_FUN_SUM(VIEW1.a.c3))])
  3 - output([VIEW1.b.c2], [T_FUN_SUM(VIEW1.a.c3)]), filter(nil), rowset=16
  4 - output([VIEW1.b.c2], [T_FUN_SUM(VIEW1.a.c3)]), filter(nil), rowset=16
      (#keys=1, [VIEW1.b.c2]), dop=2
  5 - output([VIEW1.b.c2], [T_FUN_SUM(VIEW1.a.c3)]), filter(nil), rowset=16
      group([VIEW1.b.c2]), agg_func([T_FUN_SUM(VIEW1.a.c3)])
  6 - output([VIEW1.b.c2], [VIEW1.a.c3]), filter(nil), rowset=16
      access([VIEW1.b.c2], [VIEW1.a.c3])
  7 - output([b.c2], [T_FUN_COUNT(*)]), filter(nil), rowset=16
      group([b.__pk_increment], [t1.c2]), agg_func([T_FUN_COUNT(*)])
  8 - output([b.__pk_increment], [t1.c2], [b.c2]), filter(nil), rowset=16
      sort_keys([HASH(b.__pk_increment, t1.c2), ASC], [b.__pk_increment, ASC], [t1.c2, ASC])
  9 - output([b.__pk_increment], [t1.c2], [b.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = b.c1]), other_conds(nil)
      merge_directions([ASC])
 10 - output([b.__pk_increment], [b.c2], [b.c1]), filter(nil), rowset=16
      sort_keys([b.c1, ASC])
 11 - output([b.__pk_increment], [b.c2], [b.c1]), filter(nil), rowset=16
 12 - output([b.__pk_increment], [b.c2], [b.c1]), filter(nil), rowset=16
      (#keys=1, [b.c1]), dop=2
 13 - output([b.__pk_increment], [b.c1], [b.c2]), filter(nil), rowset=16
 14 - output([b.__pk_increment], [b.c1], [b.c2]), filter(nil), rowset=16
      access([b.__pk_increment], [b.c1], [b.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t1.c2], [t1.c1]), filter(nil), rowset=16
      sort_keys([t1.c1, ASC])
 16 - output([t1.c2], [t1.c1]), filter(nil), rowset=16
 17 - output([t1.c2], [t1.c1]), filter(nil), rowset=16
      (#keys=1, [t1.c1]), dop=2
 18 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
 19 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select /*+ use_px parallel(2) use_merge(a b) */ * from (select /*+ NO_USE_HASH_AGGREGATION */ c1, c2, count(*) c3 from t1 group by 1, 2) a, t2 b where a.c1 = b.c1;
Query Plan
===========================================================================
|ID|OPERATOR                               |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |PX COORDINATOR                         |        |1       |7           |
|1 |└─EXCHANGE OUT DISTR                   |:EX10002|1       |6           |
|2 |  └─MERGE GROUP BY                     |        |1       |4           |
|3 |    └─PARTITION SORT                   |        |1       |4           |
|4 |      └─MERGE JOIN                     |        |1       |4           |
|5 |        ├─SORT                         |        |1       |2           |
|6 |        │ └─EXCHANGE IN DISTR          |        |1       |2           |
|7 |        │   └─EXCHANGE OUT DISTR (HASH)|:EX10000|1       |2           |
|8 |        │     └─PX BLOCK ITERATOR      |        |1       |2           |
|9 |        │       └─TABLE FULL SCAN      |t1      |1       |2           |
|10|        └─SORT                         |        |1       |3           |
|11|          └─EXCHANGE IN DISTR          |        |1       |3           |
|12|            └─EXCHANGE OUT DISTR (HASH)|:EX10001|1       |2           |
|13|              └─PX BLOCK ITERATOR      |        |1       |2           |
|14|                └─TABLE FULL SCAN      |b       |1       |2           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.c1, t1.c2, T_FUN_COUNT(*), b.c1, b.c2, b.c3)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.c1, t1.c2, T_FUN_COUNT(*), b.c1, b.c2, b.c3)]), filter(nil), rowset=16
      dop=2
  2 - output([t1.c2], [T_FUN_COUNT(*)], [t1.c1], [b.c1], [b.c2], [b.c3]), filter(nil), rowset=16
      group([b.__pk_increment], [t1.c2]), agg_func([T_FUN_COUNT(*)])
  3 - output([b.__pk_increment], [t1.c2], [t1.c1], [b.c1], [b.c2], [b.c3]), filter(nil), rowset=16
      sort_keys([HASH(b.__pk_increment, t1.c2), ASC], [b.__pk_increment, ASC], [t1.c2, ASC])
  4 - output([b.__pk_increment], [t1.c2], [t1.c1], [b.c1], [b.c2], [b.c3]), filter(nil), rowset=16
      equal_conds([t1.c1 = b.c1]), other_conds(nil)
      merge_directions([ASC])
  5 - output([t1.c2], [t1.c1]), filter(nil), rowset=16
      sort_keys([t1.c1, ASC])
  6 - output([t1.c2], [t1.c1]), filter(nil), rowset=16
  7 - output([t1.c2], [t1.c1]), filter(nil), rowset=16
      (#keys=1, [t1.c1]), dop=2
  8 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
  9 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 10 - output([b.__pk_increment], [b.c1], [b.c2], [b.c3]), filter(nil), rowset=16
      sort_keys([b.c1, ASC])
 11 - output([b.__pk_increment], [b.c1], [b.c2], [b.c3]), filter(nil), rowset=16
 12 - output([b.__pk_increment], [b.c1], [b.c2], [b.c3]), filter(nil), rowset=16
      (#keys=1, [b.c1]), dop=2
 13 - output([b.__pk_increment], [b.c1], [b.c2], [b.c3]), filter(nil), rowset=16
 14 - output([b.__pk_increment], [b.c1], [b.c2], [b.c3]), filter(nil), rowset=16
      access([b.__pk_increment], [b.c1], [b.c2], [b.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
