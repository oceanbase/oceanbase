drop database if exists hualong;
create database hualong;
use hualong;
create table other(c1 int primary key, c2 int, c3 int,
key idx_c2(c2),
key idx_c3(c3),
key idx_c2_c3(c2,c3),
key idx_c3_c2(c3,c2));
CREATE TABLE `skyline_int` (
`tenant_id` varchar(8) NOT NULL ,
`id` int NOT NULL,
`v1` int NOT NULL,
`v2` int NOT NULL,
`v3` int NOT NULL,
`v4` int NOT NULL,
`v5` int NOT NULL,
`v6` int NOT NULL,
`gmt_create` timestamp NOT NULL,
`gmt_modified` timestamp NOT NULL,
PRIMARY KEY (v1, tenant_id),
KEY `idx_tenant_id` (tenant_id),
KEY `idx_v2` (v2),
KEY `idx_v2_v3` (v2, v3),
KEY `idx_v3_v2` (v3, v2),
KEY `idx_v2_v3_v4` (v2, v3, v4),
KEY `idx_v3_v4_v2` (v3, v4, v2),
KEY `idx_v4_v2_v3` (v4, v2, v3),
KEY `idx_v2_v3_v4_v5` (v2, v3, v4, v5),
KEY `idx_v3_v4_v5_v2` (v3, v4, v5, v2),
KEY `idx_v4_v5_v2_v3` (v4, v5, v2, v3),
KEY `idx_v5_v2_v3_v4` (v5, v2, v3, v4),
KEY `idx_v2_v3_v4_v5_v6` (v2, v3, v4, v5, v6),
KEY `idx_v3_v4_v5_v6_v2` (v3, v4, v5, v6, v2),
KEY `idx_v4_v5_v6_v2_v3` (v4, v5, v6, v2, v3),
KEY `idx_v5_v6_v2_v3_v4` (v5, v6, v2, v3, v4),
KEY `idx_v6_v2_v3_v4_v5` (v6, v2, v3, v4, v5));
explain select v1, tenant_id from skyline_int group by v3 order by v3;
Query Plan
===================================================================
|ID|OPERATOR         |NAME                  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |MERGE GROUP BY   |                      |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v2)|1       |3           |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX)always true
explain select v1, tenant_id from skyline_int group by v3, v4 order by v3;
Query Plan
======================================================================
|ID|OPERATOR         |NAME                     |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------------
|0 |MERGE GROUP BY   |                         |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v2)|1       |3           |
======================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select v1, tenant_id from skyline_int group by v4, v3 order by v3;
Query Plan
======================================================================
|ID|OPERATOR         |NAME                     |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------------
|0 |MERGE GROUP BY   |                         |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v2)|1       |3           |
======================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select v1, tenant_id from skyline_int group by v3, v4, v5 order by v3;
Query Plan
=========================================================================
|ID|OPERATOR         |NAME                        |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                            |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v1, tenant_id from skyline_int group by v3, v5, v4 order by v3;
Query Plan
=========================================================================
|ID|OPERATOR         |NAME                        |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                            |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v1, tenant_id, v6 from skyline_int group by v3, v5, v4 order by v3;
Query Plan
============================================================================
|ID|OPERATOR         |NAME                           |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                               |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v6_v2)|1       |3           |
============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v6]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v6], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v6], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v1, tenant_id from skyline_int group by v4, v3, v5 order by v3;
Query Plan
=========================================================================
|ID|OPERATOR         |NAME                        |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                            |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v1, tenant_id from skyline_int group by v4, v5, v3 order by v3;
Query Plan
=========================================================================
|ID|OPERATOR         |NAME                        |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                            |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v5], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v5], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v1, tenant_id from skyline_int group by v5, v3, v4 order by v3;
Query Plan
=========================================================================
|ID|OPERATOR         |NAME                        |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                            |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v5], [skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v5], [skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v1, tenant_id from skyline_int group by v5, v4, v3 order by v3;
Query Plan
=========================================================================
|ID|OPERATOR         |NAME                        |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                            |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select sum(v1), tenant_id from skyline_int group by v6, v5, v4, v3 having sum(v1) > 100 order by v3;
Query Plan
============================================================================
|ID|OPERATOR         |NAME                           |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                               |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v6_v2)|1       |3           |
============================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(skyline_int.v1)], [skyline_int.tenant_id]), filter([T_FUN_SUM(skyline_int.v1) > cast(100, DECIMAL_INT(33, 0))]), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), agg_func([T_FUN_SUM(skyline_int.v1)])
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v6], [skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v6], [skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
group by will decide which index to use
explain select max(v1), tenant_id from skyline_int join other on v4 = c1 and v3 = c2 and v2 = c3 group by v3, v2;
Query Plan
========================================================================
|ID|OPERATOR           |NAME                     |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                         |1       |5           |
|1 |└─MERGE JOIN       |                         |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c3_c2)         |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v2_v3_v4)|1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v2], [skyline_int.v3]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v2], [skyline_int.v3], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v2 = other.c3], [skyline_int.v3 = other.c2], [skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c3], [other.c2], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c2 and v4 = c1 and v2 = c3 group by v3, v4, v2;
Query Plan
========================================================================
|ID|OPERATOR           |NAME                     |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                         |1       |5           |
|1 |└─MERGE JOIN       |                         |1       |5           |
|2 |  ├─TABLE FULL SCAN|skyline_int(idx_v4_v2_v3)|1       |3           |
|3 |  └─TABLE FULL SCAN|other                    |1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v4]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v4], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1], [skyline_int.v2 = other.c3], [skyline_int.v3 = other.c2]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
  3 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c2 and v4 = c3 and v2 = c1 group by v3;
Query Plan
========================================================================
|ID|OPERATOR           |NAME                     |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                         |1       |5           |
|1 |└─MERGE JOIN       |                         |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2_c3)         |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v2)|1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3], [skyline_int.v2 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c2 and v4 = c3 and v2 = c1 group by v3, v4;
Query Plan
========================================================================
|ID|OPERATOR           |NAME                     |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                         |1       |5           |
|1 |└─MERGE JOIN       |                         |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2_c3)         |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v2)|1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3], [skyline_int.v2 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c2 and v4 = c3 and v2 = c1 group by v4, v3;
Query Plan
========================================================================
|ID|OPERATOR           |NAME                     |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                         |1       |5           |
|1 |└─MERGE JOIN       |                         |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2_c3)         |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v2)|1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3], [skyline_int.v2 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v4 = c3 and v3 = c2 and v2 = c1 group by v4, v3;
Query Plan
========================================================================
|ID|OPERATOR           |NAME                     |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                         |1       |5           |
|1 |└─MERGE JOIN       |                         |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2_c3)         |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v2)|1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3], [skyline_int.v2 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c3], [other.c2]), filter(nil), rowset=16
      access([other.c1], [other.c3], [other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v4 = c3 and v3 = c2 and v2 = c1 group by v4, v3 order by c2, c3;
Query Plan
========================================================================
|ID|OPERATOR           |NAME                     |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                         |1       |5           |
|1 |└─MERGE JOIN       |                         |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2_c3)         |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v2)|1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3], [skyline_int.v2 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c3], [other.c2]), filter(nil), rowset=16
      access([other.c1], [other.c3], [other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v4 = c3 and v3 = c1 and v2 = c2 group by v2, v4;
Query Plan
========================================================================
|ID|OPERATOR           |NAME                     |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                         |1       |5           |
|1 |└─MERGE JOIN       |                         |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c3_c2)         |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v4_v2_v3)|1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v4], [skyline_int.v2]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v4], [skyline_int.v2], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c3], [skyline_int.v2 = other.c2], [skyline_int.v3 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c3], [other.c2]), filter(nil), rowset=16
      access([other.c1], [other.c3], [other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c3], [other.c2], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c2 and v4 = c3 and v5 = c1 group by v3;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2_c3)            |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3], [skyline_int.v5 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v4 = c3 and v3 = c2 and v5 = c1 group by v3;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2_c3)            |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3], [skyline_int.v5 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c3], [other.c2]), filter(nil), rowset=16
      access([other.c1], [other.c3], [other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c2 and v4 = c3 and v5 = c1 group by v3, v4;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2_c3)            |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3], [skyline_int.v5 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v5 = c1 and v4 = c3 and v3 = c2 group by v4, v3;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2_c3)            |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3], [skyline_int.v5 = other.c1]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c3], [other.c2]), filter(nil), rowset=16
      access([other.c1], [other.c3], [other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c2 and v4 = c3 and v5 = c1 group by v3, v4, v5;
Query Plan
=============================================================================
|ID|OPERATOR             |NAME                        |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |MERGE GROUP BY       |                            |1       |5           |
|1 |└─MERGE JOIN         |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN  |other                       |1       |3           |
|3 |  └─SORT             |                            |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v5]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v5], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v5 = other.c1], [skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  3 - output([skyline_int.v5], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v1]), filter(nil), rowset=16
      sort_keys([skyline_int.v5, ASC], [skyline_int.v3, ASC], [skyline_int.v4, ASC])
  4 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v5 = c1 and v4 = c3 and v3 = c2 group by v5, v4, v3;
Query Plan
=============================================================================
|ID|OPERATOR             |NAME                        |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |MERGE GROUP BY       |                            |1       |5           |
|1 |└─MERGE JOIN         |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN  |other                       |1       |3           |
|3 |  └─SORT             |                            |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v5]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v5], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v5 = other.c1], [skyline_int.v4 = other.c3], [skyline_int.v3 = other.c2]), other_conds(nil)
      merge_directions([ASC], [ASC], [ASC])
  2 - output([other.c1], [other.c3], [other.c2]), filter(nil), rowset=16
      access([other.c1], [other.c3], [other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  3 - output([skyline_int.v5], [skyline_int.tenant_id], [skyline_int.v4], [skyline_int.v3], [skyline_int.v1]), filter(nil), rowset=16
      sort_keys([skyline_int.v5, ASC], [skyline_int.v4, ASC], [skyline_int.v3, ASC])
  4 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c1 group by v3;
Query Plan
=====================================================================
|ID|OPERATOR           |NAME                  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |MERGE GROUP BY     |                      |1       |5           |
|1 |└─MERGE JOIN       |                      |1       |5           |
|2 |  ├─TABLE FULL SCAN|other                 |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v2)|1       |3           |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  2 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c1 group by v4, v3;
Query Plan
========================================================================
|ID|OPERATOR           |NAME                     |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                         |1       |5           |
|1 |└─MERGE JOIN       |                         |1       |5           |
|2 |  ├─TABLE FULL SCAN|skyline_int(idx_v3_v4_v2)|1       |3           |
|3 |  └─TABLE FULL SCAN|other                    |1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  2 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c1 group by v5, v4;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |HASH GROUP BY      |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|other                       |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v5], [skyline_int.v4]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v5], [skyline_int.v4], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  2 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  3 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c1 group by v5, v4 order by v4, v5;
Query Plan
=============================================================================
|ID|OPERATOR             |NAME                        |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |MERGE GROUP BY       |                            |1       |5           |
|1 |└─SORT               |                            |1       |5           |
|2 |  └─MERGE JOIN       |                            |1       |5           |
|3 |    ├─TABLE FULL SCAN|other                       |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v4], [skyline_int.v5]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      sort_keys([skyline_int.v4, ASC], [skyline_int.v5, ASC])
  2 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  4 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select max(v1), tenant_id from skyline_int join other on v3 = c1 group by v5, v4, v3 order by v3, v4, v5;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
|3 |  └─TABLE FULL SCAN|other                       |1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.tenant_id], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  2 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain select max(v1), tenant_id, v6 from skyline_int join other on v3 = c1 group by v5, v4, v3 order by v3, v4, v5;
Query Plan
==============================================================================
|ID|OPERATOR           |NAME                           |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                               |1       |5           |
|1 |└─MERGE JOIN       |                               |1       |5           |
|2 |  ├─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v6_v2)|1       |3           |
|3 |  └─TABLE FULL SCAN|other                          |1       |3           |
==============================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(skyline_int.v1)], [skyline_int.tenant_id], [skyline_int.v6]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func([T_FUN_MAX(skyline_int.v1)])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.tenant_id], [skyline_int.v6], [skyline_int.v1]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  2 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v6], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v6], [skyline_int.v5], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain select distinct(v3) from skyline_int join other on v3 = c1 order by v3, v4, v5;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE DISTINCT     |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|other                       |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3]), filter(nil), rowset=16
      distinct([skyline_int.v3])
  1 - output([skyline_int.v3]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  2 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  3 - output([skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select distinct(v4) from skyline_int join other on v4 = c1 order by v3, v4, v5;
Query Plan
=============================================================================
|ID|OPERATOR             |NAME                        |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |SORT                 |                            |1       |5           |
|1 |└─MERGE DISTINCT     |                            |1       |5           |
|2 |  └─MERGE JOIN       |                            |1       |5           |
|3 |    ├─TABLE FULL SCAN|other                       |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v4_v5_v2_v3)|1       |3           |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v4]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC], [skyline_int.v4, ASC], [skyline_int.v5, ASC])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4])
  2 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  4 - output([skyline_int.v4], [skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v3], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select distinct(v4) from skyline_int join other on v4 = c1 order by v3, v4, v5, v6;
Query Plan
================================================================================
|ID|OPERATOR             |NAME                           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------------
|0 |SORT                 |                               |1       |5           |
|1 |└─MERGE DISTINCT     |                               |1       |5           |
|2 |  └─MERGE JOIN       |                               |1       |5           |
|3 |    ├─TABLE FULL SCAN|other                          |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v4_v5_v6_v2_v3)|1       |3           |
================================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v4]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC], [skyline_int.v4, ASC], [skyline_int.v5, ASC], [skyline_int.v6, ASC])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      distinct([skyline_int.v4])
  2 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  4 - output([skyline_int.v4], [skyline_int.v3], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v3], [skyline_int.v5], [skyline_int.v6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select distinct v5, v4, v3 from skyline_int join other on v4 = c1 order by v3;
Query Plan
=============================================================================
|ID|OPERATOR             |NAME                        |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |SORT                 |                            |1       |5           |
|1 |└─HASH DISTINCT      |                            |1       |5           |
|2 |  └─MERGE JOIN       |                            |1       |5           |
|3 |    ├─TABLE FULL SCAN|other                       |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v4_v5_v2_v3)|1       |3           |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC])
  1 - output([skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      distinct([skyline_int.v5], [skyline_int.v4], [skyline_int.v3])
  2 - output([skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  4 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v5], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select distinct v5, v4, v3 from other left join skyline_int on v4 = c1 order by v3;
Query Plan
=============================================================================
|ID|OPERATOR             |NAME                        |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |MERGE DISTINCT       |                            |1       |5           |
|1 |└─SORT               |                            |1       |5           |
|2 |  └─MERGE OUTER JOIN |                            |1       |5           |
|3 |    ├─TABLE FULL SCAN|other                       |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v4_v5_v2_v3)|1       |3           |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v5], [skyline_int.v4], [skyline_int.v3]), filter(nil), rowset=16
      distinct([skyline_int.v3], [skyline_int.v5], [skyline_int.v4])
  1 - output([skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC], [skyline_int.v5, ASC], [skyline_int.v4, ASC])
  2 - output([skyline_int.v3], [skyline_int.v5], [skyline_int.v4]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  4 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v3]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v5], [skyline_int.v3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select distinct v4, v5, v6 from other left join skyline_int on v4 = c1 and v5 = c2 order by v4, v5, v6;
Query Plan
================================================================================
|ID|OPERATOR             |NAME                           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------------
|0 |MERGE DISTINCT       |                               |1       |5           |
|1 |└─SORT               |                               |1       |5           |
|2 |  └─MERGE OUTER JOIN |                               |1       |5           |
|3 |    ├─TABLE FULL SCAN|other                          |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v4_v5_v6_v2_v3)|1       |3           |
================================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5], [skyline_int.v6])
  1 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      sort_keys([skyline_int.v4, ASC], [skyline_int.v5, ASC], [skyline_int.v6, ASC])
  2 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1], [skyline_int.v5 = other.c2]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([other.c1], [other.c2]), filter(nil), rowset=16
      access([other.c1], [other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  4 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v3, v4, v5 from skyline_int union select c1, c2, c3 from other;
Query Plan
============================================================================
|ID|OPERATOR            |NAME                        |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------------------
|0 |MERGE UNION DISTINCT|                            |2       |5           |
|1 |├─TABLE FULL SCAN   |skyline_int(idx_v3_v4_v5_v2)|1       |3           |
|2 |└─TABLE FULL SCAN   |other                       |1       |3           |
============================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=16
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
  2 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain select v4, v5, v6 from skyline_int intersect select v3, v4, v5 from skyline_int;
Query Plan
===================================================================================
|ID|OPERATOR                |NAME                           |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------------
|0 |MERGE INTERSECT DISTINCT|                               |1       |5           |
|1 |├─TABLE FULL SCAN       |skyline_int(idx_v4_v5_v6_v2_v3)|1       |3           |
|2 |└─TABLE FULL SCAN       |skyline_int(idx_v3_v4_v5_v2)   |1       |3           |
===================================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])], [INTERSECT([2])], [INTERSECT([3])]), filter(nil), rowset=16
  1 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
  2 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v4, v5, v6 from skyline_int union select v2, v3, v4 from skyline_int;
Query Plan
===============================================================================
|ID|OPERATOR            |NAME                           |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------------
|0 |MERGE UNION DISTINCT|                               |2       |5           |
|1 |├─TABLE FULL SCAN   |skyline_int(idx_v4_v5_v6_v2_v3)|1       |3           |
|2 |└─TABLE FULL SCAN   |skyline_int(idx_v2_v3_v4)      |1       |3           |
===============================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=16
  1 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
  2 - output([skyline_int.v2], [skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v2], [skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 = 100 and v5 = 100 order by v3, v4, v5;
Query Plan
========================================================================
|ID|OPERATOR        |NAME                        |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,100,100,MIN,
      MIN,MIN ; 100,100,100,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 = 100], [skyline_int.v5 = 100])
explain select v3, v4, v5 from skyline_int where v3 in (100, 200, 300) group by v3, v4, v5 order by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |7           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |7           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v3], [skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,MIN,MIN,MIN,
      MIN,MIN ; 100,MAX,MAX,MAX,MAX,MAX), (200,MIN,MIN,MIN,MIN,MIN ; 200,MAX,MAX,MAX,MAX,MAX), (300,MIN,MIN,MIN,MIN,MIN ; 300,MAX,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 IN (100, 200, 300)])
explain select distinct v3, v4, v5 from skyline_int where v3 in (100, 200, 300) order by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |7           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |7           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v3], [skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,MIN,MIN,MIN,
      MIN,MIN ; 100,MAX,MAX,MAX,MAX,MAX), (200,MIN,MIN,MIN,MIN,MIN ; 200,MAX,MAX,MAX,MAX,MAX), (300,MIN,MIN,MIN,MIN,MIN ; 300,MAX,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 IN (100, 200, 300)])
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 > 100 group by v4, v3, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,100,MAX,MAX,
      MAX,MAX ; 100,MAX,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 > 100])
explain select v4, v5, v6 from skyline_int where v3 = 100 group by v3, v5;
Query Plan
=============================================================================
|ID|OPERATOR          |NAME                           |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |HASH GROUP BY     |                               |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v6_v2)|1       |3           |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      group([skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,
      MIN,MIN,MIN,MIN,MIN,MIN ; 100,MAX,MAX,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 = 100])
explain select distinct v3, v5 from skyline_int where v4 = 100;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |HASH DISTINCT     |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v4_v5_v2_v3)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v3], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(100,MIN,MIN,MIN,
      MIN,MIN ; 100,MAX,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v4 = 100])
explain select distinct v3, v5 from skyline_int where v4 > 100 and v4 < 200;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |HASH DISTINCT     |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v4_v5_v2_v3)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v3], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(100,MAX,MAX,MAX,
      MAX,MAX ; 200,MIN,MIN,MIN,MIN,MIN), 
      range_cond([skyline_int.v4 > 100], [skyline_int.v4 < 200])
explain select v3, v5 from skyline_int where v4 > 100 and v4 < 200 order by v4, v2;
Query Plan
=====================================================================
|ID|OPERATOR        |NAME                     |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |TABLE RANGE SCAN|skyline_int(idx_v4_v2_v3)|1       |7           |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(100,MAX,MAX,MAX,MAX ; 200,MIN,MIN,
      MIN,MIN), 
      range_cond([skyline_int.v4 > 100], [skyline_int.v4 < 200])
explain select v3, v5 from skyline_int where v4 > 100 and v4 < 200 order by v4, v2 limit 100;
Query Plan
=====================================================================
|ID|OPERATOR        |NAME                     |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |TABLE RANGE SCAN|skyline_int(idx_v4_v2_v3)|1       |7           |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v5]), partitions(p0)
      limit(100), offset(nil), is_index_back=true, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(100,MAX,MAX,MAX,MAX ; 200,MIN,MIN,
      MIN,MIN), 
      range_cond([skyline_int.v4 > 100], [skyline_int.v4 < 200])
explain select v3, v5 from skyline_int where v5 = 100 group by v4, v2;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |HASH GROUP BY     |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v5_v2_v3_v4)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      group([skyline_int.v4], [skyline_int.v2]), agg_func(nil)
  1 - output([skyline_int.v5], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v5], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v1], [skyline_int.tenant_id]), range(100,MIN,MIN,MIN,
      MIN,MIN ; 100,MAX,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v5 = 100])
explain select v3, v5 from skyline_int where v5 = 100 group by v4, v2 limit 100;
Query Plan
============================================================================
|ID|OPERATOR            |NAME                        |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------------------
|0 |LIMIT               |                            |1       |3           |
|1 |└─HASH GROUP BY     |                            |1       |3           |
|2 |  └─TABLE RANGE SCAN|skyline_int(idx_v5_v2_v3_v4)|1       |3           |
============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      limit(100), offset(nil)
  1 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      group([skyline_int.v4], [skyline_int.v2]), agg_func(nil)
  2 - output([skyline_int.v5], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), filter(nil), rowset=16
      access([skyline_int.v5], [skyline_int.v3], [skyline_int.v4], [skyline_int.v2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v1], [skyline_int.tenant_id]), range(100,MIN,MIN,MIN,
      MIN,MIN ; 100,MAX,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v5 = 100])
explain select v3, v6 from skyline_int join other on skyline_int.v3 = other.c1 and skyline_int.v5 = other.c2 order by v3, v4;
Query Plan
================================================================================
|ID|OPERATOR             |NAME                           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------------
|0 |SORT                 |                               |1       |5           |
|1 |└─MERGE JOIN         |                               |1       |5           |
|2 |  ├─TABLE FULL SCAN  |other                          |1       |3           |
|3 |  └─SORT             |                               |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v5_v6_v2_v3_v4)|1       |3           |
================================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v6]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC], [skyline_int.v4, ASC]), prefix_pos(1)
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v6]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c1], [skyline_int.v5 = other.c2]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([other.c1], [other.c2]), filter(nil), rowset=16
      access([other.c1], [other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  3 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v6], [skyline_int.v5]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC], [skyline_int.v5, ASC])
  4 - output([skyline_int.v3], [skyline_int.v5], [skyline_int.v6], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v5], [skyline_int.v6], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v3, v6 from skyline_int join other on skyline_int.v3 = other.c1 and skyline_int.v5 = other.c2 order by v3;
Query Plan
==============================================================================
|ID|OPERATOR           |NAME                           |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------------
|0 |MERGE JOIN         |                               |1       |5           |
|1 |├─TABLE FULL SCAN  |other                          |1       |3           |
|2 |└─SORT             |                               |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v5_v6_v2_v3_v4)|1       |3           |
==============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v6]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c1], [skyline_int.v5 = other.c2]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([other.c1], [other.c2]), filter(nil), rowset=16
      access([other.c1], [other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  2 - output([skyline_int.v3], [skyline_int.v6], [skyline_int.v5]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC], [skyline_int.v5, ASC])
  3 - output([skyline_int.v3], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v5], [skyline_int.v6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select distinct v3, v5 from skyline_int join other where skyline_int.v4 = other.c1 order by v4, v5, v6;
Query Plan
================================================================================
|ID|OPERATOR             |NAME                           |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------------
|0 |SORT                 |                               |1       |5           |
|1 |└─HASH DISTINCT      |                               |1       |5           |
|2 |  └─MERGE JOIN       |                               |1       |5           |
|3 |    ├─TABLE FULL SCAN|other                          |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v4_v5_v6_v2_v3)|1       |3           |
================================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      sort_keys([skyline_int.v4, ASC], [skyline_int.v5, ASC], [skyline_int.v6, ASC])
  1 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v3]), filter(nil), rowset=16
      distinct([skyline_int.v3], [skyline_int.v5])
  2 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v3]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  4 - output([skyline_int.v4], [skyline_int.v3], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v3], [skyline_int.v5], [skyline_int.v6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select v3, v5 from skyline_int join other where skyline_int.v4 = other.c1 group by v4, v5;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|skyline_int(idx_v4_v5_v2_v3)|1       |3           |
|3 |  └─TABLE FULL SCAN|other                       |1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      group([skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v3]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  2 - output([skyline_int.v4], [skyline_int.v3], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v3], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain select distinct v4, v5 from skyline_int join other where skyline_int.v4 = other.c1;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE DISTINCT     |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|skyline_int(idx_v4_v5_v2_v3)|1       |3           |
|3 |  └─TABLE FULL SCAN|other                       |1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  2 - output([skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain select v4, v5 from skyline_int join other where skyline_int.v4 = other.c1 order by v4, v5;
Query Plan
=========================================================================
|ID|OPERATOR         |NAME                        |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE JOIN       |                            |1       |5           |
|1 |├─TABLE FULL SCAN|skyline_int(idx_v4_v5_v2_v3)|1       |3           |
|2 |└─TABLE FULL SCAN|other                       |1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  1 - output([skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
  2 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain (select v4, v5, v6 from skyline_int join other on skyline_int.v4 = other.c1 ) union select c1, c2, c3 from other;
Query Plan
===============================================================================
|ID|OPERATOR            |NAME                           |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------------
|0 |MERGE UNION DISTINCT|                               |2       |7           |
|1 |├─MERGE JOIN        |                               |1       |5           |
|2 |│ ├─TABLE FULL SCAN |skyline_int(idx_v4_v5_v6_v2_v3)|1       |3           |
|3 |│ └─TABLE FULL SCAN |other                          |1       |3           |
|4 |└─TABLE FULL SCAN   |other                          |1       |3           |
===============================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=16
  1 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      equal_conds([skyline_int.v4 = other.c1]), other_conds(nil)
      merge_directions([ASC])
  2 - output([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), filter(nil), rowset=16
      access([skyline_int.v4], [skyline_int.v5], [skyline_int.v6]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v3], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
  3 - output([other.c1]), filter(nil), rowset=16
      access([other.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  4 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain select v1, tenant_id from skyline_int group by v2, v3, v4 order by v2, v3, v4, v5;
Query Plan
=========================================================================
|ID|OPERATOR         |NAME                        |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                            |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v2_v3_v4_v5)|1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v1], [skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v2], [skyline_int.v3], [skyline_int.v4]), agg_func(nil)
  1 - output([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v2], [skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v1], [skyline_int.tenant_id], [skyline_int.v2], [skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select distinct v2, v3, v4, v5 from skyline_int group by v2, v3, v4;
Query Plan
=========================================================================
|ID|OPERATOR         |NAME                        |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY   |                            |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v2_v3_v4_v5)|1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      group([skyline_int.v2], [skyline_int.v3], [skyline_int.v4]), agg_func(nil)
  1 - output([skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v2], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain (select c1, c2, c3 from other group by c1, c2) union select c1, c2, c3 from other group by c1, c2;
Query Plan
=====================================================
|ID|OPERATOR            |NAME |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE UNION DISTINCT|     |2       |5           |
|1 |├─TABLE FULL SCAN   |other|1       |3           |
|2 |└─TABLE FULL SCAN   |other|1       |3           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])], [UNION([3])]), filter(nil), rowset=16
  1 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
  2 - output([other.c1], [other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c1], [other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c1]), range(MIN ; MAX)always true
explain select distinct v3, v4, v5 from skyline_int order by v3, v4, v5, v6;
Query Plan
============================================================================
|ID|OPERATOR         |NAME                           |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------------------
|0 |MERGE DISTINCT   |                               |1       |3           |
|1 |└─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v6_v2)|1       |3           |
============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v3], [skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v6], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,
      MIN,MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select distinct v3, v4 from skyline_int union select  distinct c2, c3 from other;
Query Plan
=========================================================================
|ID|OPERATOR            |NAME                     |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE UNION DISTINCT|                         |2       |5           |
|1 |├─TABLE FULL SCAN   |skyline_int(idx_v3_v4_v2)|1       |3           |
|2 |└─TABLE FULL SCAN   |other(idx_c2_c3)         |1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
  1 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
  2 - output([other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain (select v3, v4 from skyline_int order by v3, v4) union select  distinct c2, c3 from other order by v3, v4;
Query Plan
=========================================================================
|ID|OPERATOR            |NAME                     |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE UNION DISTINCT|                         |2       |5           |
|1 |├─TABLE FULL SCAN   |skyline_int(idx_v3_v4_v2)|1       |3           |
|2 |└─TABLE FULL SCAN   |other(idx_c2_c3)         |1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
  1 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
  2 - output([other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain (select v3, v4 from skyline_int order by v3, v4) union (select  distinct c2, c3 from other order by c2, c3) order by 1,2;
Query Plan
=========================================================================
|ID|OPERATOR            |NAME                     |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE UNION DISTINCT|                         |2       |5           |
|1 |├─TABLE FULL SCAN   |skyline_int(idx_v3_v4_v2)|1       |3           |
|2 |└─TABLE FULL SCAN   |other(idx_c2_c3)         |1       |3           |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
  1 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
  2 - output([other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select /*+use_nl(skyline_int other)*/tenant_id from skyline_int join other where skyline_int.v3 = other.c2 group by  v3, v4;
Query Plan
=========================================================================
|ID|OPERATOR            |NAME                     |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |MERGE GROUP BY      |                         |1       |19          |
|1 |└─NESTED-LOOP JOIN  |                         |1       |19          |
|2 |  ├─TABLE FULL SCAN |skyline_int(idx_v3_v4_v2)|1       |3           |
|3 |  └─TABLE RANGE SCAN|other(idx_c2)            |1       |16          |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4]), agg_func(nil)
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.tenant_id]), filter(nil), rowset=16
      conds(nil), nl_params_([skyline_int.v3(:0)]), use_batch=true
  2 - output([skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
  3 - output(nil), filter(nil), rowset=16
      access([GROUP_ID]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c1]), range(MIN ; MAX), 
      range_cond([:0 = other.c2])
explain select /*+use_nl(skyline_int other)*/tenant_id from skyline_int join other where skyline_int.v3 = other.c2 group by  v3, v4, v5;
Query Plan
============================================================================
|ID|OPERATOR            |NAME                        |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------------------
|0 |MERGE GROUP BY      |                            |1       |19          |
|1 |└─NESTED-LOOP JOIN  |                            |1       |19          |
|2 |  ├─TABLE FULL SCAN |skyline_int(idx_v3_v4_v5_v2)|1       |3           |
|3 |  └─TABLE RANGE SCAN|other(idx_c2)               |1       |16          |
============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.tenant_id]), filter(nil), rowset=16
      conds(nil), nl_params_([skyline_int.v3(:0)]), use_batch=true
  2 - output([skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
  3 - output(nil), filter(nil), rowset=16
      access([GROUP_ID]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c1]), range(MIN ; MAX), 
      range_cond([:0 = other.c2])
explain select /*use_nl(skyline_int other)*/tenant_id from skyline_int join other where skyline_int.v3 = other.c2 and skyline_int.v4 = other.c3 group by v3, v4, v5;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |MERGE GROUP BY     |                            |1       |5           |
|1 |└─MERGE JOIN       |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
|3 |  └─TABLE FULL SCAN|other(idx_c2_c3)            |1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.tenant_id]), filter(nil), rowset=16
      group([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), agg_func(nil)
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.tenant_id]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2], [skyline_int.v4 = other.c3]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.tenant_id], [skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
  3 - output([other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select /*+use_hash(skyline_int other)*/ v3, v4 from skyline_int join other on skyline_int.v3 = other.c2 order by v3, v4, v5;
Query Plan
===========================================================================
|ID|OPERATOR           |NAME                        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |SORT               |                            |1       |5           |
|1 |└─HASH JOIN        |                            |1       |5           |
|2 |  ├─TABLE FULL SCAN|other(idx_c2)               |1       |3           |
|3 |  └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC], [skyline_int.v4, ASC], [skyline_int.v5, ASC])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2]), other_conds(nil)
  2 - output([other.c2]), filter(nil), rowset=16
      access([other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c1]), range(MIN,MIN ; MAX,MAX)always true
  3 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select /*+use_hash(skyline_int other)*/ distinct v3, v4 from skyline_int join other on skyline_int.v3 = other.c2 order by v3, v4, v5;
Query Plan
=============================================================================
|ID|OPERATOR             |NAME                        |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |MERGE DISTINCT       |                            |1       |5           |
|1 |└─SORT               |                            |1       |5           |
|2 |  └─HASH JOIN        |                            |1       |5           |
|3 |    ├─TABLE FULL SCAN|other(idx_c2)               |1       |3           |
|4 |    └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      distinct([skyline_int.v3], [skyline_int.v4])
  1 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC], [skyline_int.v4, ASC])
  2 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2]), other_conds(nil)
  3 - output([other.c2]), filter(nil), rowset=16
      access([other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c1]), range(MIN,MIN ; MAX,MAX)always true
  4 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,
      MIN,MIN ; MAX,MAX,MAX,MAX,MAX,MAX)always true
explain select /*+leading(other skyline_int) use_hash(other skyline_int)*/ distinct v3, v4 from skyline_int join other on skyline_int.v3 = other.c2 union select c2, c3 from other;
Query Plan
==========================================================================
|ID|OPERATOR             |NAME                     |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE UNION DISTINCT |                         |2       |7           |
|1 |├─TABLE FULL SCAN    |other(idx_c2_c3)         |1       |3           |
|2 |└─SORT               |                         |1       |5           |
|3 |  └─HASH JOIN        |                         |1       |5           |
|4 |    ├─TABLE FULL SCAN|other(idx_c2)            |1       |3           |
|5 |    └─TABLE FULL SCAN|skyline_int(idx_v3_v4_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
  1 - output([other.c2], [other.c3]), filter(nil), rowset=16
      access([other.c2], [other.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c3], [other.c1]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      sort_keys([skyline_int.v3, ASC], [skyline_int.v4, ASC])
  3 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      equal_conds([skyline_int.v3 = other.c2]), other_conds(nil)
  4 - output([other.c2]), filter(nil), rowset=16
      access([other.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([other.c2], [other.c1]), range(MIN,MIN ; MAX,MAX)always true
  5 - output([skyline_int.v3], [skyline_int.v4]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(MIN,MIN,MIN,MIN,MIN ; MAX,MAX,MAX,
      MAX,MAX)always true
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 > 100 group by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,100,MAX,MAX,
      MAX,MAX ; 100,MAX,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 > 100])
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 >= 100 group by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,100,MIN,MIN,
      MIN,MIN ; 100,MAX,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 >= 100])
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 < 100 group by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,NULL,MAX,MAX,
      MAX,MAX ; 100,100,MIN,MIN,MIN,MIN), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 < 100])
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 <= 100 group by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,NULL,MAX,MAX,
      MAX,MAX ; 100,100,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 <= 100])
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 > 100 and v4 < 1000 group by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,100,MAX,MAX,
      MAX,MAX ; 100,1000,MIN,MIN,MIN,MIN), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 > 100], [skyline_int.v4 < 1000])
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 >= 100 and v4 < 1000 group by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,100,MIN,MIN,
      MIN,MIN ; 100,1000,MIN,MIN,MIN,MIN), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 >= 100], [skyline_int.v4 < 1000])
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 > 100 and v4 <= 1000 group by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,100,MAX,MAX,
      MAX,MAX ; 100,1000,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 > 100], [skyline_int.v4 <= 1000])
explain select v3, v4, v5 from skyline_int where v3 = 100 and v4 >= 100 and v4 <= 1000 group by v3, v4, v5;
Query Plan
==========================================================================
|ID|OPERATOR          |NAME                        |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------------
|0 |MERGE DISTINCT    |                            |1       |3           |
|1 |└─TABLE RANGE SCAN|skyline_int(idx_v3_v4_v5_v2)|1       |3           |
==========================================================================
Outputs & filters:
-------------------------------------
  0 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      distinct([skyline_int.v4], [skyline_int.v5])
  1 - output([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), filter(nil), rowset=16
      access([skyline_int.v3], [skyline_int.v4], [skyline_int.v5]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([skyline_int.v3], [skyline_int.v4], [skyline_int.v5], [skyline_int.v2], [skyline_int.v1], [skyline_int.tenant_id]), range(100,100,MIN,MIN,
      MIN,MIN ; 100,1000,MAX,MAX,MAX,MAX), 
      range_cond([skyline_int.v3 = 100], [skyline_int.v4 >= 100], [skyline_int.v4 <= 1000])
set @@recyclebin = 'off';
drop database hualong;
