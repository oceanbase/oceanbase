drop database if exists bushy_leading_hint_db;
create database bushy_leading_hint_db;
use bushy_leading_hint_db;
drop table if exists nn1;
drop table if exists nn2;
drop table if exists t1;
drop table if exists t2;
drop table if exists t3;
create table nn1(c1 int, c2 int, c3 varchar(10));
create table nn2(d1 int, d2 int, d3 varchar(10));
create table t1(a int, b int, c int);
create table t2(a int, b int, c int);
create table t3(a int, b int, c int);
create procedure insert_p_nn1nn2() 
begin
declare i int;
insert into nn1 values(null, null, null);
insert into nn2 values(null, null, null);
set i = 0;
while i < 10 do
insert into nn1 values(mod(i, 7), mod(i, 6), concat('hello1', mod(i, 3)));
insert into nn2 values(mod(i, 5), mod(i, 3), concat('hello1', mod(i, 2)));
set i = i + 1;
end while;
end 
//
call insert_p_nn1nn2();
result_format: 4
explain_protocol: 2 
### 1, 基本测试  ###
EXPLAIN select /*+ leading(c,  (b , a) ) */ count(*),sum(a.c1+b.d2*a.c2) from nn1 a  join nn2 b on a.c1 = b.d2 join nn1 c on b.d1 = c.c1 where a.c2 < 5  ;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SCALAR GROUP BY      |    |1       |21          |
|1 |└─HASH JOIN          |    |17      |20          |
|2 |  ├─TABLE FULL SCAN  |c   |11      |5           |
|3 |  └─HASH JOIN        |    |13      |13          |
|4 |    ├─TABLE FULL SCAN|b   |11      |5           |
|5 |    └─TABLE FULL SCAN|a   |9       |5           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1 + b.d2 * a.c2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1 + b.d2 * a.c2)])
  1 - output([a.c1], [b.d2], [a.c2]), filter(nil), rowset=16
      equal_conds([b.d1 = c.c1]), other_conds(nil)
  2 - output([c.c1]), filter(nil), rowset=16
      access([c.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  3 - output([a.c1], [b.d2], [b.d1], [a.c2]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d2]), other_conds(nil)
  4 - output([b.d2], [b.d1]), filter(nil), rowset=16
      access([b.d2], [b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
  5 - output([a.c1], [a.c2]), filter([a.c2 < 5]), rowset=16
      access([a.c1], [a.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(c,  (b , a) ) */ count(*),sum(a.c1+b.d2*a.c2) from nn1 a  join nn2 b on a.c1 = b.d2 join nn1 c on b.d1 = c.c1 where a.c2 < 5  ;
+----------+---------------------+
| count(*) | sum(a.c1+b.d2*a.c2) |
+----------+---------------------+
|       32 |                  95 |
+----------+---------------------+

EXPLAIN select /*+ leading(c,  (b , a) ) */ count(a.c1), sum(a.c2+b.d2) from nn1 a  join nn2 b on a.c1 = b.d2 join nn1 c on c.c1 = b.d2 + 1 where a.c2 < 15  ;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SCALAR GROUP BY      |    |1       |21          |
|1 |└─HASH JOIN          |    |19      |20          |
|2 |  ├─TABLE FULL SCAN  |c   |11      |5           |
|3 |  └─HASH JOIN        |    |14      |12          |
|4 |    ├─TABLE FULL SCAN|b   |11      |5           |
|5 |    └─TABLE FULL SCAN|a   |10      |5           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(a.c1)], [T_FUN_SUM(a.c2 + b.d2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(a.c1)], [T_FUN_SUM(a.c2 + b.d2)])
  1 - output([b.d2], [a.c1], [a.c2]), filter(nil), rowset=16
      equal_conds([c.c1 = b.d2 + 1]), other_conds(nil)
  2 - output([c.c1]), filter(nil), rowset=16
      access([c.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  3 - output([b.d2], [a.c1], [a.c2]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d2]), other_conds(nil)
  4 - output([b.d2]), filter(nil), rowset=16
      access([b.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
  5 - output([a.c1], [a.c2]), filter([a.c2 < 15]), rowset=16
      access([a.c1], [a.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(c,  (b , a) ) */ count(a.c1), sum(a.c2+b.d2) from nn1 a  join nn2 b on a.c1 = b.d2 join nn1 c on c.c1 = b.d2 + 1 where a.c2 < 15  ;
+-------------+----------------+
| count(a.c1) | sum(a.c2+b.d2) |
+-------------+----------------+
|          34 |             65 |
+-------------+----------------+

EXPLAIN select /*+ leading((c, d), (a , b) ) */ count(*),sum(a.c1),sum(b.d2) from nn1 a  join nn2 b on a.c1 = b.d2  
join nn1 c on b.d1 = c.c1 join nn1 d on d.c2 = c.c2 where a.c2 < 5  ;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SCALAR GROUP BY      |    |1       |31          |
|1 |└─HASH JOIN          |    |25      |29          |
|2 |  ├─HASH JOIN        |    |17      |13          |
|3 |  │ ├─TABLE FULL SCAN|c   |11      |5           |
|4 |  │ └─TABLE FULL SCAN|d   |11      |5           |
|5 |  └─HASH JOIN        |    |13      |13          |
|6 |    ├─TABLE FULL SCAN|a   |9       |5           |
|7 |    └─TABLE FULL SCAN|b   |11      |5           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1)], [T_FUN_SUM(b.d2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1)], [T_FUN_SUM(b.d2)])
  1 - output([a.c1], [b.d2]), filter(nil), rowset=16
      equal_conds([b.d1 = c.c1]), other_conds(nil)
  2 - output([c.c1]), filter(nil), rowset=16
      equal_conds([d.c2 = c.c2]), other_conds(nil)
  3 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  4 - output([d.c2]), filter(nil), rowset=16
      access([d.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  5 - output([a.c1], [b.d2], [b.d1]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d2]), other_conds(nil)
  6 - output([a.c1]), filter([a.c2 < 5]), rowset=16
      access([a.c1], [a.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  7 - output([b.d2], [b.d1]), filter(nil), rowset=16
      access([b.d2], [b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading((c, d), (a , b) ) */ count(*),sum(a.c1),sum(b.d2) from nn1 a  join nn2 b on a.c1 = b.d2  
join nn1 c on b.d1 = c.c1 join nn1 d on d.c2 = c.c2 where a.c2 < 5  ;
+----------+-----------+-----------+
| count(*) | sum(a.c1) | sum(b.d2) |
+----------+-----------+-----------+
|       60 |        58 |        58 |
+----------+-----------+-----------+

EXPLAIN select /*+ leading(c, d, (a , b)) */ count(*),sum(a.c1+b.d1+c.c1-d.c2) from 
nn1 a, nn2 b , nn1 c, nn1 d 
where a.c1 = b.d2 and b.d1 = c.c1 and d.c2 = c.c2;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SCALAR GROUP BY      |    |1       |31          |
|1 |└─HASH JOIN          |    |29      |30          |
|2 |  ├─HASH JOIN        |    |17      |13          |
|3 |  │ ├─TABLE FULL SCAN|c   |11      |5           |
|4 |  │ └─TABLE FULL SCAN|d   |11      |5           |
|5 |  └─HASH JOIN        |    |15      |12          |
|6 |    ├─TABLE FULL SCAN|a   |11      |5           |
|7 |    └─TABLE FULL SCAN|b   |11      |5           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1 + b.d1 + c.c1 - d.c2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1 + b.d1 + c.c1 - d.c2)])
  1 - output([b.d1], [c.c1], [d.c2], [a.c1]), filter(nil), rowset=16
      equal_conds([b.d1 = c.c1]), other_conds(nil)
  2 - output([c.c1], [d.c2]), filter(nil), rowset=16
      equal_conds([d.c2 = c.c2]), other_conds(nil)
  3 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  4 - output([d.c2]), filter(nil), rowset=16
      access([d.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  5 - output([b.d1], [a.c1]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d2]), other_conds(nil)
  6 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  7 - output([b.d2], [b.d1]), filter(nil), rowset=16
      access([b.d2], [b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(c, d, (a , b)) */ count(*),sum(a.c1+b.d1+c.c1-d.c2) from 
nn1 a, nn2 b , nn1 c, nn1 d 
where a.c1 = b.d2 and b.d1 = c.c1 and d.c2 = c.c2;
+----------+--------------------------+
| count(*) | sum(a.c1+b.d1+c.c1-d.c2) |
+----------+--------------------------+
|       60 |                      122 |
+----------+--------------------------+

EXPLAIN select /*+ leading(c,  (a ,d, b) ) use_hash(c,d) */ count(a.c1),sum(b.d1*b.d2-a.c2) from nn1 a  join nn2 b on a.c1 = b.d2  
join nn1 c on b.d1 = c.c1 join nn1 d on d.c2 = c.c2 where a.c2 < 5 and d.c1 = b.d2 
and d.c2 = a.c1  ;
Query Plan
=======================================================
|ID|OPERATOR               |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |SCALAR GROUP BY        |    |1       |29          |
|1 |└─HASH JOIN            |    |11      |29          |
|2 |  ├─TABLE FULL SCAN    |c   |11      |5           |
|3 |  └─HASH JOIN          |    |17      |20          |
|4 |    ├─HASH JOIN        |    |8       |13          |
|5 |    │ ├─TABLE FULL SCAN|a   |9       |5           |
|6 |    │ └─TABLE FULL SCAN|d   |6       |5           |
|7 |    └─TABLE FULL SCAN  |b   |11      |5           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(a.c1)], [T_FUN_SUM(b.d1 * b.d2 - a.c2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(a.c1)], [T_FUN_SUM(b.d1 * b.d2 - a.c2)])
  1 - output([b.d1], [a.c1], [b.d2], [a.c2]), filter(nil), rowset=16
      equal_conds([b.d1 = c.c1], [d.c2 = c.c2]), other_conds(nil)
  2 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  3 - output([b.d1], [a.c1], [b.d2], [d.c2], [a.c2]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d2]), other_conds(nil)
  4 - output([a.c1], [d.c2], [a.c2]), filter(nil), rowset=16
      equal_conds([d.c2 = a.c1]), other_conds(nil)
  5 - output([a.c1], [a.c2]), filter([a.c2 < 5]), rowset=16
      access([a.c1], [a.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  6 - output([d.c2]), filter([d.c1 = d.c2]), rowset=16
      access([d.c2], [d.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  7 - output([b.d2], [b.d1]), filter(nil), rowset=16
      access([b.d2], [b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(c,  (a ,d, b) ) use_hash(c,d) */ count(a.c1),sum(b.d1*b.d2-a.c2) from nn1 a  join nn2 b on a.c1 = b.d2  
join nn1 c on b.d1 = c.c1 join nn1 d on d.c2 = c.c2 where a.c2 < 5 and d.c1 = b.d2 
and d.c2 = a.c1  ;
+-------------+---------------------+
| count(a.c1) | sum(b.d1*b.d2-a.c2) |
+-------------+---------------------+
|           6 |                   1 |
+-------------+---------------------+

EXPLAIN select /*+ leading(c,  (d, b) ) */ count(*) 
from  nn2 b, nn1 c, nn1 d
where b.d1 = c.c1 and d.c2 = c.c2 and d.c1 = b.d2;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SCALAR GROUP BY      |    |1       |21          |
|1 |└─HASH JOIN          |    |11      |21          |
|2 |  ├─TABLE FULL SCAN  |c   |11      |5           |
|3 |  └─HASH JOIN        |    |15      |13          |
|4 |    ├─TABLE FULL SCAN|d   |11      |5           |
|5 |    └─TABLE FULL SCAN|b   |11      |5           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)])
  1 - output(nil), filter(nil), rowset=16
      equal_conds([b.d1 = c.c1], [d.c2 = c.c2]), other_conds(nil)
  2 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  3 - output([d.c2], [b.d1]), filter(nil), rowset=16
      equal_conds([d.c1 = b.d2]), other_conds(nil)
  4 - output([d.c2], [d.c1]), filter(nil), rowset=16
      access([d.c2], [d.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  5 - output([b.d1], [b.d2]), filter(nil), rowset=16
      access([b.d1], [b.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(c,  (d, b) ) */ count(*) 
from  nn2 b, nn1 c, nn1 d
where b.d1 = c.c1 and d.c2 = c.c2 and d.c1 = b.d2;
+----------+
| count(*) |
+----------+
|        9 |
+----------+

EXPLAIN select /*+ leading(t2, (t1, t3), t7, (t8, t9), (t4, t5, t6)) */
count(*) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1 
and t1.c3 = 'hello11' and t2.c2 < 4 ;
Query Plan
===========================================================
|ID|OPERATOR                   |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------
|0 |SCALAR GROUP BY            |    |1       |66          |
|1 |└─HASH JOIN                |    |41      |65          |
|2 |  ├─HASH JOIN              |    |14      |39          |
|3 |  │ ├─HASH JOIN            |    |7       |24          |
|4 |  │ │ ├─HASH JOIN          |    |5       |18          |
|5 |  │ │ │ ├─TABLE FULL SCAN  |t2  |10      |5           |
|6 |  │ │ │ └─HASH JOIN        |    |4       |11          |
|7 |  │ │ │   ├─TABLE FULL SCAN|t1  |3       |5           |
|8 |  │ │ │   └─TABLE FULL SCAN|t3  |6       |5           |
|9 |  │ │ └─TABLE FULL SCAN    |t7  |11      |5           |
|10|  │ └─HASH JOIN            |    |15      |12          |
|11|  │   ├─TABLE FULL SCAN    |t8  |11      |5           |
|12|  │   └─TABLE FULL SCAN    |t9  |11      |5           |
|13|  └─HASH JOIN              |    |21      |20          |
|14|    ├─HASH JOIN            |    |15      |12          |
|15|    │ ├─TABLE FULL SCAN    |t4  |11      |5           |
|16|    │ └─TABLE FULL SCAN    |t5  |11      |5           |
|17|    └─TABLE FULL SCAN      |t6  |11      |5           |
===========================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)])
  1 - output(nil), filter(nil), rowset=16
      equal_conds([t1.c1 = t4.c1]), other_conds(nil)
  2 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t8.c1]), other_conds(nil)
  3 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t7.c1]), other_conds(nil)
  4 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  5 - output([t2.c1]), filter([t2.c2 < 4]), rowset=16
      access([t2.c1], [t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t3.c2]), other_conds(nil)
  7 - output([t1.c1]), filter([t1.c3 = 'hello11']), rowset=16
      access([t1.c1], [t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t3.c2]), filter([t3.c2 = t3.c1]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t7.c1]), filter(nil), rowset=16
      access([t7.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t8.c1]), filter(nil), rowset=16
      equal_conds([t8.c1 = t9.c1]), other_conds(nil)
 11 - output([t8.c1]), filter(nil), rowset=16
      access([t8.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t9.c1]), filter(nil), rowset=16
      access([t9.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t9.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t4.c1]), filter(nil), rowset=16
      equal_conds([t4.c1 = t6.c1]), other_conds(nil)
 14 - output([t4.c1]), filter(nil), rowset=16
      equal_conds([t4.c1 = t5.c1]), other_conds(nil)
 15 - output([t4.c1]), filter(nil), rowset=16
      access([t4.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 16 - output([t5.c1]), filter(nil), rowset=16
      access([t5.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t6.c1]), filter(nil), rowset=16
      access([t6.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t2, (t1, t3), t7, (t8, t9), (t4, t5, t6)) */
count(*) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1 
and t1.c3 = 'hello11' and t2.c2 < 4 ;
+----------+
| count(*) |
+----------+
|      256 |
+----------+

EXPLAIN select /*+ leading(t1,t2,t3,(t4,t5,t6),(t7,t8)) */ count(*),sum(t1.c1+t2.d1+t3.c1+t4.d2-t5.c1+t6.d2-t7.c1-t8.d2)
from nn1 t1, nn2 t2, nn1 t3, nn2 t4, nn1 t5 , nn2 t6, nn1 t7, nn2 t8
where t1.c1 = t2.d1 and t1.c2 = t3.c1 and 
t4.d1 = t1.c1 and t5.c1 = t2.d2 and t6.d2 = t3.c1 AND
t7.c1 = t2.d1 and t7.c2 = t5.c1 and t8.d1 = t4.d2 and t8.d2 = t6.d2;
Query Plan
===================================================================
|ID|OPERATOR                           |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |SCALAR GROUP BY                    |    |1       |269         |
|1 |└─HASH JOIN                        |    |81      |266         |
|2 |  ├─HASH JOIN                      |    |81      |210         |
|3 |  │ ├─HASH JOIN                    |    |19      |22          |
|4 |  │ │ ├─HASH JOIN                  |    |15      |13          |
|5 |  │ │ │ ├─TABLE FULL SCAN          |t1  |11      |5           |
|6 |  │ │ │ └─TABLE FULL SCAN          |t2  |11      |5           |
|7 |  │ │ └─TABLE FULL SCAN            |t3  |11      |5           |
|8 |  │ └─NESTED-LOOP JOIN CARTESIAN   |    |1331    |51          |
|9 |  │   ├─NESTED-LOOP JOIN CARTESIAN |    |121     |12          |
|10|  │   │ ├─TABLE FULL SCAN          |t4  |11      |5           |
|11|  │   │ └─MATERIAL                 |    |11      |5           |
|12|  │   │   └─TABLE FULL SCAN        |t5  |11      |5           |
|13|  │   └─MATERIAL                   |    |11      |5           |
|14|  │     └─TABLE FULL SCAN          |t6  |11      |5           |
|15|  └─NESTED-LOOP JOIN CARTESIAN     |    |121     |13          |
|16|    ├─TABLE FULL SCAN              |t7  |11      |5           |
|17|    └─MATERIAL                     |    |11      |6           |
|18|      └─TABLE FULL SCAN            |t8  |11      |5           |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t2.d1 + t3.c1 + t4.d2 - t5.c1 + t6.d2 - t7.c1 - t8.d2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t2.d1 + t3.c1 + t4.d2 - t5.c1 + t6.d2 - t7.c1 - t8.d2)])
  1 - output([t7.c1], [t2.d1], [t5.c1], [t4.d2], [t8.d2], [t6.d2], [t1.c1], [t3.c1]), filter(nil), rowset=16
      equal_conds([t7.c1 = t2.d1], [t7.c2 = t5.c1], [t8.d1 = t4.d2], [t8.d2 = t6.d2]), other_conds(nil)
  2 - output([t2.d1], [t5.c1], [t4.d2], [t6.d2], [t1.c1], [t3.c1]), filter(nil), rowset=16
      equal_conds([t4.d1 = t1.c1], [t5.c1 = t2.d2], [t6.d2 = t3.c1]), other_conds(nil)
  3 - output([t2.d1], [t1.c1], [t3.c1], [t2.d2]), filter(nil), rowset=16
      equal_conds([t1.c2 = t3.c1]), other_conds(nil)
  4 - output([t2.d1], [t1.c1], [t1.c2], [t2.d2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.d1]), other_conds(nil)
  5 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.d1], [t2.d2]), filter(nil), rowset=16
      access([t2.d1], [t2.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.c1]), filter(nil), rowset=16
      access([t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t5.c1], [t4.d2], [t6.d2], [t4.d1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  9 - output([t5.c1], [t4.d2], [t4.d1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
 10 - output([t4.d1], [t4.d2]), filter(nil), rowset=16
      access([t4.d1], [t4.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t5.c1]), filter(nil), rowset=16
 12 - output([t5.c1]), filter(nil), rowset=16
      access([t5.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t6.d2]), filter(nil), rowset=16
 14 - output([t6.d2]), filter(nil), rowset=16
      access([t6.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t7.c1], [t8.d2], [t7.c2], [t8.d1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
 16 - output([t7.c1], [t7.c2]), filter(nil), rowset=16
      access([t7.c1], [t7.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t8.d2], [t8.d1]), filter(nil), rowset=16
 18 - output([t8.d1], [t8.d2]), filter(nil), rowset=16
      access([t8.d1], [t8.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t1,t2,t3,(t4,t5,t6),(t7,t8)) */ count(*),sum(t1.c1+t2.d1+t3.c1+t4.d2-t5.c1+t6.d2-t7.c1-t8.d2)
from nn1 t1, nn2 t2, nn1 t3, nn2 t4, nn1 t5 , nn2 t6, nn1 t7, nn2 t8
where t1.c1 = t2.d1 and t1.c2 = t3.c1 and 
t4.d1 = t1.c1 and t5.c1 = t2.d2 and t6.d2 = t3.c1 AND
t7.c1 = t2.d1 and t7.c2 = t5.c1 and t8.d1 = t4.d2 and t8.d2 = t6.d2;
+----------+------------------------------------------------------+
| count(*) | sum(t1.c1+t2.d1+t3.c1+t4.d2-t5.c1+t6.d2-t7.c1-t8.d2) |
+----------+------------------------------------------------------+
|       64 |                                                  132 |
+----------+------------------------------------------------------+

EXPLAIN select /*+ leading(c, (d, (a,b))) */ count(a.c1+b.d2+a.c2) from nn1 a  join nn2 b on a.c1 = b.d2  
join nn1 c on b.d1 = c.c1 join nn1 d on d.c2 = c.c2 where a.c2 < 5  ;
Query Plan
===============================================================
|ID|OPERATOR                       |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1       |42          |
|1 |└─HASH JOIN                    |    |25      |42          |
|2 |  ├─TABLE FULL SCAN            |c   |11      |5           |
|3 |  └─NESTED-LOOP JOIN CARTESIAN |    |139     |22          |
|4 |    ├─TABLE FULL SCAN          |d   |11      |5           |
|5 |    └─MATERIAL                 |    |13      |14          |
|6 |      └─HASH JOIN              |    |13      |13          |
|7 |        ├─TABLE FULL SCAN      |a   |9       |5           |
|8 |        └─TABLE FULL SCAN      |b   |11      |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(a.c1 + b.d2 + a.c2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(a.c1 + b.d2 + a.c2)])
  1 - output([a.c1], [b.d2], [a.c2]), filter(nil), rowset=16
      equal_conds([d.c2 = c.c2], [b.d1 = c.c1]), other_conds(nil)
  2 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  3 - output([d.c2], [a.c1], [b.d2], [a.c2], [b.d1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  4 - output([d.c2]), filter(nil), rowset=16
      access([d.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  5 - output([a.c1], [b.d2], [a.c2], [b.d1]), filter(nil), rowset=16
  6 - output([a.c1], [b.d2], [a.c2], [b.d1]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d2]), other_conds(nil)
  7 - output([a.c1], [a.c2]), filter([a.c2 < 5]), rowset=16
      access([a.c1], [a.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  8 - output([b.d2], [b.d1]), filter(nil), rowset=16
      access([b.d2], [b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(c, (d, (a,b))) */ count(a.c1+b.d2+a.c2) from nn1 a  join nn2 b on a.c1 = b.d2  
join nn1 c on b.d1 = c.c1 join nn1 d on d.c2 = c.c2 where a.c2 < 5  ;
+-----------------------+
| count(a.c1+b.d2+a.c2) |
+-----------------------+
|                    60 |
+-----------------------+

EXPLAIN select /*+ leading(t2,  (t1, (t3 , (t7,  (t8, (t9 ,  (t4, (t5, (t6))))))))) */
count(*),sum(t1.c1+t2.c1+t3.c1+t4.c2-t5.c1+t6.c2-t7.c1-t8.c2)+count(t9.c1)
from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
Query Plan
=================================================================
|ID|OPERATOR                         |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |SCALAR GROUP BY                  |    |1       |95          |
|1 |└─HASH JOIN                      |    |105     |90          |
|2 |  ├─TABLE FULL SCAN              |t2  |11      |5           |
|3 |  └─HASH JOIN                    |    |73      |75          |
|4 |    ├─TABLE FULL SCAN            |t1  |11      |5           |
|5 |    └─HASH JOIN                  |    |51      |63          |
|6 |      ├─TABLE FULL SCAN          |t3  |6       |5           |
|7 |      └─HASH JOIN                |    |60      |50          |
|8 |        ├─TABLE FULL SCAN        |t7  |11      |5           |
|9 |        └─HASH JOIN              |    |42      |39          |
|10|          ├─TABLE FULL SCAN      |t8  |11      |5           |
|11|          └─HASH JOIN            |    |30      |29          |
|12|            ├─TABLE FULL SCAN    |t9  |11      |5           |
|13|            └─HASH JOIN          |    |21      |21          |
|14|              ├─TABLE FULL SCAN  |t4  |11      |5           |
|15|              └─HASH JOIN        |    |15      |12          |
|16|                ├─TABLE FULL SCAN|t5  |11      |5           |
|17|                └─TABLE FULL SCAN|t6  |11      |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t2.c1 + t3.c1 + t4.c2 - t5.c1 + t6.c2 - t7.c1 - t8.c2) + cast(T_FUN_COUNT(t9.c1), DECIMAL(20, 0))]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t2.c1 + t3.c1 + t4.c2 - t5.c1 + t6.c2 - t7.c1 - t8.c2)], [T_FUN_COUNT(t9.c1)])
  1 - output([t1.c1], [t2.c1], [t3.c1], [t7.c1], [t8.c2], [t9.c1], [t5.c1], [t4.c2], [t6.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  2 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t1.c1], [t3.c1], [t7.c1], [t8.c2], [t9.c1], [t5.c1], [t4.c2], [t6.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t3.c2]), other_conds(nil)
  4 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t3.c1], [t3.c2], [t7.c1], [t8.c2], [t9.c1], [t5.c1], [t4.c2], [t6.c2]), filter(nil), rowset=16
      equal_conds([t3.c1 = t4.c1]), other_conds(nil)
  6 - output([t3.c2], [t3.c1]), filter([t3.c2 = t3.c1]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t4.c1], [t7.c1], [t8.c2], [t9.c1], [t5.c1], [t4.c2], [t6.c2]), filter(nil), rowset=16
      equal_conds([t4.c1 = t7.c1]), other_conds(nil)
  8 - output([t7.c1]), filter(nil), rowset=16
      access([t7.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t4.c1], [t8.c2], [t9.c1], [t5.c1], [t4.c2], [t6.c2]), filter(nil), rowset=16
      equal_conds([t4.c1 = t8.c1]), other_conds(nil)
 10 - output([t8.c1], [t8.c2]), filter(nil), rowset=16
      access([t8.c1], [t8.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t4.c1], [t9.c1], [t5.c1], [t4.c2], [t6.c2]), filter(nil), rowset=16
      equal_conds([t4.c1 = t9.c1]), other_conds(nil)
 12 - output([t9.c1]), filter(nil), rowset=16
      access([t9.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t9.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t4.c1], [t5.c1], [t4.c2], [t6.c2]), filter(nil), rowset=16
      equal_conds([t4.c1 = t5.c1]), other_conds(nil)
 14 - output([t4.c1], [t4.c2]), filter(nil), rowset=16
      access([t4.c1], [t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t5.c1], [t6.c2]), filter(nil), rowset=16
      equal_conds([t5.c1 = t6.c1]), other_conds(nil)
 16 - output([t5.c1]), filter(nil), rowset=16
      access([t5.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t6.c1], [t6.c2]), filter(nil), rowset=16
      access([t6.c1], [t6.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t2,  (t1, (t3 , (t7,  (t8, (t9 ,  (t4, (t5, (t6))))))))) */
count(*),sum(t1.c1+t2.c1+t3.c1+t4.c2-t5.c1+t6.c2-t7.c1-t8.c2)+count(t9.c1)
from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
+----------+-------------------------------------------------------------------+
| count(*) | sum(t1.c1+t2.c1+t3.c1+t4.c2-t5.c1+t6.c2-t7.c1-t8.c2)+count(t9.c1) |
+----------+-------------------------------------------------------------------+
|      771 |                                                              2715 |
+----------+-------------------------------------------------------------------+

EXPLAIN select /*+ leading(t1, ((t2, t3), t4), (t5, t6)) */ count(t1.c1), count(t2.d1 * t3.c1), sum(t4.d1 + t5.c1)
from nn1 t1, nn2 t2, nn1 t3, nn2 t4, nn1 t5, nn2 t6
where t1.c1 = t2.d1 and t1.c2 = t3.c1 and t1.c1 + t2.d2 = t4.d1 + t1.c2 and 
 t4.d1 = t5.c1 + t6.d2 and t2.d2 = t5.c1 and t2.d1 = t6.d2 and 
  t1.c1 + t4.d2 = t5.c2 + t6.d2 - 1;
Query Plan
===================================================================
|ID|OPERATOR                           |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |SCALAR GROUP BY                    |    |1       |214         |
|1 |└─HASH JOIN                        |    |11      |213         |
|2 |  ├─HASH JOIN                      |    |11      |183         |
|3 |  │ ├─TABLE FULL SCAN              |t1  |11      |5           |
|4 |  │ └─NESTED-LOOP JOIN CARTESIAN   |    |1331    |51          |
|5 |  │   ├─NESTED-LOOP JOIN CARTESIAN |    |121     |12          |
|6 |  │   │ ├─TABLE FULL SCAN          |t2  |11      |5           |
|7 |  │   │ └─MATERIAL                 |    |11      |5           |
|8 |  │   │   └─TABLE FULL SCAN        |t3  |11      |5           |
|9 |  │   └─MATERIAL                   |    |11      |6           |
|10|  │     └─TABLE FULL SCAN          |t4  |11      |5           |
|11|  └─NESTED-LOOP JOIN CARTESIAN     |    |121     |12          |
|12|    ├─TABLE FULL SCAN              |t5  |11      |5           |
|13|    └─MATERIAL                     |    |11      |5           |
|14|      └─TABLE FULL SCAN            |t6  |11      |5           |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(t1.c1)], [T_FUN_COUNT(t2.d1 * t3.c1)], [T_FUN_SUM(t4.d1 + t5.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(t1.c1)], [T_FUN_COUNT(t2.d1 * t3.c1)], [T_FUN_SUM(t4.d1 + t5.c1)])
  1 - output([t4.d1], [t5.c1], [t2.d1], [t1.c1], [t3.c1]), filter(nil), rowset=16
      equal_conds([t4.d1 = t5.c1 + t6.d2], [t2.d2 = t5.c1], [t2.d1 = t6.d2], [t1.c1 + t4.d2 = t5.c2 + t6.d2 + -1]), other_conds(nil)
  2 - output([t4.d1], [t2.d1], [t1.c1], [t3.c1], [t2.d2], [t4.d2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.d1], [t1.c2 = t3.c1]), other_conds([t1.c1 + t2.d2 = t4.d1 + t1.c2])
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t4.d1], [t2.d1], [t3.c1], [t2.d2], [t4.d2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  5 - output([t2.d1], [t3.c1], [t2.d2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  6 - output([t2.d1], [t2.d2]), filter(nil), rowset=16
      access([t2.d1], [t2.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.c1]), filter(nil), rowset=16
  8 - output([t3.c1]), filter(nil), rowset=16
      access([t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t4.d1], [t4.d2]), filter(nil), rowset=16
 10 - output([t4.d1], [t4.d2]), filter(nil), rowset=16
      access([t4.d1], [t4.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t5.c1], [t6.d2], [t5.c2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
 12 - output([t5.c1], [t5.c2]), filter(nil), rowset=16
      access([t5.c1], [t5.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t6.d2]), filter(nil), rowset=16
 14 - output([t6.d2]), filter(nil), rowset=16
      access([t6.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t1, ((t2, t3), t4), (t5, t6)) */ count(t1.c1), count(t2.d1 * t3.c1), sum(t4.d1 + t5.c1)
from nn1 t1, nn2 t2, nn1 t3, nn2 t4, nn1 t5, nn2 t6
where t1.c1 = t2.d1 and t1.c2 = t3.c1 and t1.c1 + t2.d2 = t4.d1 + t1.c2 and 
 t4.d1 = t5.c1 + t6.d2 and t2.d2 = t5.c1 and t2.d1 = t6.d2 and 
  t1.c1 + t4.d2 = t5.c2 + t6.d2 - 1;
+--------------+----------------------+--------------------+
| count(t1.c1) | count(t2.d1 * t3.c1) | sum(t4.d1 + t5.c1) |
+--------------+----------------------+--------------------+
|           24 |                   24 |                 64 |
+--------------+----------------------+--------------------+

EXPLAIN select /*+ leading(t1, ((t2, t3), t4)) */ count(*), sum(t2.d1 * t3.c1 - t4.d2)
from nn1 t1, nn2 t2, nn1 t3, nn2 t4
where t1.c1 = t2.d1 and t1.c2 = t3.c1 and t1.c1 + t2.d2 = t4.d1 + t1.c2;
Query Plan
=================================================================
|ID|OPERATOR                         |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |SCALAR GROUP BY                  |    |1       |184         |
|1 |└─HASH JOIN                      |    |11      |183         |
|2 |  ├─TABLE FULL SCAN              |t1  |11      |5           |
|3 |  └─NESTED-LOOP JOIN CARTESIAN   |    |1331    |51          |
|4 |    ├─NESTED-LOOP JOIN CARTESIAN |    |121     |12          |
|5 |    │ ├─TABLE FULL SCAN          |t2  |11      |5           |
|6 |    │ └─MATERIAL                 |    |11      |5           |
|7 |    │   └─TABLE FULL SCAN        |t3  |11      |5           |
|8 |    └─MATERIAL                   |    |11      |6           |
|9 |      └─TABLE FULL SCAN          |t4  |11      |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t2.d1 * t3.c1 - t4.d2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t2.d1 * t3.c1 - t4.d2)])
  1 - output([t2.d1], [t3.c1], [t4.d2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.d1], [t1.c2 = t3.c1]), other_conds([t1.c1 + t2.d2 = t4.d1 + t1.c2])
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.d1], [t3.c1], [t2.d2], [t4.d1], [t4.d2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  4 - output([t2.d1], [t3.c1], [t2.d2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  5 - output([t2.d1], [t2.d2]), filter(nil), rowset=16
      access([t2.d1], [t2.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t3.c1]), filter(nil), rowset=16
  7 - output([t3.c1]), filter(nil), rowset=16
      access([t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t4.d1], [t4.d2]), filter(nil), rowset=16
  9 - output([t4.d1], [t4.d2]), filter(nil), rowset=16
      access([t4.d1], [t4.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t1, ((t2, t3), t4)) */ count(*), sum(t2.d1 * t3.c1 - t4.d2)
from nn1 t1, nn2 t2, nn1 t3, nn2 t4
where t1.c1 = t2.d1 and t1.c2 = t3.c1 and t1.c1 + t2.d2 = t4.d1 + t1.c2;
+----------+----------------------------+
| count(*) | sum(t2.d1 * t3.c1 - t4.d2) |
+----------+----------------------------+
|       44 |                        131 |
+----------+----------------------------+

EXPLAIN select /*+ leading(t1, (t2, t3)) */ count(*), sum(t2.d1+t3.c2)
from nn1 t1, nn2 t2, nn1 t3
where t1.c1 = t2.d1 and t1.c2 = t3.c1 and t1.c1 =t3.c1+t2.d2;
Query Plan
===============================================================
|ID|OPERATOR                       |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1       |33          |
|1 |└─HASH JOIN                    |    |11      |33          |
|2 |  ├─TABLE FULL SCAN            |t1  |11      |5           |
|3 |  └─NESTED-LOOP JOIN CARTESIAN |    |121     |13          |
|4 |    ├─TABLE FULL SCAN          |t2  |11      |5           |
|5 |    └─MATERIAL                 |    |11      |6           |
|6 |      └─TABLE FULL SCAN        |t3  |11      |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t2.d1 + t3.c2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t2.d1 + t3.c2)])
  1 - output([t2.d1], [t3.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.d1], [t1.c2 = t3.c1], [t1.c1 = t3.c1 + t2.d2]), other_conds(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.d1], [t3.c1], [t2.d2], [t3.c2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  4 - output([t2.d1], [t2.d2]), filter(nil), rowset=16
      access([t2.d1], [t2.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t3.c1], [t3.c2]), filter(nil), rowset=16
  6 - output([t3.c1], [t3.c2]), filter(nil), rowset=16
      access([t3.c1], [t3.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t1, (t2, t3)) */ count(*), sum(t2.d1+t3.c2)
from nn1 t1, nn2 t2, nn1 t3
where t1.c1 = t2.d1 and t1.c2 = t3.c1 and t1.c1 =t3.c1+t2.d2;
+----------+------------------+
| count(*) | sum(t2.d1+t3.c2) |
+----------+------------------+
|        6 |               20 |
+----------+------------------+

### 3, 复杂测试(集合、子查询中等)  ###
EXPLAIN SELECT count(*), sum(b.d1) from
  nn1 a,  nn2 b,  nn1 c
WHERE
  a.c1 = b.d1   and b.d2 = c.c1   and c.c2 in (
    select
      /*+ leading(x, ((y, z), x2, (y2,y3))) no_use_hash(y2, y3) */
      x.c1
    from nn1 x, nn2 y, nn1 z, nn1 x2, nn1 y2, nn1 y3
    where x.c2 = y.d2 and y.d1 = z.c2 and y2.c1 = y3.c1
  );
Query Plan
==================================================================
|ID|OPERATOR                         |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |SCALAR GROUP BY                  |     |1       |59          |
|1 |└─NESTED-LOOP JOIN CARTESIAN     |     |13      |58          |
|2 |  ├─NESTED-LOOP JOIN CARTESIAN   |     |13      |48          |
|3 |  │ ├─HASH JOIN                  |     |13      |44          |
|4 |  │ │ ├─HASH JOIN                |     |10      |37          |
|5 |  │ │ │ ├─HASH SEMI JOIN         |     |8       |30          |
|6 |  │ │ │ │ ├─TABLE FULL SCAN      |c    |11      |5           |
|7 |  │ │ │ │ └─SUBPLAN SCAN         |VIEW1|26      |21          |
|8 |  │ │ │ │   └─HASH JOIN          |     |26      |21          |
|9 |  │ │ │ │     ├─TABLE FULL SCAN  |z    |11      |5           |
|10|  │ │ │ │     └─HASH JOIN        |     |17      |13          |
|11|  │ │ │ │       ├─TABLE FULL SCAN|x    |11      |5           |
|12|  │ │ │ │       └─TABLE FULL SCAN|y    |11      |5           |
|13|  │ │ │ └─TABLE FULL SCAN        |b    |11      |5           |
|14|  │ │ └─TABLE FULL SCAN          |a    |11      |5           |
|15|  │ └─MATERIAL                   |     |1       |4           |
|16|  │   └─SUBPLAN SCAN             |VIEW2|1       |4           |
|17|  │     └─TABLE FULL SCAN        |x2   |1       |4           |
|18|  └─MATERIAL                     |     |1       |11          |
|19|    └─SUBPLAN SCAN               |VIEW3|1       |11          |
|20|      └─LIMIT                    |     |1       |11          |
|21|        └─MERGE JOIN             |     |1       |11          |
|22|          ├─SORT                 |     |3       |5           |
|23|          │ └─TABLE FULL SCAN    |y2   |11      |5           |
|24|          └─SORT                 |     |3       |5           |
|25|            └─TABLE FULL SCAN    |y3   |11      |5           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(b.d1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(b.d1)])
  1 - output([b.d1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  2 - output([b.d1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  3 - output([b.d1]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d1]), other_conds(nil)
  4 - output([b.d1]), filter(nil), rowset=16
      equal_conds([b.d2 = c.c1]), other_conds(nil)
  5 - output([c.c1]), filter(nil), rowset=16
      equal_conds([c.c2 = VIEW1.x.c1]), other_conds(nil)
  6 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  7 - output([VIEW1.x.c1]), filter(nil), rowset=16
      access([VIEW1.x.c1])
  8 - output([x.c1]), filter(nil), rowset=16
      equal_conds([y.d1 = z.c2]), other_conds(nil)
  9 - output([z.c2]), filter(nil), rowset=16
      access([z.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([z.__pk_increment]), range(MIN ; MAX)always true
 10 - output([x.c1], [y.d1]), filter(nil), rowset=16
      equal_conds([x.c2 = y.d2]), other_conds(nil)
 11 - output([x.c2], [x.c1]), filter(nil), rowset=16
      access([x.c2], [x.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([x.__pk_increment]), range(MIN ; MAX)always true
 12 - output([y.d2], [y.d1]), filter(nil), rowset=16
      access([y.d2], [y.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([y.__pk_increment]), range(MIN ; MAX)always true
 13 - output([b.d1], [b.d2]), filter(nil), rowset=16
      access([b.d1], [b.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
 14 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
 15 - output(nil), filter(nil), rowset=16
 16 - output(nil), filter(nil), rowset=16
      access(nil)
 17 - output([1]), filter(nil), rowset=16
      access(nil), partitions(p0)
      limit(1), offset(nil), is_index_back=false, is_global_index=false, 
      range_key([x2.__pk_increment]), range(MIN ; MAX)always true
 18 - output(nil), filter(nil), rowset=16
 19 - output(nil), filter(nil), rowset=16
      access(nil)
 20 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
 21 - output(nil), filter(nil), rowset=16
      equal_conds([y2.c1 = y3.c1]), other_conds(nil)
      merge_directions([ASC])
 22 - output([y2.c1]), filter(nil), rowset=16
      sort_keys([y2.c1, ASC])
 23 - output([y2.c1]), filter(nil), rowset=16
      access([y2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([y2.__pk_increment]), range(MIN ; MAX)always true
 24 - output([y3.c1]), filter(nil), rowset=16
      sort_keys([y3.c1, ASC])
 25 - output([y3.c1]), filter(nil), rowset=16
      access([y3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([y3.__pk_increment]), range(MIN ; MAX)always true
SELECT count(*), sum(b.d1) from
  nn1 a,  nn2 b,  nn1 c
WHERE
  a.c1 = b.d1   and b.d2 = c.c1   and c.c2 in (
    select
      /*+ leading(x, ((y, z), x2, (y2,y3))) no_use_hash(y2, y3) */
      x.c1
    from nn1 x, nn2 y, nn1 z, nn1 x2, nn1 y2, nn1 y3
    where x.c2 = y.d2 and y.d1 = z.c2 and y2.c1 = y3.c1
  );
+----------+-----------+
| count(*) | sum(b.d1) |
+----------+-----------+
|       27 |        45 |
+----------+-----------+

EXPLAIN select /*+ leading(t6, (t5, t4), (t3, t1), (t2)) */ count(*), sum(t2.c1) from nn1 t1, nn1 t2 , nn1 t3, nn1 t4, nn1 t5,  nn1 t6
where t1.c1 = t2.c1 and t2.c2 = t3.c1 and t3.c2 = t4.c1 and t4.c2 = t5.c1 and t5.c2 = t6.c1 and t5.c2 <> 44
union ALL
select /* leading(t2, t1, (t4, t3, (t6, t5))) */ sum(t1.c1), max(t2.c2)+sum(t5.c1-t6.c2) from nn1 t1, nn1 t2 , nn1 t3, nn1 t4, nn1 t5,  nn1 t6
where t1.c1 = t2.c1 and t2.c2 = t3.c1 and t3.c2 = t4.c1 and t4.c2 = t5.c1 and t5.c2 = t6.c1 and t5.c2 <> 55;
Query Plan
===========================================================================
|ID|OPERATOR                           |NAME        |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |TEMP TABLE TRANSFORMATION          |            |2       |157         |
|1 |├─TEMP TABLE INSERT                |TEMP1       |0       |153         |
|2 |│ └─HASH JOIN                      |            |42      |145         |
|3 |│   ├─HASH JOIN                    |            |272     |57          |
|4 |│   │ ├─HASH JOIN                  |            |19      |21          |
|5 |│   │ │ ├─TABLE FULL SCAN          |t6          |11      |5           |
|6 |│   │ │ └─HASH JOIN                |            |14      |13          |
|7 |│   │ │   ├─TABLE FULL SCAN        |t5          |10      |5           |
|8 |│   │ │   └─TABLE FULL SCAN        |t4          |11      |5           |
|9 |│   │ └─NESTED-LOOP JOIN CARTESIAN |            |121     |12          |
|10|│   │   ├─TABLE FULL SCAN          |t3          |11      |5           |
|11|│   │   └─MATERIAL                 |            |11      |5           |
|12|│   │     └─TABLE FULL SCAN        |t1          |11      |5           |
|13|│   └─TABLE FULL SCAN              |t2          |11      |5           |
|14|└─UNION ALL                        |            |2       |5           |
|15|  ├─SCALAR GROUP BY                |            |1       |2           |
|16|  │ └─TEMP TABLE ACCESS            |VIEW1(TEMP1)|34      |1           |
|17|  └─SCALAR GROUP BY                |            |1       |3           |
|18|    └─TEMP TABLE ACCESS            |VIEW2(TEMP1)|34      |1           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
  1 - output(nil), filter(nil), rowset=16
  2 - output([t5.c2], [t2.c1], [t1.c1], [t2.c2], [t5.c1], [t6.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1], [t2.c2 = t3.c1]), other_conds(nil)
  3 - output([t5.c2], [t1.c1], [t5.c1], [t6.c2], [t3.c1]), filter(nil), rowset=16
      equal_conds([t3.c2 = t4.c1]), other_conds(nil)
  4 - output([t5.c2], [t5.c1], [t6.c2], [t4.c1]), filter(nil), rowset=16
      equal_conds([t5.c2 = t6.c1]), other_conds(nil)
  5 - output([t6.c1], [t6.c2]), filter(nil), rowset=16
      access([t6.c1], [t6.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t5.c2], [t5.c1], [t4.c1]), filter(nil), rowset=16
      equal_conds([t4.c2 = t5.c1]), other_conds(nil)
  7 - output([t5.c1], [t5.c2]), filter([t5.c2 != 44 OR t5.c2 != 55]), rowset=16
      access([t5.c1], [t5.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t4.c1], [t4.c2]), filter(nil), rowset=16
      access([t4.c1], [t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t1.c1], [t3.c1], [t3.c2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
 10 - output([t3.c1], [t3.c2]), filter(nil), rowset=16
      access([t3.c1], [t3.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t1.c1]), filter(nil), rowset=16
 12 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 14 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=16
 15 - output([cast(T_FUN_COUNT(*), DECIMAL(20, 0))], [T_FUN_SUM(VIEW1.t2.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(VIEW1.t2.c1)])
 16 - output([VIEW1.t2.c1]), filter([VIEW1.t5.c2 != 44]), rowset=16
      access([VIEW1.t5.c2], [VIEW1.t2.c1])
 17 - output([T_FUN_SUM(VIEW2.t1.c1)], [cast(T_FUN_MAX(VIEW2.t2.c2), DECIMAL(11, 0)) + T_FUN_SUM(VIEW2.t5.c1 - VIEW2.t6.c2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_SUM(VIEW2.t1.c1)], [T_FUN_MAX(VIEW2.t2.c2)], [T_FUN_SUM(VIEW2.t5.c1 - VIEW2.t6.c2)])
 18 - output([VIEW2.t1.c1], [VIEW2.t2.c2], [VIEW2.t5.c1], [VIEW2.t6.c2]), filter([VIEW2.t5.c2 != 55]), rowset=16
      access([VIEW2.t5.c2], [VIEW2.t1.c1], [VIEW2.t2.c2], [VIEW2.t5.c1], [VIEW2.t6.c2])
select /*+ leading(t6, (t5, t4), (t3, t1), (t2)) */ count(*), sum(t2.c1) from nn1 t1, nn1 t2 , nn1 t3, nn1 t4, nn1 t5,  nn1 t6
where t1.c1 = t2.c1 and t2.c2 = t3.c1 and t3.c2 = t4.c1 and t4.c2 = t5.c1 and t5.c2 = t6.c1 and t5.c2 <> 44
union ALL
select /* leading(t2, t1, (t4, t3, (t6, t5))) */ sum(t1.c1), max(t2.c2)+sum(t5.c1-t6.c2) from nn1 t1, nn1 t2 , nn1 t3, nn1 t4, nn1 t5,  nn1 t6
where t1.c1 = t2.c1 and t2.c2 = t3.c1 and t3.c2 = t4.c1 and t4.c2 = t5.c1 and t5.c2 = t6.c1 and t5.c2 <> 55;
+----------+------------+
| count(*) | sum(t2.c1) |
+----------+------------+
|      114 |        158 |
|      158 |        -77 |
+----------+------------+

EXPLAIN select /*+ leading(t9, (t8, t7, (t6, t5), t4), (t3, t1), t2)*/ count(*),sum(t9.c1-t5.c1+t4.d2-t1.c1) from 
nn1 t1, nn2 t2, nn1 t3, nn2 t4, nn1 t5, nn2 t6, nn1 t7, nn2 t8, nn1 t9
where mod(t1.c1, 3) = mod(t2.d2,2) and mod(t1.c1,5) = mod(t3.c1,4) and mod(t1.c2, 7) = mod(t4.d1, 3) AND 
    mod(t1.c2, 5) = mod(t5.c1, 6) and mod(t1.c1, 3) = mod(t6.d2, 2) and mod(t1.c1, 4) = mod(t7.c1,3) AND
    mod(t1.c1, 7) = mod(t8.d1, 3) and mod(t1.c2, 5) = mod(t9.c1, 4) AND
      mod(t2.d1,5) = mod(t3.c1,4) and mod(t2.d2, 7) = mod(t4.d1, 3) AND 
    mod(t2.d2, 5) = mod(t5.c1, 6) and mod(t2.d1, 3) = mod(t6.d2, 2) and mod(t2.d1, 4) = mod(t7.c1,3) AND
    mod(t2.d1, 7) = mod(t8.d1, 3) and mod(t2.d2, 5) = mod(t9.c1, 4) AND
     mod(t3.c2, 7) = mod(t4.d1, 3) AND 
    mod(t3.c2, 5) = mod(t5.c1, 6) and mod(t3.c1, 3) = mod(t6.d2, 2) and mod(t3.c1, 4) = mod(t7.c1,3) AND
    mod(t3.c1, 7) = mod(t8.d1, 3) and mod(t3.c2, 5) = mod(t9.c1, 4) AND
mod(t4.d2, 5) = mod(t5.c1, 6) and mod(t4.d1, 3) = mod(t6.d2, 2) and mod(t4.d1, 4) = mod(t7.c1,3) AND
    mod(t4.d1, 7) = mod(t8.d1, 3) and mod(t4.d2, 5) = mod(t9.c1, 4) and 
     mod(t5.c1, 2) = mod(t6.d2, 5) and mod(t5.c1, 4) = mod(t7.c1,1) AND
    mod(t5.c1, 7) = mod(t8.d1, 6) and mod(t5.c2, 5) = mod(t9.c1, 4) AND
     mod(t6.d1, 4) = mod(t7.c1,3) AND
    mod(t6.d1, 7) = mod(t8.d1, 3) and mod(t6.d2, 5) = mod(t9.c1, 4) AND
    mod(t7.c1, 7) = mod(t8.d1, 3) and mod(t7.c2, 5) = mod(t9.c1, 4) AND
    mod(t8.d2, 5) = mod(t9.c1, 14)    ;
Query Plan
=============================================================
|ID|OPERATOR                     |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |SCALAR GROUP BY              |    |1       |71          |
|1 |└─HASH JOIN                  |    |3       |71          |
|2 |  ├─HASH JOIN                |    |4       |64          |
|3 |  │ ├─HASH JOIN              |    |11      |49          |
|4 |  │ │ ├─TABLE FULL SCAN      |t9  |11      |5           |
|5 |  │ │ └─HASH JOIN            |    |11      |41          |
|6 |  │ │   ├─HASH JOIN          |    |11      |31          |
|7 |  │ │   │ ├─HASH JOIN        |    |18      |13          |
|8 |  │ │   │ │ ├─TABLE FULL SCAN|t8  |11      |5           |
|9 |  │ │   │ │ └─TABLE FULL SCAN|t7  |11      |5           |
|10|  │ │   │ └─HASH JOIN        |    |11      |12          |
|11|  │ │   │   ├─TABLE FULL SCAN|t6  |11      |5           |
|12|  │ │   │   └─TABLE FULL SCAN|t5  |3       |5           |
|13|  │ │   └─TABLE FULL SCAN    |t4  |11      |5           |
|14|  │ └─HASH JOIN              |    |4       |11          |
|15|  │   ├─TABLE FULL SCAN      |t3  |4       |5           |
|16|  │   └─TABLE FULL SCAN      |t1  |3       |5           |
|17|  └─TABLE FULL SCAN          |t2  |3       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t9.c1 - t5.c1 + t4.d2 - t1.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t9.c1 - t5.c1 + t4.d2 - t1.c1)])
  1 - output([t1.c1], [t5.c1], [t4.d2], [t9.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 % 3 = t2.d2 % 2], [t2.d1 % 5 = t3.c1 % 4], [t2.d2 % 5 = t5.c1 % 6], [t2.d1 % 7 = t8.d1 % 3]), other_conds(nil)
  2 - output([t1.c1], [t5.c1], [t5.c1 % 6], [t8.d1 % 3], [t4.d2], [t9.c1], [t3.c1 % 4], [t1.c1 % 3]), filter(nil), rowset=16
      equal_conds([t1.c2 % 7 = t4.d1 % 3], [t1.c2 % 5 = t5.c1 % 6], [t1.c1 % 4 = t7.c1 % 3], [t1.c1 % 7 = t8.d1 % 3], [t3.c2 % 7 = t4.d1 % 3], [t3.c2 % 
      5 = t5.c1 % 6], [t3.c1 % 7 = t8.d1 % 3]), other_conds(nil)
  3 - output([t5.c1], [t5.c1 % 6], [t8.d1 % 3], [t4.d1 % 3], [t4.d2], [t9.c1], [t7.c1 % 3]), filter(nil), rowset=16
      equal_conds([t4.d2 % 5 = t9.c1 % 4], [t7.c2 % 5 = t9.c1 % 4], [t8.d2 % 5 = t9.c1 % 14]), other_conds(nil)
  4 - output([t9.c1]), filter(nil), rowset=16
      access([t9.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t9.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t5.c1], [t5.c1 % 6], [t8.d1 % 3], [t4.d1 % 3], [t4.d2], [t4.d2 % 5], [t7.c1 % 3], [t8.d2], [t7.c2]), filter(nil), rowset=16
      equal_conds([t4.d2 % 5 = t5.c1 % 6], [t4.d1 % 3 = t6.d2 % 2], [t4.d1 % 4 = t7.c1 % 3], [t4.d1 % 7 = t8.d1 % 3]), other_conds(nil)
  6 - output([t5.c1], [t5.c1 % 6], [t8.d1 % 3], [t7.c1 % 3], [t8.d2], [t7.c2], [t6.d2]), filter(nil), rowset=16
      equal_conds([t5.c1 % 4 = t7.c1 % 1], [t5.c1 % 7 = t8.d1 % 6], [t6.d1 % 4 = t7.c1 % 3], [t6.d1 % 7 = t8.d1 % 3]), other_conds(nil)
  7 - output([t8.d1 % 3], [t7.c1], [t8.d1], [t8.d2], [t7.c2]), filter(nil), rowset=16
      equal_conds([t7.c1 % 7 = t8.d1 % 3]), other_conds(nil)
  8 - output([t8.d1], [t8.d2]), filter(nil), rowset=16
      access([t8.d1], [t8.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t7.c1], [t7.c2]), filter(nil), rowset=16
      access([t7.c1], [t7.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t5.c1], [t5.c1 % 6], [t6.d1], [t6.d2]), filter(nil), rowset=16
      equal_conds([t5.c1 % 2 = t6.d2 % 5]), other_conds(nil)
 11 - output([t6.d2], [t6.d1]), filter(nil), rowset=16
      access([t6.d2], [t6.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t5.c1], [t5.c1 % 6], [t5.c1 % 2]), filter([t5.c1 % 6 = t5.c1 % 2], [t5.c1 % 6 = t5.c2 % 5]), rowset=16
      access([t5.c1], [t5.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t4.d1], [t4.d2]), filter(nil), rowset=16
      access([t4.d1], [t4.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 14 - output([t1.c1], [t1.c2], [t3.c2], [t3.c1], [t3.c1 % 4], [t3.c2 % 7], [t1.c1 % 3], [t1.c2 % 7], [t1.c1 % 4]), filter(nil), rowset=16
      equal_conds([t1.c1 % 5 = t3.c1 % 4]), other_conds(nil)
 15 - output([t3.c1], [t3.c2], [t3.c2 % 7]), filter([t3.c2 % 7 = t3.c1 % 3]), rowset=16
      access([t3.c1], [t3.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 16 - output([t1.c1], [t1.c2], [t1.c1 % 3], [t1.c2 % 7], [t1.c1 % 5], [t1.c1 % 4]), filter([t1.c1 % 3 = t1.c2 % 7], [t1.c1 % 5 = t1.c1 % 4]), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t2.d2], [t2.d1], [t2.d1 % 5], [t2.d2 % 2]), filter([t2.d1 % 5 = t2.d1 % 4], [t2.d2 % 2 = t2.d2 % 7], [t2.d2 % 2 = t2.d1 % 3]), rowset=16
      access([t2.d2], [t2.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false,false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  Equal Parameter Constraints:
      :0 = :8
      :6 = :14
      :3 = :17
      :5 = :19
      :7 = :21
      :9 = :23
      :11 = :25
      :13 = :27
      :20 = :28
      :15 = :29
      :5 = :31
      :7 = :33
      :9 = :35
      :3 = :36
      :11 = :37
      :13 = :39
      :32 = :40
      :15 = :41
      :7 = :43
      :5 = :44
      :9 = :45
      :11 = :47
      :13 = :49
      :42 = :50
      :15 = :51
      :15 = :59
      :11 = :61
      :13 = :63
      :53 = :64
      :15 = :65
      :13 = :67
      :15 = :69
select /*+ leading(t9, (t8, t7, (t6, t5), t4), (t3, t1), t2)*/ count(*),sum(t9.c1-t5.c1+t4.d2-t1.c1) from 
nn1 t1, nn2 t2, nn1 t3, nn2 t4, nn1 t5, nn2 t6, nn1 t7, nn2 t8, nn1 t9
where mod(t1.c1, 3) = mod(t2.d2,2) and mod(t1.c1,5) = mod(t3.c1,4) and mod(t1.c2, 7) = mod(t4.d1, 3) AND 
    mod(t1.c2, 5) = mod(t5.c1, 6) and mod(t1.c1, 3) = mod(t6.d2, 2) and mod(t1.c1, 4) = mod(t7.c1,3) AND
    mod(t1.c1, 7) = mod(t8.d1, 3) and mod(t1.c2, 5) = mod(t9.c1, 4) AND
      mod(t2.d1,5) = mod(t3.c1,4) and mod(t2.d2, 7) = mod(t4.d1, 3) AND 
    mod(t2.d2, 5) = mod(t5.c1, 6) and mod(t2.d1, 3) = mod(t6.d2, 2) and mod(t2.d1, 4) = mod(t7.c1,3) AND
    mod(t2.d1, 7) = mod(t8.d1, 3) and mod(t2.d2, 5) = mod(t9.c1, 4) AND
     mod(t3.c2, 7) = mod(t4.d1, 3) AND 
    mod(t3.c2, 5) = mod(t5.c1, 6) and mod(t3.c1, 3) = mod(t6.d2, 2) and mod(t3.c1, 4) = mod(t7.c1,3) AND
    mod(t3.c1, 7) = mod(t8.d1, 3) and mod(t3.c2, 5) = mod(t9.c1, 4) AND
mod(t4.d2, 5) = mod(t5.c1, 6) and mod(t4.d1, 3) = mod(t6.d2, 2) and mod(t4.d1, 4) = mod(t7.c1,3) AND
    mod(t4.d1, 7) = mod(t8.d1, 3) and mod(t4.d2, 5) = mod(t9.c1, 4) and 
     mod(t5.c1, 2) = mod(t6.d2, 5) and mod(t5.c1, 4) = mod(t7.c1,1) AND
    mod(t5.c1, 7) = mod(t8.d1, 6) and mod(t5.c2, 5) = mod(t9.c1, 4) AND
     mod(t6.d1, 4) = mod(t7.c1,3) AND
    mod(t6.d1, 7) = mod(t8.d1, 3) and mod(t6.d2, 5) = mod(t9.c1, 4) AND
    mod(t7.c1, 7) = mod(t8.d1, 3) and mod(t7.c2, 5) = mod(t9.c1, 4) AND
    mod(t8.d2, 5) = mod(t9.c1, 14)    ;
+----------+------------------------------+
| count(*) | sum(t9.c1-t5.c1+t4.d2-t1.c1) |
+----------+------------------------------+
|        2 |                            0 |
+----------+------------------------------+

EXPLAIN select /*+ leading(a (c ,(b, d))) */ count(*),sum(a.c1) from nn1 a, (select * from nn2) b, 
(select * from nn1 cc group by c1,c2) c, nn2 d 
where a.c1 = c.c1 and b.d2 = d.d1 and c.c2 = d.d2;
Query Plan
=========================================================
|ID|OPERATOR                 |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |SCALAR GROUP BY          |    |1       |33          |
|1 |└─HASH JOIN              |    |17      |32          |
|2 |  ├─TABLE FULL SCAN      |a   |11      |5           |
|3 |  └─HASH JOIN            |    |19      |24          |
|4 |    ├─SUBPLAN SCAN       |c   |11      |8           |
|5 |    │ └─HASH DISTINCT    |    |11      |8           |
|6 |    │   └─TABLE FULL SCAN|cc  |11      |5           |
|7 |    └─HASH JOIN          |    |20      |12          |
|8 |      ├─TABLE FULL SCAN  |nn2 |11      |5           |
|9 |      └─TABLE FULL SCAN  |d   |11      |5           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1)])
  1 - output([a.c1]), filter(nil), rowset=16
      equal_conds([a.c1 = c.c1]), other_conds(nil)
  2 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  3 - output([c.c1]), filter(nil), rowset=16
      equal_conds([c.c2 = d.d2]), other_conds(nil)
  4 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2])
  5 - output([cc.c1], [cc.c2]), filter(nil), rowset=16
      distinct([cc.c1], [cc.c2])
  6 - output([cc.c1], [cc.c2]), filter(nil), rowset=16
      access([cc.c1], [cc.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([cc.__pk_increment]), range(MIN ; MAX)always true
  7 - output([d.d2]), filter(nil), rowset=16
      equal_conds([nn2.d2 = d.d1]), other_conds(nil)
  8 - output([nn2.d2]), filter(nil), rowset=16
      access([nn2.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([nn2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([d.d1], [d.d2]), filter(nil), rowset=16
      access([d.d1], [d.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(a (c ,(b, d))) */ count(*),sum(a.c1) from nn1 a, (select * from nn2) b, 
(select * from nn1 cc group by c1,c2) c, nn2 d 
where a.c1 = c.c1 and b.d2 = d.d1 and c.c2 = d.d2;
+----------+-----------+
| count(*) | sum(a.c1) |
+----------+-----------+
|       73 |        96 |
+----------+-----------+

EXPLAIN select /*+ leading(a (c ,(b, d))) */count(*), sum(b.d2) from nn1 a left join nn2  b
on a.c1 = b.d1 left join  nn1 c on b.d2 = c.c1 left join nn2 d on c.c2 = d.d2 
where a.c1 = b.d1 and b.d2 = c.c1 and c.c2 = d.d2;
Query Plan
=================================================================
|ID|OPERATOR                         |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |SCALAR GROUP BY                  |    |1       |40          |
|1 |└─HASH JOIN                      |    |29      |40          |
|2 |  ├─TABLE FULL SCAN              |a   |11      |5           |
|3 |  └─HASH JOIN                    |    |22      |31          |
|4 |    ├─TABLE FULL SCAN            |c   |11      |5           |
|5 |    └─NESTED-LOOP JOIN CARTESIAN |    |121     |12          |
|6 |      ├─TABLE FULL SCAN          |b   |11      |5           |
|7 |      └─MATERIAL                 |    |11      |5           |
|8 |        └─TABLE FULL SCAN        |d   |11      |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(b.d2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(b.d2)])
  1 - output([b.d2]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d1]), other_conds(nil)
  2 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  3 - output([b.d2], [b.d1]), filter(nil), rowset=16
      equal_conds([b.d2 = c.c1], [c.c2 = d.d2]), other_conds(nil)
  4 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  5 - output([b.d2], [b.d1], [d.d2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  6 - output([b.d1], [b.d2]), filter(nil), rowset=16
      access([b.d1], [b.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
  7 - output([d.d2]), filter(nil), rowset=16
  8 - output([d.d2]), filter(nil), rowset=16
      access([d.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(a (c ,(b, d))) */count(*), sum(b.d2) from nn1 a left join nn2  b
on a.c1 = b.d1 left join  nn1 c on b.d2 = c.c1 left join nn2 d on c.c2 = d.d2 
where a.c1 = b.d1 and b.d2 = c.c1 and c.c2 = d.d2;
+----------+-----------+
| count(*) | sum(b.d2) |
+----------+-----------+
|       87 |        60 |
+----------+-----------+

EXPLAIN select (select /*+ leading(a (c ,(b, d))) */ count(x.c2) from nn1 a left join nn2  b
on a.c1 = b.d1 left join  nn1 c on b.d2 = c.c1 left join nn2 d on c.c2 = d.d2 
where a.c1 = b.d1 and b.d2 = c.c1 and c.c2 = d.d2 and x.c1 = a.c1 + b.d1 + c.c2 - d.d2 * 5) as x
from nn1 x;
Query Plan
=================================================================
|ID|OPERATOR                         |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |SUBPLAN FILTER                   |    |1       |109         |
|1 |├─SCALAR GROUP BY                |    |1       |5           |
|2 |│ └─TABLE FULL SCAN              |x   |11      |5           |
|3 |└─HASH JOIN                      |    |11      |104         |
|4 |  ├─TABLE FULL SCAN              |a   |11      |21          |
|5 |  └─HASH JOIN                    |    |22      |80          |
|6 |    ├─TABLE FULL SCAN            |c   |11      |21          |
|7 |    └─NESTED-LOOP JOIN CARTESIAN |    |121     |45          |
|8 |      ├─TABLE FULL SCAN          |b   |11      |21          |
|9 |      └─MATERIAL                 |    |11      |21          |
|10|        └─TABLE FULL SCAN        |d   |11      |21          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([subquery(1)]), filter(nil), rowset=16
      exec_params_([x.c1(:0)], [T_FUN_COUNT_SUM(T_FUN_COUNT(x.c2))(:1)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  1 - output([x.c1], [T_FUN_COUNT_SUM(T_FUN_COUNT(x.c2))]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(x.c2))])
  2 - output([x.c1], [T_FUN_COUNT(x.c2)]), filter(nil), rowset=16
      access([x.c1], [x.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([x.__pk_increment]), range(MIN ; MAX)always true
  3 - output([:1]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d1]), other_conds([:0 = a.c1 + b.d1 + c.c2 - d.d2 * 5])
  4 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  5 - output([b.d1], [c.c2], [d.d2]), filter(nil), rowset=16
      equal_conds([b.d2 = c.c1], [c.c2 = d.d2]), other_conds(nil)
  6 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  7 - output([b.d1], [d.d2], [b.d2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  8 - output([b.d1], [b.d2]), filter(nil), rowset=16
      access([b.d1], [b.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
  9 - output([d.d2]), filter(nil), rowset=16
 10 - output([d.d2]), filter(nil), rowset=16
      access([d.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
select (select /*+ leading(a (c ,(b, d))) */ count(x.c2) from nn1 a left join nn2  b
on a.c1 = b.d1 left join  nn1 c on b.d2 = c.c1 left join nn2 d on c.c2 = d.d2 
where a.c1 = b.d1 and b.d2 = c.c1 and c.c2 = d.d2 and x.c1 = a.c1 + b.d1 + c.c2 - d.d2 * 5) as x
from nn1 x;
+------+
| x    |
+------+
| NULL |
+------+

EXPLAIN select /* leading(t3 (t2 t1)) */ sum(t1.c1) from nn1 t1 , nn1 t2 , nn1 t3  where t2.c2=t1.c2 and t1.c1 = 
 (select /*+ leading(x,(y z)) */ count(*) from nn1 x, nn2 y, nn1 z where x.c1 = y.d1 and y.d2 = z.c1)
 and t3.c1 in (1,2);
Query Plan
================================================================
|ID|OPERATOR                       |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |SCALAR GROUP BY                |     |1       |36          |
|1 |└─NESTED-LOOP JOIN CARTESIAN   |     |5       |36          |
|2 |  ├─HASH JOIN                  |     |3       |31          |
|3 |  │ ├─NESTED-LOOP JOIN         |     |2       |26          |
|4 |  │ │ ├─SUBPLAN SCAN           |VIEW1|1       |21          |
|5 |  │ │ │ └─SCALAR GROUP BY      |     |1       |21          |
|6 |  │ │ │   └─HASH JOIN          |     |19      |20          |
|7 |  │ │ │     ├─TABLE FULL SCAN  |x    |11      |5           |
|8 |  │ │ │     └─HASH JOIN        |     |15      |13          |
|9 |  │ │ │       ├─TABLE FULL SCAN|y    |11      |5           |
|10|  │ │ │       └─TABLE FULL SCAN|z    |11      |5           |
|11|  │ │ └─TABLE FULL SCAN        |t1   |11      |5           |
|12|  │ └─TABLE FULL SCAN          |t2   |11      |5           |
|13|  └─MATERIAL                   |     |2       |5           |
|14|    └─TABLE FULL SCAN          |t3   |2       |5           |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  1 - output([t1.c1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  2 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t2.c2 = t1.c2]), other_conds(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      conds([t1.c1 = VIEW1.count(*)]), nl_params_(nil), use_batch=false
  4 - output([VIEW1.count(*)]), filter(nil), rowset=16
      access([VIEW1.count(*)])
  5 - output([T_FUN_COUNT(*)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)])
  6 - output(nil), filter(nil), rowset=16
      equal_conds([x.c1 = y.d1]), other_conds(nil)
  7 - output([x.c1]), filter(nil), rowset=16
      access([x.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([x.__pk_increment]), range(MIN ; MAX)always true
  8 - output([y.d1]), filter(nil), rowset=16
      equal_conds([y.d2 = z.c1]), other_conds(nil)
  9 - output([y.d1], [y.d2]), filter(nil), rowset=16
      access([y.d1], [y.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([y.__pk_increment]), range(MIN ; MAX)always true
 10 - output([z.c1]), filter(nil), rowset=16
      access([z.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([z.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t1.c2], [t1.c1]), filter(nil), rowset=16
      access([t1.c2], [t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t2.c2]), filter(nil), rowset=16
      access([t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 13 - output(nil), filter(nil), rowset=16
 14 - output(nil), filter([t3.c1 IN (1, 2)]), rowset=16
      access([t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
select /* leading(t3 (t2 t1)) */ sum(t1.c1) from nn1 t1 , nn1 t2 , nn1 t3  where t2.c2=t1.c2 and t1.c1 = 
 (select /*+ leading(x,(y z)) */ count(*) from nn1 x, nn2 y, nn1 z where x.c1 = y.d1 and y.d2 = z.c1)
 and t3.c1 in (1,2);
+------------+
| sum(t1.c1) |
+------------+
|       NULL |
+------------+

### 4, 错误、无效或冗余的指定测试  ###
EXPLAIN select /*+ leading((d, c), b , a) */ count(*), sum(b.d1+d.d2) from nn1 a, nn2 b, nn1 c, nn2 d  
where a.c1 = b.d1 and c.c2 = d.d1;
Query Plan
===============================================================
|ID|OPERATOR                       |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1       |79          |
|1 |└─HASH JOIN                    |    |239     |71          |
|2 |  ├─NESTED-LOOP JOIN CARTESIAN |    |184     |22          |
|3 |  │ ├─HASH JOIN                |    |17      |13          |
|4 |  │ │ ├─TABLE FULL SCAN        |d   |11      |5           |
|5 |  │ │ └─TABLE FULL SCAN        |c   |11      |5           |
|6 |  │ └─MATERIAL                 |    |11      |5           |
|7 |  │   └─TABLE FULL SCAN        |b   |11      |5           |
|8 |  └─TABLE FULL SCAN            |a   |11      |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(b.d1 + d.d2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(b.d1 + d.d2)])
  1 - output([b.d1], [d.d2]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d1]), other_conds(nil)
  2 - output([b.d1], [d.d2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  3 - output([d.d2]), filter(nil), rowset=16
      equal_conds([c.c2 = d.d1]), other_conds(nil)
  4 - output([d.d1], [d.d2]), filter(nil), rowset=16
      access([d.d1], [d.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  5 - output([c.c2]), filter(nil), rowset=16
      access([c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  6 - output([b.d1]), filter(nil), rowset=16
  7 - output([b.d1]), filter(nil), rowset=16
      access([b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
  8 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading((d, c), b , a) */ count(*), sum(b.d1+d.d2) from nn1 a, nn2 b, nn1 c, nn2 d  
where a.c1 = b.d1 and c.c2 = d.d1;
+----------+----------------+
| count(*) | sum(b.d1+d.d2) |
+----------+----------------+
|      288 |            740 |
+----------+----------------+

EXPLAIN select /*+ leading((d, (c), (b)) , (a)) */  count(*),sum(a.c1+b.d2+c.c1+d.d2) from nn1 a, nn2 b, nn1 c, nn2 d  
where a.c1 = b.d2  and c.c2 = d.d2;
Query Plan
===============================================================
|ID|OPERATOR                       |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1       |84          |
|1 |└─HASH JOIN                    |    |239     |76          |
|2 |  ├─NESTED-LOOP JOIN CARTESIAN |    |184     |21          |
|3 |  │ ├─HASH JOIN                |    |17      |12          |
|4 |  │ │ ├─TABLE FULL SCAN        |d   |11      |5           |
|5 |  │ │ └─TABLE FULL SCAN        |c   |11      |5           |
|6 |  │ └─MATERIAL                 |    |11      |5           |
|7 |  │   └─TABLE FULL SCAN        |b   |11      |5           |
|8 |  └─TABLE FULL SCAN            |a   |11      |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1 + b.d2 + c.c1 + d.d2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(a.c1 + b.d2 + c.c1 + d.d2)])
  1 - output([a.c1], [b.d2], [d.d2], [c.c1]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d2]), other_conds(nil)
  2 - output([b.d2], [d.d2], [c.c1]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  3 - output([d.d2], [c.c1]), filter(nil), rowset=16
      equal_conds([c.c2 = d.d2]), other_conds(nil)
  4 - output([d.d2]), filter(nil), rowset=16
      access([d.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  5 - output([c.c2], [c.c1]), filter(nil), rowset=16
      access([c.c2], [c.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  6 - output([b.d2]), filter(nil), rowset=16
  7 - output([b.d2]), filter(nil), rowset=16
      access([b.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
  8 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading((d, (c), (b)) , (a)) */  count(*),sum(a.c1+b.d2+c.c1+d.d2) from nn1 a, nn2 b, nn1 c, nn2 d  
where a.c1 = b.d2  and c.c2 = d.d2;
+----------+--------------------------+
| count(*) | sum(a.c1+b.d2+c.c1+d.d2) |
+----------+--------------------------+
|      400 |                     1800 |
+----------+--------------------------+

EXPLAIN select /*+ leading(b, (c d)) a) */ count(*), sum(b.d1+d.d2) from nn1 a, nn2 b, nn1 c, nn2 d  
where a.c1 = b.d1 and c.c2 = d.d1;
Query Plan
===============================================================
|ID|OPERATOR                       |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1       |78          |
|1 |└─HASH JOIN                    |    |239     |70          |
|2 |  ├─NESTED-LOOP JOIN CARTESIAN |    |184     |22          |
|3 |  │ ├─TABLE FULL SCAN          |b   |11      |5           |
|4 |  │ └─MATERIAL                 |    |17      |13          |
|5 |  │   └─HASH JOIN              |    |17      |12          |
|6 |  │     ├─TABLE FULL SCAN      |c   |11      |5           |
|7 |  │     └─TABLE FULL SCAN      |d   |11      |5           |
|8 |  └─TABLE FULL SCAN            |a   |11      |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(b.d1 + d.d2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(b.d1 + d.d2)])
  1 - output([b.d1], [d.d2]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d1]), other_conds(nil)
  2 - output([b.d1], [d.d2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  3 - output([b.d1]), filter(nil), rowset=16
      access([b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
  4 - output([d.d2]), filter(nil), rowset=16
  5 - output([d.d2]), filter(nil), rowset=16
      equal_conds([c.c2 = d.d1]), other_conds(nil)
  6 - output([c.c2]), filter(nil), rowset=16
      access([c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  7 - output([d.d1], [d.d2]), filter(nil), rowset=16
      access([d.d1], [d.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  8 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(b, (c d)) a) */ count(*), sum(b.d1+d.d2) from nn1 a, nn2 b, nn1 c, nn2 d  
where a.c1 = b.d1 and c.c2 = d.d1;
+----------+----------------+
| count(*) | sum(b.d1+d.d2) |
+----------+----------------+
|      288 |            740 |
+----------+----------------+

EXPLAIN select /*+ leading(b1, (c1 d1 ) a1) */  count(*), sum(b.d2+d.d1*c.c1-a.c1) from nn1 a, nn2 b, nn1 c, nn2 d  
where a.c1 = b.d1 and c.c2 = d.d1;
Query Plan
=============================================================
|ID|OPERATOR                     |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |SCALAR GROUP BY              |    |1       |39          |
|1 |└─NESTED-LOOP JOIN CARTESIAN |    |239     |31          |
|2 |  ├─HASH JOIN                |    |17      |12          |
|3 |  │ ├─TABLE FULL SCAN        |d   |11      |5           |
|4 |  │ └─TABLE FULL SCAN        |c   |11      |5           |
|5 |  └─MATERIAL                 |    |15      |13          |
|6 |    └─HASH JOIN              |    |15      |12          |
|7 |      ├─TABLE FULL SCAN      |a   |11      |5           |
|8 |      └─TABLE FULL SCAN      |b   |11      |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(b.d2 + d.d1 * c.c1 - a.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(b.d2 + d.d1 * c.c1 - a.c1)])
  1 - output([d.d1], [c.c1], [a.c1], [b.d2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  2 - output([d.d1], [c.c1]), filter(nil), rowset=16
      equal_conds([c.c2 = d.d1]), other_conds(nil)
  3 - output([d.d1]), filter(nil), rowset=16
      access([d.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  4 - output([c.c2], [c.c1]), filter(nil), rowset=16
      access([c.c2], [c.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  5 - output([a.c1], [b.d2]), filter(nil), rowset=16
  6 - output([a.c1], [b.d2]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d1]), other_conds(nil)
  7 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  8 - output([b.d1], [b.d2]), filter(nil), rowset=16
      access([b.d1], [b.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(b1, (c1 d1 ) a1) */  count(*), sum(b.d2+d.d1*c.c1-a.c1) from nn1 a, nn2 b, nn1 c, nn2 d  
where a.c1 = b.d1 and c.c2 = d.d1;
+----------+--------------------------+
| count(*) | sum(b.d2+d.d1*c.c1-a.c1) |
+----------+--------------------------+
|      288 |                     1018 |
+----------+--------------------------+

EXPLAIN select /*+ leading((((t2,t1,t4),t3),t5), (t6),(t7))*/ count(*), sum(t6.c1+t7.c1+t4.c2) from 
nn1 t1, nn1 t2, nn1 t3, nn1  t4, nn1 t5, nn1 t6, nn1 t7
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1;
Query Plan
=============================================================
|ID|OPERATOR                     |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |SCALAR GROUP BY              |    |1       |67          |
|1 |└─HASH JOIN                  |    |51      |66          |
|2 |  ├─HASH JOIN                |    |36      |52          |
|3 |  │ ├─HASH JOIN              |    |25      |41          |
|4 |  │ │ ├─HASH JOIN            |    |18      |32          |
|5 |  │ │ │ ├─HASH JOIN          |    |21      |21          |
|6 |  │ │ │ │ ├─HASH JOIN        |    |15      |12          |
|7 |  │ │ │ │ │ ├─TABLE FULL SCAN|t2  |11      |5           |
|8 |  │ │ │ │ │ └─TABLE FULL SCAN|t1  |11      |5           |
|9 |  │ │ │ │ └─TABLE FULL SCAN  |t4  |11      |5           |
|10|  │ │ │ └─TABLE FULL SCAN    |t3  |6       |5           |
|11|  │ │ └─TABLE FULL SCAN      |t5  |11      |5           |
|12|  │ └─TABLE FULL SCAN        |t6  |11      |5           |
|13|  └─TABLE FULL SCAN          |t7  |11      |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t6.c1 + t7.c1 + t4.c2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t6.c1 + t7.c1 + t4.c2)])
  1 - output([t7.c1], [t6.c1], [t4.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t7.c1]), other_conds(nil)
  2 - output([t1.c1], [t6.c1], [t4.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t6.c1]), other_conds(nil)
  3 - output([t1.c1], [t4.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t5.c1]), other_conds(nil)
  4 - output([t1.c1], [t4.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t3.c2]), other_conds(nil)
  5 - output([t1.c1], [t4.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t4.c1]), other_conds(nil)
  6 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  7 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t4.c1], [t4.c2]), filter(nil), rowset=16
      access([t4.c1], [t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t3.c2]), filter([t3.c2 = t3.c1]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t5.c1]), filter(nil), rowset=16
      access([t5.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t6.c1]), filter(nil), rowset=16
      access([t6.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t7.c1]), filter(nil), rowset=16
      access([t7.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading((((t2,t1,t4),t3),t5), (t6),(t7))*/ count(*), sum(t6.c1+t7.c1+t4.c2) from 
nn1 t1, nn1 t2, nn1 t3, nn1  t4, nn1 t5, nn1 t6, nn1 t7
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1;
+----------+------------------------+
| count(*) | sum(t6.c1+t7.c1+t4.c2) |
+----------+------------------------+
|      195 |                    708 |
+----------+------------------------+

EXPLAIN select /*+ leading(t4,t6,t5) */ count(*), sum(t2.c2+t3.c1)
from nn1 t1 left join nn1 t2 on t1.c1 = t2.c1 left JOIN
nn1 t3 on t3.c2 IN(1,23,4,2,5,6) join nn1 t4 on t3.c1=t4.c1 join nn1 t5 on t4.c2=t5.c2 
join nn1 t6 on t5.c1 = t6.c2 left join nn1 t7 on t1.c1=t7.c1;
Query Plan
=====================================================================
|ID|OPERATOR                             |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |SCALAR GROUP BY                      |    |1       |225         |
|1 |└─HASH OUTER JOIN                    |    |285     |215         |
|2 |  ├─HASH JOIN                        |    |220     |151         |
|3 |  │ ├─NESTED-LOOP JOIN CARTESIAN     |    |310     |68          |
|4 |  │ │ ├─HASH JOIN                    |    |22      |47          |
|5 |  │ │ │ ├─NESTED-LOOP JOIN CARTESIAN |    |121     |12          |
|6 |  │ │ │ │ ├─TABLE FULL SCAN          |t4  |11      |5           |
|7 |  │ │ │ │ └─MATERIAL                 |    |11      |5           |
|8 |  │ │ │ │   └─TABLE FULL SCAN        |t6  |11      |5           |
|9 |  │ │ │ └─TABLE FULL SCAN            |t5  |11      |5           |
|10|  │ │ └─MATERIAL                     |    |15      |13          |
|11|  │ │   └─HASH OUTER JOIN            |    |15      |12          |
|12|  │ │     ├─TABLE FULL SCAN          |t1  |11      |5           |
|13|  │ │     └─TABLE FULL SCAN          |t2  |11      |5           |
|14|  │ └─TABLE FULL SCAN                |t3  |6       |5           |
|15|  └─TABLE FULL SCAN                  |t7  |11      |5           |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t2.c2 + t3.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t2.c2 + t3.c1)])
  1 - output([t3.c1], [t2.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t7.c1]), other_conds(nil)
  2 - output([t3.c1], [t1.c1], [t2.c2]), filter(nil), rowset=16
      equal_conds([t3.c1 = t4.c1]), other_conds(nil)
  3 - output([t4.c1], [t1.c1], [t2.c2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  4 - output([t4.c1]), filter(nil), rowset=16
      equal_conds([t5.c1 = t6.c2], [t4.c2 = t5.c2]), other_conds(nil)
  5 - output([t4.c1], [t4.c2], [t6.c2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  6 - output([t4.c1], [t4.c2]), filter(nil), rowset=16
      access([t4.c1], [t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t6.c2]), filter(nil), rowset=16
  8 - output([t6.c2]), filter(nil), rowset=16
      access([t6.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t5.c2], [t5.c1]), filter(nil), rowset=16
      access([t5.c2], [t5.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t1.c1], [t2.c2]), filter(nil), rowset=16
 11 - output([t1.c1], [t2.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
 12 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 14 - output([t3.c1]), filter([t3.c2 IN (1, 23, 4, 2, 5, 6)]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t7.c1]), filter(nil), rowset=16
      access([t7.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t4,t6,t5) */ count(*), sum(t2.c2+t3.c1)
from nn1 t1 left join nn1 t2 on t1.c1 = t2.c1 left JOIN
nn1 t3 on t3.c2 IN(1,23,4,2,5,6) join nn1 t4 on t3.c1=t4.c1 join nn1 t5 on t4.c2=t5.c2 
join nn1 t6 on t5.c1 = t6.c2 left join nn1 t7 on t1.c1=t7.c1;
+----------+------------------+
| count(*) | sum(t2.c2+t3.c1) |
+----------+------------------+
|      928 |             2684 |
+----------+------------------+

### 6, 嵌套hint和hint的print测试  ###
EXPLAIN select /*+ leading(c,  (a ,(d, b)) ) */ count(a.c1+b.d2) , sum(b.d2+b.d2*a.c1) from nn1 a  join nn2 b on a.c1 = b.d2  
join nn1 c on b.d1 = c.c1 join nn1 d on d.c2 = c.c2 where a.c2 < 5 and d.c1 = b.d2 
and d.c2 = a.c1  ;
Query Plan
=======================================================
|ID|OPERATOR               |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |SCALAR GROUP BY        |    |1       |29          |
|1 |└─HASH JOIN            |    |11      |29          |
|2 |  ├─TABLE FULL SCAN    |c   |11      |5           |
|3 |  └─HASH JOIN          |    |17      |20          |
|4 |    ├─TABLE FULL SCAN  |a   |9       |5           |
|5 |    └─HASH JOIN        |    |14      |12          |
|6 |      ├─TABLE FULL SCAN|d   |6       |5           |
|7 |      └─TABLE FULL SCAN|b   |11      |5           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(a.c1 + b.d2)], [T_FUN_SUM(b.d2 + b.d2 * a.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(a.c1 + b.d2)], [T_FUN_SUM(b.d2 + b.d2 * a.c1)])
  1 - output([b.d2], [a.c1]), filter(nil), rowset=16
      equal_conds([b.d1 = c.c1], [d.c2 = c.c2]), other_conds(nil)
  2 - output([c.c1], [c.c2]), filter(nil), rowset=16
      access([c.c1], [c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
  3 - output([b.d2], [a.c1], [d.c2], [b.d1]), filter(nil), rowset=16
      equal_conds([a.c1 = b.d2]), other_conds(nil)
  4 - output([a.c1]), filter([a.c2 < 5]), rowset=16
      access([a.c1], [a.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  5 - output([b.d2], [d.c2], [b.d1]), filter(nil), rowset=16
      equal_conds([d.c1 = b.d2]), other_conds(nil)
  6 - output([d.c2], [d.c1]), filter([d.c1 = d.c2]), rowset=16
      access([d.c2], [d.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
  7 - output([b.d2], [b.d1]), filter(nil), rowset=16
      access([b.d2], [b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(c,  (a ,(d, b)) ) */ count(a.c1+b.d2) , sum(b.d2+b.d2*a.c1) from nn1 a  join nn2 b on a.c1 = b.d2  
join nn1 c on b.d1 = c.c1 join nn1 d on d.c2 = c.c2 where a.c2 < 5 and d.c1 = b.d2 
and d.c2 = a.c1  ;
+------------------+---------------------+
| count(a.c1+b.d2) | sum(b.d2+b.d2*a.c1) |
+------------------+---------------------+
|                6 |                  16 |
+------------------+---------------------+

create view v1 as  select /*+ leading(c,  b , a ) use_hash(b a) */ a.c1 as a_c1, a.c2 as a_c2, a.c3 as a_c3, b.d1, b.d2, b.d3, c.c1 as c_c1, c.c2 as c_c2, c.c3 as c_c3 from nn1 a  join nn2 b on a.c1 = b.d2 join nn1 c on b.d1 = c.c1 where a.c2 < 5;
show create view v1;
View	Create View	character_set_client	collation_connection
v1	CREATE VIEW `v1` AS select /*+ LEADING((("c" "b") "a")) USE_HASH("b") USE_HASH("a") */`a`.`c1` AS `a_c1`,`a`.`c2` AS `a_c2`,`a`.`c3` AS `a_c3`,`b`.`d1` AS `d1`,`b`.`d2` AS `d2`,`b`.`d3` AS `d3`,`c`.`c1` AS `c_c1`,`c`.`c2` AS `c_c2`,`c`.`c3` AS `c_c3` from ((`bushy_leading_hint_db`.`nn1` `a` join `bushy_leading_hint_db`.`nn2` `b` on (`a`.`c1` = `b`.`d2`)) join `bushy_leading_hint_db`.`nn1` `c` on (`b`.`d1` = `c`.`c1`)) where (`a`.`c2` < 5)	utf8mb4	utf8mb4_general_ci

create view v2 as  select /*+ leading(c,  (b , a)) */ a.c1 as a_c1, a.c2 as a_c2, a.c3 as a_c3, b.d1, b.d2, b.d3, c.c1 as c_c1, c.c2 as c_c2,     c.c3 as c_c3 from nn1 a  join nn2 b on a.c1 = b.d2 join nn1 c on b.d1 = c.c1 where a.c2 < 5  ;
show create view v2;
View	Create View	character_set_client	collation_connection
v2	CREATE VIEW `v2` AS select /*+ LEADING(("c" ("b" "a"))) */`a`.`c1` AS `a_c1`,`a`.`c2` AS `a_c2`,`a`.`c3` AS `a_c3`,`b`.`d1` AS `d1`,`b`.`d2` AS `d2`,`b`.`d3` AS `d3`,`c`.`c1` AS `c_c1`,`c`.`c2` AS `c_c2`,`c`.`c3` AS `c_c3` from ((`bushy_leading_hint_db`.`nn1` `a` join `bushy_leading_hint_db`.`nn2` `b` on (`a`.`c1` = `b`.`d2`)) join `bushy_leading_hint_db`.`nn1` `c` on (`b`.`d1` = `c`.`c1`)) where (`a`.`c2` < 5)	utf8mb4	utf8mb4_general_ci

create view v3 as select /*+ leading(c, (d, (a,b))) */ a.c1 as a_c1, a.c2 as a_c2, a.c3 as a_c3, b.d1, b.d2, b.d3, c.c1 as c_c1, c.c2 as c_c2,     c.c3 as c_c3 from nn1 a  join nn2 b 
on a.c1 = b.d2  
join nn1 c on b.d1 = c.c1 join nn1 d on d.c2 = c.c2 where a.c2 < 5  ;
show create view v3;
View	Create View	character_set_client	collation_connection
v3	CREATE VIEW `v3` AS select /*+ LEADING(("c" ("d" ("a" "b")))) */`a`.`c1` AS `a_c1`,`a`.`c2` AS `a_c2`,`a`.`c3` AS `a_c3`,`b`.`d1` AS `d1`,`b`.`d2` AS `d2`,`b`.`d3` AS `d3`,`c`.`c1` AS `c_c1`,`c`.`c2` AS `c_c2`,`c`.`c3` AS `c_c3` from (((`bushy_leading_hint_db`.`nn1` `a` join `bushy_leading_hint_db`.`nn2` `b` on (`a`.`c1` = `b`.`d2`)) join `bushy_leading_hint_db`.`nn1` `c` on (`b`.`d1` = `c`.`c1`)) join `bushy_leading_hint_db`.`nn1` `d` on (`d`.`c2` = `c`.`c2`)) where (`a`.`c2` < 5)	utf8mb4	utf8mb4_general_ci

create view v4 as 
select /*+ leading(t2, (t1, t3), (t7, (t8, t9)), (t4, t5, t6)) */
t1.c1 as x, t3.c2 as y, t5.c2 as z from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;

show create view v4;
View	Create View	character_set_client	collation_connection
v4	CREATE VIEW `v4` AS select /*+ LEADING(((("t2" ("t1" "t3")) ("t7" ("t8" "t9"))) (("t4" "t5") "t6"))) */`t1`.`c1` AS `x`,`t3`.`c2` AS `y`,`t5`.`c2` AS `z` from `bushy_leading_hint_db`.`nn1` `t1`,`bushy_leading_hint_db`.`nn1` `t2`,`bushy_leading_hint_db`.`nn1` `t3`,`bushy_leading_hint_db`.`nn1` `t4`,`bushy_leading_hint_db`.`nn1` `t5`,`bushy_leading_hint_db`.`nn1` `t6`,`bushy_leading_hint_db`.`nn1` `t7`,`bushy_leading_hint_db`.`nn1` `t8`,`bushy_leading_hint_db`.`nn1` `t9` where (`t1`.`c1` = `t2`.`c1`) and (`t1`.`c1` = `t3`.`c2`) and (`t2`.`c1` = `t3`.`c1`) and (`t3`.`c1` = `t4`.`c1`) and (`t4`.`c1` = `t5`.`c1`) and (`t5`.`c1` = `t6`.`c1`) and (`t6`.`c1` = `t7`.`c1`) and (`t7`.`c1` = `t8`.`c1`) and (`t8`.`c1` = `t9`.`c1`) and (`t8`.`c1` = `t2`.`c1`) and (`t1`.`c1` = `t9`.`c1`)	utf8mb4	utf8mb4_general_ci
EXPLAIN select count(*), sum(x+y-z*4) from v4;
Query Plan
=========================================================
|ID|OPERATOR                 |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |SCALAR GROUP BY          |    |1       |82          |
|1 |└─HASH JOIN              |    |105     |79          |
|2 |  ├─HASH JOIN            |    |36      |44          |
|3 |  │ ├─HASH JOIN          |    |13      |19          |
|4 |  │ │ ├─TABLE FULL SCAN  |t2  |11      |5           |
|5 |  │ │ └─HASH JOIN        |    |9       |12          |
|6 |  │ │   ├─TABLE FULL SCAN|t1  |11      |5           |
|7 |  │ │   └─TABLE FULL SCAN|t3  |6       |5           |
|8 |  │ └─HASH JOIN          |    |21      |20          |
|9 |  │   ├─TABLE FULL SCAN  |t7  |11      |5           |
|10|  │   └─HASH JOIN        |    |15      |12          |
|11|  │     ├─TABLE FULL SCAN|t8  |11      |5           |
|12|  │     └─TABLE FULL SCAN|t9  |11      |5           |
|13|  └─HASH JOIN            |    |21      |21          |
|14|    ├─HASH JOIN          |    |15      |12          |
|15|    │ ├─TABLE FULL SCAN  |t4  |11      |5           |
|16|    │ └─TABLE FULL SCAN  |t5  |11      |5           |
|17|    └─TABLE FULL SCAN    |t6  |11      |5           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t3.c2 - t5.c2 * 4)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t3.c2 - t5.c2 * 4)])
  1 - output([t1.c1], [t3.c2], [t5.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t4.c1]), other_conds(nil)
  2 - output([t1.c1], [t3.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t7.c1]), other_conds(nil)
  3 - output([t1.c1], [t3.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  4 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.c1], [t3.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t3.c2]), other_conds(nil)
  6 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.c2]), filter([t3.c2 = t3.c1]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t7.c1]), filter(nil), rowset=16
      equal_conds([t7.c1 = t8.c1]), other_conds(nil)
  9 - output([t7.c1]), filter(nil), rowset=16
      access([t7.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t8.c1]), filter(nil), rowset=16
      equal_conds([t8.c1 = t9.c1]), other_conds(nil)
 11 - output([t8.c1]), filter(nil), rowset=16
      access([t8.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t9.c1]), filter(nil), rowset=16
      access([t9.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t9.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t4.c1], [t5.c2]), filter(nil), rowset=16
      equal_conds([t4.c1 = t6.c1]), other_conds(nil)
 14 - output([t4.c1], [t5.c2]), filter(nil), rowset=16
      equal_conds([t4.c1 = t5.c1]), other_conds(nil)
 15 - output([t4.c1]), filter(nil), rowset=16
      access([t4.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 16 - output([t5.c1], [t5.c2]), filter(nil), rowset=16
      access([t5.c1], [t5.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t6.c1]), filter(nil), rowset=16
      access([t6.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
select count(*), sum(x+y-z*4) from v4;
+----------+--------------+
| count(*) | sum(x+y-z*4) |
+----------+--------------+
|      771 |        -3096 |
+----------+--------------+

EXPLAIN select /*+ leading(t2, (t1, t3), (t7, (t8, t9))) */
count(*)+sum(t1.c1+t4.c2+t5.c1+t5.c2-5*t9.c1) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
Query Plan
=============================================================
|ID|OPERATOR                     |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |SCALAR GROUP BY              |    |1       |114         |
|1 |└─HASH JOIN                  |    |105     |110         |
|2 |  ├─HASH JOIN                |    |73      |80          |
|3 |  │ ├─HASH JOIN              |    |51      |60          |
|4 |  │ │ ├─HASH JOIN            |    |36      |44          |
|5 |  │ │ │ ├─HASH JOIN          |    |13      |19          |
|6 |  │ │ │ │ ├─TABLE FULL SCAN  |t2  |11      |5           |
|7 |  │ │ │ │ └─HASH JOIN        |    |9       |12          |
|8 |  │ │ │ │   ├─TABLE FULL SCAN|t1  |11      |5           |
|9 |  │ │ │ │   └─TABLE FULL SCAN|t3  |6       |5           |
|10|  │ │ │ └─HASH JOIN          |    |21      |20          |
|11|  │ │ │   ├─TABLE FULL SCAN  |t7  |11      |5           |
|12|  │ │ │   └─HASH JOIN        |    |15      |12          |
|13|  │ │ │     ├─TABLE FULL SCAN|t8  |11      |5           |
|14|  │ │ │     └─TABLE FULL SCAN|t9  |11      |5           |
|15|  │ │ └─TABLE FULL SCAN      |t6  |11      |5           |
|16|  │ └─TABLE FULL SCAN        |t4  |11      |5           |
|17|  └─TABLE FULL SCAN          |t5  |11      |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([cast(T_FUN_COUNT(*), DECIMAL(20, 0)) + T_FUN_SUM(t1.c1 + t4.c2 + t5.c1 + t5.c2 + -5 * t9.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t4.c2 + t5.c1 + t5.c2 + -5 * t9.c1)])
  1 - output([t1.c1], [t5.c1], [t9.c1], [t4.c2], [t5.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t5.c1]), other_conds(nil)
  2 - output([t1.c1], [t9.c1], [t4.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t4.c1]), other_conds(nil)
  3 - output([t1.c1], [t9.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t6.c1]), other_conds(nil)
  4 - output([t1.c1], [t9.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t7.c1]), other_conds(nil)
  5 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  6 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t3.c2]), other_conds(nil)
  8 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t3.c2]), filter([t3.c2 = t3.c1]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t7.c1], [t9.c1]), filter(nil), rowset=16
      equal_conds([t7.c1 = t8.c1]), other_conds(nil)
 11 - output([t7.c1]), filter(nil), rowset=16
      access([t7.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t8.c1], [t9.c1]), filter(nil), rowset=16
      equal_conds([t8.c1 = t9.c1]), other_conds(nil)
 13 - output([t8.c1]), filter(nil), rowset=16
      access([t8.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
 14 - output([t9.c1]), filter(nil), rowset=16
      access([t9.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t9.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t6.c1]), filter(nil), rowset=16
      access([t6.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
 16 - output([t4.c1], [t4.c2]), filter(nil), rowset=16
      access([t4.c1], [t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t5.c1], [t5.c2]), filter(nil), rowset=16
      access([t5.c1], [t5.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t2, (t1, t3), (t7, (t8, t9))) */
count(*)+sum(t1.c1+t4.c2+t5.c1+t5.c2-5*t9.c1) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
+-----------------------------------------------+
| count(*)+sum(t1.c1+t4.c2+t5.c1+t5.c2-5*t9.c1) |
+-----------------------------------------------+
|                                           759 |
+-----------------------------------------------+

EXPLAIN select /*+ leading(t2, t1, t3, (t4, (t5, t6)), (t8, (t9, t7))) */
count(*), sum(t1.c1+t5.c1+t6.c1-t7.c1-t8.c2*t9.c1) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 >= t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c2 and t8.c2 = t9.c1 and t8.c1 <= t2.c1 and t1.c1 = t9.c1;
Query Plan
=========================================================
|ID|OPERATOR                 |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |SCALAR GROUP BY          |    |1       |80          |
|1 |└─HASH JOIN              |    |115     |76          |
|2 |  ├─HASH JOIN            |    |36      |44          |
|3 |  │ ├─HASH JOIN          |    |13      |20          |
|4 |  │ │ ├─HASH JOIN        |    |15      |12          |
|5 |  │ │ │ ├─TABLE FULL SCAN|t2  |11      |5           |
|6 |  │ │ │ └─TABLE FULL SCAN|t1  |11      |5           |
|7 |  │ │ └─TABLE FULL SCAN  |t3  |6       |5           |
|8 |  │ └─HASH JOIN          |    |21      |20          |
|9 |  │   ├─TABLE FULL SCAN  |t4  |11      |5           |
|10|  │   └─HASH JOIN        |    |15      |12          |
|11|  │     ├─TABLE FULL SCAN|t5  |11      |5           |
|12|  │     └─TABLE FULL SCAN|t6  |11      |5           |
|13|  └─HASH JOIN            |    |19      |20          |
|14|    ├─TABLE FULL SCAN    |t8  |9       |5           |
|15|    └─HASH JOIN          |    |15      |12          |
|16|      ├─TABLE FULL SCAN  |t9  |11      |5           |
|17|      └─TABLE FULL SCAN  |t7  |11      |5           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t5.c1 + t6.c1 - t7.c1 - t8.c2 * t9.c1)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t5.c1 + t6.c1 - t7.c1 - t8.c2 * t9.c1)])
  1 - output([t1.c1], [t7.c1], [t5.c1], [t6.c1], [t8.c2], [t9.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t7.c1]), other_conds(nil)
  2 - output([t1.c1], [t5.c1], [t6.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t4.c1]), other_conds(nil)
  3 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t3.c2]), other_conds(nil)
  4 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  5 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.c2]), filter([t3.c2 >= t3.c1], [t3.c2 = t3.c1]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t4.c1], [t5.c1], [t6.c1]), filter(nil), rowset=16
      equal_conds([t4.c1 = t5.c1]), other_conds(nil)
  9 - output([t4.c1]), filter(nil), rowset=16
      access([t4.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t5.c1], [t6.c1]), filter(nil), rowset=16
      equal_conds([t5.c1 = t6.c1]), other_conds(nil)
 11 - output([t5.c1]), filter(nil), rowset=16
      access([t5.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t6.c1]), filter(nil), rowset=16
      access([t6.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t7.c1], [t8.c2], [t9.c1]), filter(nil), rowset=16
      equal_conds([t7.c1 = t8.c2]), other_conds(nil)
 14 - output([t8.c2]), filter([t8.c2 >= t8.c1]), rowset=16
      access([t8.c2], [t8.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t7.c1], [t9.c1]), filter(nil), rowset=16
      equal_conds([t7.c1 = t9.c1]), other_conds(nil)
 16 - output([t9.c1]), filter(nil), rowset=16
      access([t9.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t9.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t7.c1]), filter(nil), rowset=16
      access([t7.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t2, t1, t3, (t4, (t5, t6)), (t8, (t9, t7))) */
count(*), sum(t1.c1+t5.c1+t6.c1-t7.c1-t8.c2*t9.c1) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 >= t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c2 and t8.c2 = t9.c1 and t8.c1 <= t2.c1 and t1.c1 = t9.c1;
+----------+------------------------------------------+
| count(*) | sum(t1.c1+t5.c1+t6.c1-t7.c1-t8.c2*t9.c1) |
+----------+------------------------------------------+
|      644 |                                      227 |
+----------+------------------------------------------+

EXPLAIN select /*+ leading(t2, (t1, t3), (t7, t8, t9), (t4, t5, t6)) */
count(*), sum(t1.c1-t7.c2-t8.c1-t9.c2) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
Query Plan
=========================================================
|ID|OPERATOR                 |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |SCALAR GROUP BY          |    |1       |85          |
|1 |└─HASH JOIN              |    |105     |82          |
|2 |  ├─HASH JOIN            |    |36      |46          |
|3 |  │ ├─HASH JOIN          |    |13      |19          |
|4 |  │ │ ├─TABLE FULL SCAN  |t2  |11      |5           |
|5 |  │ │ └─HASH JOIN        |    |9       |12          |
|6 |  │ │   ├─TABLE FULL SCAN|t1  |11      |5           |
|7 |  │ │   └─TABLE FULL SCAN|t3  |6       |5           |
|8 |  │ └─HASH JOIN          |    |21      |22          |
|9 |  │   ├─HASH JOIN        |    |15      |13          |
|10|  │   │ ├─TABLE FULL SCAN|t7  |11      |5           |
|11|  │   │ └─TABLE FULL SCAN|t8  |11      |5           |
|12|  │   └─TABLE FULL SCAN  |t9  |11      |5           |
|13|  └─HASH JOIN            |    |21      |20          |
|14|    ├─HASH JOIN          |    |15      |12          |
|15|    │ ├─TABLE FULL SCAN  |t4  |11      |5           |
|16|    │ └─TABLE FULL SCAN  |t5  |11      |5           |
|17|    └─TABLE FULL SCAN    |t6  |11      |5           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 - t7.c2 - t8.c1 - t9.c2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 - t7.c2 - t8.c1 - t9.c2)])
  1 - output([t1.c1], [t8.c1], [t7.c2], [t9.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t4.c1]), other_conds(nil)
  2 - output([t1.c1], [t8.c1], [t7.c2], [t9.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t7.c1]), other_conds(nil)
  3 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  4 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t3.c2]), other_conds(nil)
  6 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.c2]), filter([t3.c2 = t3.c1]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t7.c1], [t8.c1], [t7.c2], [t9.c2]), filter(nil), rowset=16
      equal_conds([t7.c1 = t9.c1]), other_conds(nil)
  9 - output([t7.c1], [t8.c1], [t7.c2]), filter(nil), rowset=16
      equal_conds([t7.c1 = t8.c1]), other_conds(nil)
 10 - output([t7.c1], [t7.c2]), filter(nil), rowset=16
      access([t7.c1], [t7.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t8.c1]), filter(nil), rowset=16
      access([t8.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t9.c1], [t9.c2]), filter(nil), rowset=16
      access([t9.c1], [t9.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t9.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t4.c1]), filter(nil), rowset=16
      equal_conds([t4.c1 = t6.c1]), other_conds(nil)
 14 - output([t4.c1]), filter(nil), rowset=16
      equal_conds([t4.c1 = t5.c1]), other_conds(nil)
 15 - output([t4.c1]), filter(nil), rowset=16
      access([t4.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 16 - output([t5.c1]), filter(nil), rowset=16
      access([t5.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t6.c1]), filter(nil), rowset=16
      access([t6.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t2, (t1, t3), (t7, t8, t9), (t4, t5, t6)) */
count(*), sum(t1.c1-t7.c2-t8.c1-t9.c2) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
+----------+------------------------------+
| count(*) | sum(t1.c1-t7.c2-t8.c1-t9.c2) |
+----------+------------------------------+
|      771 |                        -2328 |
+----------+------------------------------+

EXPLAIN select /*+ leading(t1, (t2  t3), (t4, t5  (t6, t7))) use_hash(t4, t5) use_hash(t6,t7) */
count(*), sum(t1.c1-t5.c2+t6.c1) - max(t2.c1*t8.c2) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
Query Plan
===========================================================
|ID|OPERATOR                   |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------
|0 |SCALAR GROUP BY            |    |1       |113         |
|1 |└─HASH JOIN                |    |105     |108         |
|2 |  ├─HASH JOIN              |    |73      |76          |
|3 |  │ ├─HASH JOIN            |    |51      |54          |
|4 |  │ │ ├─HASH JOIN          |    |13      |19          |
|5 |  │ │ │ ├─TABLE FULL SCAN  |t1  |11      |5           |
|6 |  │ │ │ └─HASH JOIN        |    |9       |12          |
|7 |  │ │ │   ├─TABLE FULL SCAN|t2  |11      |5           |
|8 |  │ │ │   └─TABLE FULL SCAN|t3  |6       |5           |
|9 |  │ │ └─HASH JOIN          |    |30      |29          |
|10|  │ │   ├─HASH JOIN        |    |15      |12          |
|11|  │ │   │ ├─TABLE FULL SCAN|t4  |11      |5           |
|12|  │ │   │ └─TABLE FULL SCAN|t5  |11      |5           |
|13|  │ │   └─HASH JOIN        |    |15      |12          |
|14|  │ │     ├─TABLE FULL SCAN|t6  |11      |5           |
|15|  │ │     └─TABLE FULL SCAN|t7  |11      |5           |
|16|  │ └─TABLE FULL SCAN      |t8  |11      |5           |
|17|  └─TABLE FULL SCAN        |t9  |11      |5           |
===========================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 - t5.c2 + t6.c1) - cast(T_FUN_MAX(t2.c1 * t8.c2), DECIMAL(22, 0))]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 - t5.c2 + t6.c1)], [T_FUN_MAX(t2.c1 * t8.c2)])
  1 - output([t1.c1], [t2.c1], [t6.c1], [t5.c2], [t8.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t9.c1]), other_conds(nil)
  2 - output([t1.c1], [t2.c1], [t6.c1], [t5.c2], [t8.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t8.c1]), other_conds(nil)
  3 - output([t1.c1], [t2.c1], [t6.c1], [t5.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t4.c1]), other_conds(nil)
  4 - output([t1.c1], [t2.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  5 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.c1]), filter(nil), rowset=16
      equal_conds([t2.c1 = t3.c1]), other_conds(nil)
  7 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t3.c1]), filter([t3.c2 = t3.c1]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t4.c1], [t6.c1], [t5.c2]), filter(nil), rowset=16
      equal_conds([t4.c1 = t6.c1]), other_conds(nil)
 10 - output([t4.c1], [t5.c2]), filter(nil), rowset=16
      equal_conds([t4.c1 = t5.c1]), other_conds(nil)
 11 - output([t4.c1]), filter(nil), rowset=16
      access([t4.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t5.c1], [t5.c2]), filter(nil), rowset=16
      access([t5.c1], [t5.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t6.c1]), filter(nil), rowset=16
      equal_conds([t6.c1 = t7.c1]), other_conds(nil)
 14 - output([t6.c1]), filter(nil), rowset=16
      access([t6.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t7.c1]), filter(nil), rowset=16
      access([t7.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
 16 - output([t8.c1], [t8.c2]), filter(nil), rowset=16
      access([t8.c1], [t8.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t9.c1]), filter(nil), rowset=16
      access([t9.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t9.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t1, (t2  t3), (t4, t5  (t6, t7))) use_hash(t4, t5) use_hash(t6,t7) */
count(*), sum(t1.c1-t5.c2+t6.c1) - max(t2.c1*t8.c2) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
+----------+-------------------------------------------+
| count(*) | sum(t1.c1-t5.c2+t6.c1) - max(t2.c1*t8.c2) |
+----------+-------------------------------------------+
|      771 |                                       371 |
+----------+-------------------------------------------+
EXPLAIN select /*+ leading(t2  (t7, t1 (t8, t9))) */
count(*) , sum(t1.c1+t5.c1+t8.c2*t9.c1-t3.c1*4) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
Query Plan
===============================================================
|ID|OPERATOR                       |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1       |129         |
|1 |└─HASH JOIN                    |    |105     |126         |
|2 |  ├─HASH JOIN                  |    |73      |96          |
|3 |  │ ├─HASH JOIN                |    |51      |74          |
|4 |  │ │ ├─HASH JOIN              |    |36      |57          |
|5 |  │ │ │ ├─HASH JOIN            |    |42      |38          |
|6 |  │ │ │ │ ├─TABLE FULL SCAN    |t2  |11      |5           |
|7 |  │ │ │ │ └─HASH JOIN          |    |30      |29          |
|8 |  │ │ │ │   ├─HASH JOIN        |    |15      |12          |
|9 |  │ │ │ │   │ ├─TABLE FULL SCAN|t7  |11      |5           |
|10|  │ │ │ │   │ └─TABLE FULL SCAN|t1  |11      |5           |
|11|  │ │ │ │   └─HASH JOIN        |    |15      |13          |
|12|  │ │ │ │     ├─TABLE FULL SCAN|t8  |11      |5           |
|13|  │ │ │ │     └─TABLE FULL SCAN|t9  |11      |5           |
|14|  │ │ │ └─TABLE FULL SCAN      |t3  |6       |5           |
|15|  │ │ └─TABLE FULL SCAN        |t6  |11      |5           |
|16|  │ └─TABLE FULL SCAN          |t5  |11      |5           |
|17|  └─TABLE FULL SCAN            |t4  |11      |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t5.c1 + t8.c2 * t9.c1 - t3.c1 * 4)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1 + t5.c1 + t8.c2 * t9.c1 - t3.c1 * 4)])
  1 - output([t1.c1], [t5.c1], [t9.c1], [t8.c2], [t3.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t4.c1]), other_conds(nil)
  2 - output([t1.c1], [t5.c1], [t9.c1], [t8.c2], [t3.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t5.c1]), other_conds(nil)
  3 - output([t1.c1], [t9.c1], [t8.c2], [t3.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t6.c1]), other_conds(nil)
  4 - output([t1.c1], [t9.c1], [t8.c2], [t3.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t3.c2]), other_conds(nil)
  5 - output([t1.c1], [t9.c1], [t8.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  6 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t1.c1], [t9.c1], [t8.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t8.c1]), other_conds(nil)
  8 - output([t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t7.c1]), other_conds(nil)
  9 - output([t7.c1]), filter(nil), rowset=16
      access([t7.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t7.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t8.c1], [t9.c1], [t8.c2]), filter(nil), rowset=16
      equal_conds([t8.c1 = t9.c1]), other_conds(nil)
 12 - output([t8.c1], [t8.c2]), filter(nil), rowset=16
      access([t8.c1], [t8.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t8.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t9.c1]), filter(nil), rowset=16
      access([t9.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t9.__pk_increment]), range(MIN ; MAX)always true
 14 - output([t3.c2], [t3.c1]), filter([t3.c2 = t3.c1]), rowset=16
      access([t3.c2], [t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t6.c1]), filter(nil), rowset=16
      access([t6.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t6.__pk_increment]), range(MIN ; MAX)always true
 16 - output([t5.c1]), filter(nil), rowset=16
      access([t5.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t4.c1]), filter(nil), rowset=16
      access([t4.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t2  (t7, t1 (t8, t9))) */
count(*) , sum(t1.c1+t5.c1+t8.c2*t9.c1-t3.c1*4) from nn1 t1, nn1 t2, nn1 t3, nn1 t4, nn1 t5, nn1 t6 , nn1 t7, nn1 t8, nn1 t9
where t1.c1 = t2.c1 and t1.c1=t3.c2 and t2.c1 = t3.c1 and t3.c1 = t4.c1 and t4.c1 = t5.c1 and t5.c1 = t6.c1 AND 
t6.c1 = t7.c1 and t7.c1 = t8.c1 and t8.c1 = t9.c1 and t8.c1 = t2.c1 and t1.c1 = t9.c1;
+----------+--------------------------------------+
| count(*) | sum(t1.c1+t5.c1+t8.c2*t9.c1-t3.c1*4) |
+----------+--------------------------------------+
|      771 |                                  154 |
+----------+--------------------------------------+

EXPLAIN select /*+ leading(t1,t4,(t2,t3)) */
count(*), sum(t1.c1)-sum(t4.c2) from nn1 t1, nn1 t2, nn1 t3, nn1 t4
where t1.c1 = t2.c1 and  t3.c1 = t4.c1 and t1.c2 = t3.c2;
Query Plan
===============================================================
|ID|OPERATOR                       |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |SCALAR GROUP BY                |    |1       |81          |
|1 |└─HASH JOIN                    |    |121     |75          |
|2 |  ├─NESTED-LOOP JOIN CARTESIAN |    |121     |13          |
|3 |  │ ├─TABLE FULL SCAN          |t1  |11      |5           |
|4 |  │ └─MATERIAL                 |    |11      |6           |
|5 |  │   └─TABLE FULL SCAN        |t4  |11      |5           |
|6 |  └─NESTED-LOOP JOIN CARTESIAN |    |121     |13          |
|7 |    ├─TABLE FULL SCAN          |t2  |11      |5           |
|8 |    └─MATERIAL                 |    |11      |6           |
|9 |      └─TABLE FULL SCAN        |t3  |11      |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1) - T_FUN_SUM(t4.c2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_SUM(t1.c1)], [T_FUN_SUM(t4.c2)])
  1 - output([t1.c1], [t4.c2]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1], [t3.c1 = t4.c1], [t1.c2 = t3.c2]), other_conds(nil)
  2 - output([t1.c1], [t1.c2], [t4.c1], [t4.c2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=16
      access([t1.c1], [t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t4.c1], [t4.c2]), filter(nil), rowset=16
  5 - output([t4.c1], [t4.c2]), filter(nil), rowset=16
      access([t4.c1], [t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.c1], [t3.c1], [t3.c2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  7 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t3.c1], [t3.c2]), filter(nil), rowset=16
  9 - output([t3.c1], [t3.c2]), filter(nil), rowset=16
      access([t3.c1], [t3.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t1,t4,(t2,t3)) */
count(*), sum(t1.c1)-sum(t4.c2) from nn1 t1, nn1 t2, nn1 t3, nn1 t4
where t1.c1 = t2.c1 and  t3.c1 = t4.c1 and t1.c2 = t3.c2;
+----------+-----------------------+
| count(*) | sum(t1.c1)-sum(t4.c2) |
+----------+-----------------------+
|       52 |                    -4 |
+----------+-----------------------+

### 7, 带qb_name的测试  ###
EXPLAIN select /*+ LEADING(@x2x (c d), (a b)) */
* from nn1 x
where exists (select /*+ qb_name(x2x) */  1 
from nn1 a, nn2 b, nn1 c, nn2 d   where a.c1 = b.d1
 and c.c2 = d.d1) order by x.c1 asc, x.c2 asc, x.c3 desc;
Query Plan
==================================================================
|ID|OPERATOR                         |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |SORT                             |     |11      |26          |
|1 |└─SUBPLAN FILTER                 |     |11      |25          |
|2 |  ├─TABLE FULL SCAN              |x    |11      |5           |
|3 |  └─LIMIT                        |     |1       |20          |
|4 |    └─NESTED-LOOP JOIN CARTESIAN |     |1       |20          |
|5 |      ├─SUBPLAN SCAN             |VIEW1|1       |10          |
|6 |      │ └─LIMIT                  |     |1       |10          |
|7 |      │   └─HASH JOIN            |     |1       |10          |
|8 |      │     ├─TABLE FULL SCAN    |a    |11      |5           |
|9 |      │     └─TABLE FULL SCAN    |b    |1       |4           |
|10|      └─MATERIAL                 |     |1       |10          |
|11|        └─SUBPLAN SCAN           |VIEW2|1       |10          |
|12|          └─LIMIT                |     |1       |10          |
|13|            └─HASH JOIN          |     |1       |10          |
|14|              ├─TABLE FULL SCAN  |c    |11      |5           |
|15|              └─TABLE FULL SCAN  |d    |1       |4           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([x.c1], [x.c2], [x.c3]), filter(nil), rowset=16
      sort_keys([x.c1, ASC], [x.c2, ASC], [x.c3, DESC])
  1 - output([x.c1], [x.c2], [x.c3]), filter(nil), rowset=16
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))(:0)]), init_plan_idxs_(nil), use_batch=false
  2 - output([x.c1], [x.c2], [x.c3]), filter(nil), startup_filter([:0]), rowset=16
      access([x.c1], [x.c2], [x.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([x.__pk_increment]), range(MIN ; MAX)always true
  3 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
  4 - output(nil), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  5 - output(nil), filter(nil), rowset=16
      access(nil)
  6 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
  7 - output(nil), filter(nil), rowset=16
      equal_conds([a.c1 = b.d1]), other_conds(nil)
  8 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  9 - output([b.d1]), filter(nil), rowset=16
      access([b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
 10 - output(nil), filter(nil), rowset=16
 11 - output(nil), filter(nil), rowset=16
      access(nil)
 12 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
 13 - output(nil), filter(nil), rowset=16
      equal_conds([c.c2 = d.d1]), other_conds(nil)
 14 - output([c.c2]), filter(nil), rowset=16
      access([c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
 15 - output([d.d1]), filter(nil), rowset=16
      access([d.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
select /*+ LEADING(@x2x (c d), (a b)) */
* from nn1 x
where exists (select /*+ qb_name(x2x) */  1 
from nn1 a, nn2 b, nn1 c, nn2 d   where a.c1 = b.d1
 and c.c2 = d.d1) order by x.c1 asc, x.c2 asc, x.c3 desc;
+------+------+---------+
| c1   | c2   | c3      |
+------+------+---------+
| NULL | NULL | NULL    |
|    0 |    0 | hello10 |
|    0 |    1 | hello11 |
|    1 |    1 | hello11 |
|    1 |    2 | hello12 |
|    2 |    2 | hello12 |
|    2 |    3 | hello10 |
|    3 |    3 | hello10 |
|    4 |    4 | hello11 |
|    5 |    5 | hello12 |
|    6 |    0 | hello10 |
+------+------+---------+

EXPLAIN select /*+ LEADING(@x2x (c d), (a b)) */
* from nn1 x
where exists (select /*+ qb_name(x2x)  LEADING(a c b d)*/  1 
from nn1 a, nn2 b, nn1 c, nn2 d   where a.c1 = b.d1
 and c.c2 = d.d1) order by x.c1 desc, x.c2 asc, x.c3 desc;
Query Plan
==================================================================
|ID|OPERATOR                         |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |SORT                             |     |11      |26          |
|1 |└─SUBPLAN FILTER                 |     |11      |25          |
|2 |  ├─TABLE FULL SCAN              |x    |11      |5           |
|3 |  └─LIMIT                        |     |1       |20          |
|4 |    └─NESTED-LOOP JOIN CARTESIAN |     |1       |20          |
|5 |      ├─SUBPLAN SCAN             |VIEW1|1       |10          |
|6 |      │ └─LIMIT                  |     |1       |10          |
|7 |      │   └─HASH JOIN            |     |1       |10          |
|8 |      │     ├─TABLE FULL SCAN    |a    |11      |5           |
|9 |      │     └─TABLE FULL SCAN    |b    |1       |4           |
|10|      └─MATERIAL                 |     |1       |10          |
|11|        └─SUBPLAN SCAN           |VIEW2|1       |10          |
|12|          └─LIMIT                |     |1       |10          |
|13|            └─HASH JOIN          |     |1       |10          |
|14|              ├─TABLE FULL SCAN  |c    |11      |5           |
|15|              └─TABLE FULL SCAN  |d    |1       |4           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([x.c1], [x.c2], [x.c3]), filter(nil), rowset=16
      sort_keys([x.c1, DESC], [x.c2, ASC], [x.c3, DESC])
  1 - output([x.c1], [x.c2], [x.c3]), filter(nil), rowset=16
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))(:0)]), init_plan_idxs_(nil), use_batch=false
  2 - output([x.c1], [x.c2], [x.c3]), filter(nil), startup_filter([:0]), rowset=16
      access([x.c1], [x.c2], [x.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([x.__pk_increment]), range(MIN ; MAX)always true
  3 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
  4 - output(nil), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  5 - output(nil), filter(nil), rowset=16
      access(nil)
  6 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
  7 - output(nil), filter(nil), rowset=16
      equal_conds([a.c1 = b.d1]), other_conds(nil)
  8 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  9 - output([b.d1]), filter(nil), rowset=16
      access([b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
 10 - output(nil), filter(nil), rowset=16
 11 - output(nil), filter(nil), rowset=16
      access(nil)
 12 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
 13 - output(nil), filter(nil), rowset=16
      equal_conds([c.c2 = d.d1]), other_conds(nil)
 14 - output([c.c2]), filter(nil), rowset=16
      access([c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
 15 - output([d.d1]), filter(nil), rowset=16
      access([d.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
select /*+ LEADING(@x2x (c d), (a b)) */
* from nn1 x
where exists (select /*+ qb_name(x2x)  LEADING(a c b d)*/  1 
from nn1 a, nn2 b, nn1 c, nn2 d   where a.c1 = b.d1
 and c.c2 = d.d1) order by x.c1 desc, x.c2 asc, x.c3 desc;
+------+------+---------+
| c1   | c2   | c3      |
+------+------+---------+
|    6 |    0 | hello10 |
|    5 |    5 | hello12 |
|    4 |    4 | hello11 |
|    3 |    3 | hello10 |
|    2 |    2 | hello12 |
|    2 |    3 | hello10 |
|    1 |    1 | hello11 |
|    1 |    2 | hello12 |
|    0 |    0 | hello10 |
|    0 |    1 | hello11 |
| NULL | NULL | NULL    |
+------+------+---------+

EXPLAIN select /*+ LEADING(@x3x b d (a c)) */
* from nn1 x
where exists (select /*+ qb_name(x3x) */  1 
from nn1 a, nn2 b, nn1 c, nn2 d   where a.c1 = b.d1
 and c.c2 = d.d1) order by x.c1 desc, x.c3 desc, x.c2 asc ;
Query Plan
==================================================================
|ID|OPERATOR                         |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |SORT                             |     |11      |26          |
|1 |└─SUBPLAN FILTER                 |     |11      |25          |
|2 |  ├─TABLE FULL SCAN              |x    |11      |5           |
|3 |  └─LIMIT                        |     |1       |20          |
|4 |    └─NESTED-LOOP JOIN CARTESIAN |     |1       |20          |
|5 |      ├─SUBPLAN SCAN             |VIEW1|1       |10          |
|6 |      │ └─LIMIT                  |     |1       |10          |
|7 |      │   └─HASH JOIN            |     |1       |10          |
|8 |      │     ├─TABLE FULL SCAN    |a    |11      |5           |
|9 |      │     └─TABLE FULL SCAN    |b    |1       |4           |
|10|      └─MATERIAL                 |     |1       |10          |
|11|        └─SUBPLAN SCAN           |VIEW2|1       |10          |
|12|          └─LIMIT                |     |1       |10          |
|13|            └─HASH JOIN          |     |1       |10          |
|14|              ├─TABLE FULL SCAN  |c    |11      |5           |
|15|              └─TABLE FULL SCAN  |d    |1       |4           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([x.c1], [x.c2], [x.c3]), filter(nil), rowset=16
      sort_keys([x.c1, DESC], [x.c3, DESC], [x.c2, ASC])
  1 - output([x.c1], [x.c3], [x.c2]), filter(nil), rowset=16
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))(:0)]), init_plan_idxs_(nil), use_batch=false
  2 - output([x.c1], [x.c2], [x.c3]), filter(nil), startup_filter([:0]), rowset=16
      access([x.c1], [x.c2], [x.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([x.__pk_increment]), range(MIN ; MAX)always true
  3 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
  4 - output(nil), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  5 - output(nil), filter(nil), rowset=16
      access(nil)
  6 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
  7 - output(nil), filter(nil), rowset=16
      equal_conds([a.c1 = b.d1]), other_conds(nil)
  8 - output([a.c1]), filter(nil), rowset=16
      access([a.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.__pk_increment]), range(MIN ; MAX)always true
  9 - output([b.d1]), filter(nil), rowset=16
      access([b.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.__pk_increment]), range(MIN ; MAX)always true
 10 - output(nil), filter(nil), rowset=16
 11 - output(nil), filter(nil), rowset=16
      access(nil)
 12 - output([1]), filter(nil), rowset=16
      limit(1), offset(nil)
 13 - output(nil), filter(nil), rowset=16
      equal_conds([c.c2 = d.d1]), other_conds(nil)
 14 - output([c.c2]), filter(nil), rowset=16
      access([c.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([c.__pk_increment]), range(MIN ; MAX)always true
 15 - output([d.d1]), filter(nil), rowset=16
      access([d.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([d.__pk_increment]), range(MIN ; MAX)always true
select /*+ LEADING(@x3x b d (a c)) */
* from nn1 x
where exists (select /*+ qb_name(x3x) */  1 
from nn1 a, nn2 b, nn1 c, nn2 d   where a.c1 = b.d1
 and c.c2 = d.d1) order by x.c1 desc, x.c3 desc, x.c2 asc ;
+------+------+---------+
| c1   | c2   | c3      |
+------+------+---------+
|    6 |    0 | hello10 |
|    5 |    5 | hello12 |
|    4 |    4 | hello11 |
|    3 |    3 | hello10 |
|    2 |    2 | hello12 |
|    2 |    3 | hello10 |
|    1 |    2 | hello12 |
|    1 |    1 | hello11 |
|    0 |    1 | hello11 |
|    0 |    0 | hello10 |
| NULL | NULL | NULL    |
+------+------+---------+

### 8, 通过bushy 扩展能获取较好的计划  ###
EXPLAIN select /*+ leading(t1,t2,(t4,t5))*/ count(*),min(t2.c1)+max(t5.d2) from nn1 t1, nn1 t2,  nn2 t4, nn2 t5 
where t1.c1 = t2.c1 and 
      t4.d1 = t5.d1 AND
      t1.c1 + t2.c1  = t4.d1 + t5.d2 ;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SCALAR GROUP BY      |    |1       |30          |
|1 |└─HASH JOIN          |    |15      |29          |
|2 |  ├─HASH JOIN        |    |15      |12          |
|3 |  │ ├─TABLE FULL SCAN|t1  |11      |5           |
|4 |  │ └─TABLE FULL SCAN|t2  |11      |5           |
|5 |  └─HASH JOIN        |    |20      |12          |
|6 |    ├─TABLE FULL SCAN|t4  |11      |5           |
|7 |    └─TABLE FULL SCAN|t5  |11      |5           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)], [T_FUN_MIN(t2.c1) + T_FUN_MAX(t5.d2)]), filter(nil), rowset=16
      group(nil), agg_func([T_FUN_COUNT(*)], [T_FUN_MIN(t2.c1)], [T_FUN_MAX(t5.d2)])
  1 - output([t2.c1], [t5.d2]), filter(nil), rowset=16
      equal_conds([t1.c1 + t2.c1 = t4.d1 + t5.d2]), other_conds(nil)
  2 - output([t2.c1], [t1.c1]), filter(nil), rowset=16
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  3 - output([t1.c1]), filter(nil), rowset=16
      access([t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t2.c1]), filter(nil), rowset=16
      access([t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t5.d2], [t4.d1]), filter(nil), rowset=16
      equal_conds([t4.d1 = t5.d1]), other_conds(nil)
  6 - output([t4.d1]), filter(nil), rowset=16
      access([t4.d1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t5.d1], [t5.d2]), filter(nil), rowset=16
      access([t5.d1], [t5.d2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
select /*+ leading(t1,t2,(t4,t5))*/ count(*),min(t2.c1)+max(t5.d2) from nn1 t1, nn1 t2,  nn2 t4, nn2 t5 
where t1.c1 = t2.c1 and 
      t4.d1 = t5.d1 AND
      t1.c1 + t2.c1  = t4.d1 + t5.d2 ;
+----------+-----------------------+
| count(*) | min(t2.c1)+max(t5.d2) |
+----------+-----------------------+
|       40 |                     2 |
+----------+-----------------------+

### 9. 
explain select /*+leading(t1 (t2 t3))*/* from t1,t3 where t1.a = t3.a and t1.b not in (select b from t2);
Query Plan
=========================================================
|ID|OPERATOR                 |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |HASH JOIN                |    |1       |12          |
|1 |├─HASH RIGHT ANTI JOIN NA|    |1       |8           |
|2 |│ ├─TABLE FULL SCAN      |t2  |1       |4           |
|3 |│ └─TABLE FULL SCAN      |t1  |1       |4           |
|4 |└─TABLE FULL SCAN        |t3  |1       |4           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b]), other_conds(nil)
  2 - output([t2.b]), filter(nil), rowset=16
      access([t2.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select /*+leading(t2 t3 t1)*/* from t1,t3 where t1.a = t3.a and t1.b not in (select b from t2);
Query Plan
=========================================================
|ID|OPERATOR                 |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |HASH JOIN                |    |1       |12          |
|1 |├─HASH RIGHT ANTI JOIN NA|    |1       |8           |
|2 |│ ├─TABLE FULL SCAN      |t2  |1       |4           |
|3 |│ └─TABLE FULL SCAN      |t1  |1       |4           |
|4 |└─TABLE FULL SCAN        |t3  |1       |4           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b]), other_conds(nil)
  2 - output([t2.b]), filter(nil), rowset=16
      access([t2.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select /*+leading(t3 t1 t2)*/* from t1,t3 where t1.a = t3.a and t1.b not in (select b from t2);
Query Plan
===================================================
|ID|OPERATOR           |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |HASH ANTI JOIN NA  |    |1       |13          |
|1 |├─HASH JOIN        |    |1       |9           |
|2 |│ ├─TABLE FULL SCAN|t3  |1       |4           |
|3 |│ └─TABLE FULL SCAN|t1  |1       |4           |
|4 |└─TABLE FULL SCAN  |t2  |1       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b]), other_conds(nil)
  1 - output([t1.a], [t1.b], [t1.c], [t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  2 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t2.b]), filter(nil), rowset=16
      access([t2.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select /*+leading(t1 t2 t3)*/* from t1,t3 where t1.a = t3.a and t1.b not in (select b from t2);
Query Plan
===================================================
|ID|OPERATOR           |NAME|EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |HASH JOIN          |    |1       |12          |
|1 |├─HASH ANTI JOIN NA|    |1       |8           |
|2 |│ ├─TABLE FULL SCAN|t1  |1       |4           |
|3 |│ └─TABLE FULL SCAN|t2  |1       |4           |
|4 |└─TABLE FULL SCAN  |t3  |1       |4           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b]), other_conds(nil)
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.b]), filter(nil), rowset=16
      access([t2.b]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
drop table nn1;
drop table nn2;

drop table t1;
drop table t2;
drop table t3;

drop database bushy_leading_hint_db;
