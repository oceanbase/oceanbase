#owner: ht353245
#owner group: shenzhen
--echo # ----------------------------------------------------------------------
--echo # Base test of GEOMETRY spatial index.
--echo # ----------------------------------------------------------------------
--source mysql_test/test_suite/geometry/t/import_default_srs_data_mysql.inc

############################################################################################
# Base test for spatial index                                                              #
############################################################################################
### 1. Test for spatial index sql syntax
if (1) {
  --disable_warnings
  DROP TABLE IF EXISTS spatial_index_syntax;
  --enable_warnings

  ## 1.1 Create table with spaital index.
  # 1.1.1 Basic syntax.
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326, INDEX(g) LOCAL);
  SHOW FIELDS FROM spatial_index_syntax;
  DROP TABLE IF EXISTS spatial_index_syntax;
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326, INDEX(g) GLOBAL);
  SHOW FIELDS FROM spatial_index_syntax;
  DROP TABLE IF EXISTS spatial_index_syntax;
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326, INDEX(g));
  SHOW FIELDS FROM spatial_index_syntax;

  # 1.1.2 Test for 'SPATIAL' keyword when create table.
  DROP TABLE IF EXISTS spatial_index_syntax;
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326, SPATIAL INDEX(g) LOCAL);
  SHOW FIELDS FROM spatial_index_syntax;
  DROP TABLE IF EXISTS spatial_index_syntax;
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326, SPATIAL INDEX(g) GLOBAL);
  SHOW FIELDS FROM spatial_index_syntax;
  DROP TABLE IF EXISTS spatial_index_syntax;
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326, SPATIAL INDEX(g));
  SHOW FIELDS FROM spatial_index_syntax;
  DROP TABLE IF EXISTS spatial_index_syntax;

  ## 1.2 Alter table with spaital index.
  # 1.2.1 Basic syntax.
  DROP TABLE IF EXISTS spatial_index_syntax;
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326);
  ALTER TABLE spatial_index_syntax ADD INDEX idx(g) LOCAL;
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;
  ALTER TABLE spatial_index_syntax ADD INDEX idx(g) GLOBAL;
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;
  ALTER TABLE spatial_index_syntax ADD INDEX idx(g);
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;

  # 1.2.2 Test for 'SPATIAL' keyword when alter table.
  DROP TABLE IF EXISTS spatial_index_syntax;
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326);
  ALTER TABLE spatial_index_syntax ADD SPATIAL INDEX idx(g) LOCAL;
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;
  ALTER TABLE spatial_index_syntax ADD SPATIAL INDEX idx(g) GLOBAL;
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;
  ALTER TABLE spatial_index_syntax ADD SPATIAL INDEX idx(g);
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;

  ## 1.3 Create spatial index.
  # 1.3.1 Basic syntax.
  DROP TABLE IF EXISTS spatial_index_syntax;
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326);
  CREATE INDEX idx ON spatial_index_syntax (g) LOCAL;
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;
  CREATE INDEX idx ON spatial_index_syntax (g) GLOBAL;
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;
  CREATE INDEX idx ON spatial_index_syntax (g);
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;

  # 1.3.2 Test for 'SPATIAL' keyword when create index.
  DROP TABLE IF EXISTS spatial_index_syntax;
  CREATE TABLE spatial_index_syntax (g GEOMETRY NOT NULL SRID 4326);
  CREATE SPATIAL INDEX idx ON spatial_index_syntax (g) LOCAL;
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;
  CREATE SPATIAL INDEX idx ON spatial_index_syntax (g) GLOBAL;
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;
  CREATE SPATIAL INDEX idx ON spatial_index_syntax (g);
  SHOW FIELDS FROM spatial_index_syntax;
  DROP INDEX idx ON spatial_index_syntax;
}

### 2. Test for spatial index constraint
if (1) {
  --disable_warnings
  DROP TABLE IF EXISTS spatial_index_constraint;
  --enable_warnings

  ## 2.1 A spatial index can only be built on a single spatial column.
  CREATE TABLE spatial_index_constraint (g1 GEOMETRY NOT NULL SRID 4326, g2 GEOMETRY NOT NULL SRID 4326);
  --error 1070
  CREATE INDEX idx ON spatial_index_constraint (g1, g2);
  DROP TABLE IF EXISTS spatial_index_constraint;
  CREATE TABLE spatial_index_constraint (i int, g GEOMETRY NOT NULL SRID 4326);
  --error 1070
  CREATE INDEX idx ON spatial_index_constraint (i, g);

  ## 2.2 Spatial index can only be built on spatial columns.
  DROP TABLE IF EXISTS spatial_index_constraint;
  CREATE TABLE spatial_index_constraint (i int, g GEOMETRY NOT NULL SRID 4326);
  --error 1687
  CREATE SPATIAL INDEX idx ON spatial_index_constraint (i);

  ## 2.3 Spatial columns can only be indexed spatial index.(TODO:adapt error code)
  DROP TABLE IF EXISTS spatial_index_constraint;
  CREATE TABLE spatial_index_constraint (i int, g GEOMETRY NOT NULL SRID 4326);
  --error 3728
  CREATE UNIQUE INDEX idx ON spatial_index_constraint (g);

  ## 2.4 Column of the spatial index must be 'NOT NULL'.(TODO:adapt error code)
  DROP TABLE IF EXISTS spatial_index_constraint;
  CREATE TABLE spatial_index_constraint (i int, g GEOMETRY);
  --error 1252
  CREATE INDEX idx ON spatial_index_constraint (g);

  ## 2.5 Cannot insert the record when srid is different with the colume srid.
  DROP TABLE IF EXISTS spatial_index_constraint;
  CREATE TABLE spatial_index_constraint (g GEOMETRY NOT NULL SRID 4326);
  CREATE INDEX idx ON spatial_index_constraint (g);
  --error 3643
  INSERT INTO spatial_index_constraint values (ST_GEOMFROMTEXT('POINT(1 1)', 0));
  DROP TABLE IF EXISTS spatial_index_constraint;
}

### 3. Test for spatial index base DML.
if (1) {
  --disable_warnings
  DROP TABLE IF EXISTS spatial_index_dml;
  --enable_warnings
  SET @v=ST_GEOMFROMTEXT('POINT(0 0)', 4326);
  SET @v0=ST_GEOMFROMTEXT('POINT(0 0)', 4326);
  SET @v1=ST_GEOMFROMTEXT('POINT(1 1)', 4326);
  ## 3.1 Insert row
  # 3.1.1 one column for rowkey
  CREATE TABLE spatial_index_dml (i int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY (i));
  CREATE INDEX idx ON spatial_index_dml (g);
  INSERT INTO spatial_index_dml VALUES (1, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  SELECT /*+INDEX(spatial_index_dml idx)*/ st_astext(g) FROM spatial_index_dml WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  DROP TABLE spatial_index_dml;

  # 3.1.2 more than one column for rowkey
  CREATE TABLE spatial_index_dml (i int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY (i));
  CREATE INDEX idx ON spatial_index_dml (g);
  INSERT INTO spatial_index_dml VALUES (1, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  SELECT /*+INDEX(spatial_index_dml idx)*/ st_astext(g) FROM spatial_index_dml WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  DROP TABLE spatial_index_dml;
  CREATE TABLE spatial_index_dml (i1 int, i2 int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY (i1, i2));
  CREATE INDEX idx ON spatial_index_dml (g);
  INSERT INTO spatial_index_dml VALUES (1, 2, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  SELECT /*+INDEX(spatial_index_dml idx)*/ st_astext(g) FROM spatial_index_dml WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  DROP TABLE spatial_index_dml;

  ## 3.2 Update row
  # 3.2.1 one column for rowkey
  DROP TABLE IF EXISTS spatial_index_dml;
  CREATE TABLE spatial_index_dml (i int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY (i));
  CREATE INDEX idx ON spatial_index_dml (g);
  INSERT INTO spatial_index_dml VALUES (1, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  UPDATE spatial_index_dml SET g=ST_GEOMFROMTEXT('POINT(1 2)', 4326) WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  SELECT /*+INDEX(spatial_index_dml idx)*/ g FROM spatial_index_dml WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(1 1)', 4326));

  # 3.2.2 more than one column for rowkey
  DROP TABLE IF EXISTS spatial_index_dml;
  CREATE TABLE spatial_index_dml (i1 int, i2 int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY (i1, i2));
  CREATE INDEX idx ON spatial_index_dml (g);
  SET @v0=ST_GEOMFROMTEXT('POINT(0 0)', 4326);
  SET @v1=ST_GEOMFROMTEXT('POINT(1 1)', 4326);
  INSERT INTO spatial_index_dml VALUES (1, 2, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  UPDATE spatial_index_dml SET g=ST_GEOMFROMTEXT('POINT(1 2)', 4326) WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  SELECT /*+INDEX(spatial_index_dml idx)*/ g FROM spatial_index_dml WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(1 1)', 4326));

  ## 3.3 Delete row
  # 3.3.1 one column for rowkey
  DROP TABLE IF EXISTS spatial_index_dml;
  CREATE TABLE spatial_index_dml (i int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY (i));
  CREATE INDEX idx ON spatial_index_dml (g);
  SET @v0=ST_GEOMFROMTEXT('POINT(0 0)', 4326);
  INSERT INTO spatial_index_dml VALUES (1, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  DELETE FROM spatial_index_dml WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  SELECT /*+INDEX(spatial_index_dml idx)*/ g FROM spatial_index_dml WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));

  # 3.3.2 more than one column for rowkey
  DROP TABLE IF EXISTS spatial_index_dml;
  CREATE TABLE spatial_index_dml (i1 int, i2 int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY (i1, i2));
  CREATE INDEX idx ON spatial_index_dml (g);
  SET @v0=ST_GEOMFROMTEXT('POINT(0 0)', 4326);
  INSERT INTO spatial_index_dml VALUES (1, 2, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  DELETE FROM spatial_index_dml WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  SELECT /*+INDEX(spatial_index_dml idx)*/ g FROM spatial_index_dml WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
}


### 4. Test for spatial index base query.
if (1) {
  --disable_warnings
  DROP TABLE IF EXISTS spatial_index_query;
  --enable_warnings
  SET @v=ST_GEOMFROMTEXT('POINT(0 0)', 4326);
  ## 4.1 INTERSECTS
  # 4.1.1 Point & point
  CREATE TABLE spatial_index_query (i int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY(i));
  CREATE INDEX idx ON spatial_index_query (g);
  INSERT INTO spatial_index_query VALUES (0, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  INSERT INTO spatial_index_query VALUES (1, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  INSERT INTO spatial_index_query VALUES (2, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  SELECT /*+INDEX(spatial_index_query idx)*/ st_astext(g) FROM spatial_index_query WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));

  # 4.1.1 Polygon & point
  DROP TABLE IF EXISTS spatial_index_query;
  CREATE TABLE spatial_index_query (i int, g GEOMETRY NOT NULL SRID 4326);
  CREATE INDEX idx ON spatial_index_query (g);
  SET @v=ST_GEOMFROMTEXT('POINT(1 1)', 4326);
  INSERT INTO spatial_index_query VALUES (1, ST_GEOMFROMTEXT('POINT(1 1)', 4326));
  SET @cart_py = ST_GeomFromText('POLYGON((0 0, 10 0, 10 5, 0 5, 0 0))', 4326);
  SELECT /*+INDEX(spatial_index_query idx)*/ st_astext(g) from spatial_index_query where st_intersects(g, ST_GeomFromText('POLYGON((0 0, 10 0, 10 5, 0 5, 0 0))', 4326));
}

### 5. Test for spatial index rebuild. not supported, to fix later
if (1) {
  --disable_warnings
  DROP TABLE IF EXISTS spatial_index_rebuild;
  --enable_warnings

  CREATE TABLE spatial_index_rebuild (i int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY(i));
  SET @v=ST_GEOMFROMTEXT('POINT(0 0)', 4326);
  INSERT INTO spatial_index_rebuild VALUES (0, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  INSERT INTO spatial_index_rebuild VALUES (1, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  INSERT INTO spatial_index_rebuild VALUES (2, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
  CREATE INDEX idx ON spatial_index_rebuild (g);
  SELECT /*+INDEX(spatial_index_rebuild idx)*/ st_astext(g) FROM spatial_index_rebuild WHERE ST_INTERSECTS(g, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
}

#bug fix
--disable_warnings
drop table if exists spatial_index;
--enable_warnings
CREATE TABLE spatial_index (i INT, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY (i),  SPATIAL KEY (g))with column group ( each column);
select i, st_astext(g) from spatial_index where ST_Intersects(g, ST_GEOMFROMTEXT('POINT(2 2)', 4326));

#bugfix: 56294148 & 56301820
--disable_warnings
drop table if exists t1;
--enable_warnings
create table t1(a int,b int);
create index idx1 on t1(a);
SELECT st_astext(a) FROM t1  WHERE st_equals(a, point(7, 7));
explain basic SELECT st_astext(a) FROM t1  WHERE st_equals(a, point(7, 7));
drop table t1;

# bugfix:57212047
drop table if exists spatial_index_dml;
CREATE TABLE spatial_index_dml (i1 int, i2 int, g GEOMETRY NOT NULL SRID 4326, PRIMARY KEY (i1));
INSERT INTO spatial_index_dml VALUES (1, 2, ST_GEOMFROMTEXT('POINT(0 0)', 4326));
CREATE INDEX idx ON spatial_index_dml (g);
alter table spatial_index_dml drop column i2;
select i1, st_astext(g)  from spatial_index_dml;
drop table spatial_index_dml;

# bugfix:57353081
drop table if exists t1;
create table t1 (c1 int primary key,j json, g GEOMETRY NOT NULL SRID 4326, SPATIAL INDEX(g));

insert into t1 values (1,'{"b":2}', ST_GeomFromText('POINT(1 1)', 4326));
insert into t1 values (2, '{"b":2}', ST_GeomFromText('POINT(-1 1)', 4326));
insert into t1 values (3,'{"b":2}',  ST_GeomFromText('POINT(-1 -1)', 4326));
insert into t1 values (4, '{"b":2}', ST_GeomFromText('POINT(1 -1)', 4326));
insert into t1 values (5,'{"b":2}',  ST_GeomFromText('POLYGON((0 0, 1 0, 1 -1, 0 -1, 0 0))', 4326));
insert into t1 values (6, '{"b":2}', ST_GeomFromText('LINESTRING(-1 -1, 3 3)', 4326));
insert into t1 values (7, '{"b":2}', ST_GeomFromText('POLYGON((1 1, -1 1, -1 -1, 1 -1, 1 1))', 4326));
insert into t1 values (8,'{"b":2}',  ST_GeomFromText('POLYGON((0 0, 0 2, 2 2, 2 0, 0 0))', 4326));

explain basic SELECT /*+ index(t1 g) */ * from t1 where  ST_INTERSECTS(g,ST_GeomFromText('POINT(-1 -1)', 4326));
alter table t1 drop column j;
explain basic SELECT /*+ index(t1 g) */ * from t1 where  ST_INTERSECTS(g,ST_GeomFromText('POINT(-1 -1)', 4326));
alter table t1 add c0 char(20) before g;
explain basic SELECT /*+ index(t1 g) */ * from t1 where  ST_INTERSECTS(g,ST_GeomFromText('POINT(-1 -1)', 4326));
alter table t1 modify c0 varchar(20);
explain basic SELECT /*+ index(t1 g) */ * from t1 where  ST_INTERSECTS(g,ST_GeomFromText('POINT(-1 -1)', 4326));
drop table t1;

# bugfix:58073834
drop table if exists tab;
CREATE TABLE tab(c1 int NOT NULL PRIMARY KEY,c2 POINT NOT NULL,c3 LINESTRING NOT NULL,c4 POLYGON NOT NULL,c5 GEOMETRY NOT NULL);
CREATE INDEX index3 ON tab(c3) ;
ALTER TABLE tab CHANGE COLUMN c3 c33 LINESTRING;
drop table tab;