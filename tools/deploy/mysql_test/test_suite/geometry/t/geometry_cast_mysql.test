#owner: ht353245
#owner group: shenzhen
--echo # ----------------------------------------------------------------------
--echo # Base test of geometry cast.
--echo # ----------------------------------------------------------------------
--source mysql_test/test_suite/geometry/t/import_default_srs_data_mysql.inc

  ###############################################################################
  #                                                                             #
  # CAST(... AS POINT) allows casting geometries of type                        #
  # Point, Multipoint and Geometrycollection                                    #
  # to type Point.                                                              #
  #                                                                             #
  ###############################################################################

  --echo ########################################
  --echo # Requirement F-7a:                    #
  --echo # CAST(point AS POINT)                 #
  --echo ########################################
  --echo #

  --echo # Casting from POINT to POINT is always allowed.
  --echo # Must return Point.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS POINT));
  --echo # Must return 1.
  SELECT ST_ASTEXT(ST_GEOMFROMTEXT('POINT(1 1)')), ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS POINT));
  --echo #

  --echo ########################################
  --echo # Requirement F-7b:                    #
  --echo # CAST(multipoint AS POINT)            #
  --echo ########################################
  --echo #

  --echo # Casting from MULTIPOINT with only one point to POINT is allowed.
  --echo # Must return Point.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((1 1))') AS POINT));
  --echo #

  --echo # Casting from MULTIPOINT with multiple points to POINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((1 1), (2 2))') AS POINT));
  --echo #

  --echo ########################################
  --echo # Requirement F-7c:                    #
  --echo # CAST(geometrycollection AS POINT)    #
  --echo ########################################
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with only one point to POINT is allowed.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(1 1))') AS POINT));
  --echo #

  --echo # Casting from empty GEOMETRYCOLLECTION to POINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION()') AS POINT));
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with multiple points to POINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(1 1), POINT(2 2))') AS POINT));
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with not only points to POINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(1 1), GEOMETRYCOLLECTION())') AS POINT));
  --echo #

  --echo ########################################
  --echo # Requirement F-7d:                    #
  --echo # Disallowed casts to POINT            #
  --echo ########################################
  --echo #

  --echo # Casting from LINESTRING to POINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)') AS POINT));
  --echo #

  --echo # Casting from POLYGON to POINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((1 1, 2 2, 3 3, 1 1))') AS POINT));
  --echo #

  --echo # Casting from MULTILINESTRING to POINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 2 2), (1 1, 2 2))') AS POINT));
  --echo #

  --echo # Casting from MULTIPOLYGON to POINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((1 1, 2 2, 3 3, 1 1)), ((1 1, 2 2, 3 3, 1 1)))') AS POINT));
  --echo #

  --echo #############################################
  --echo # Testing result of WKT input               #
  --echo #############################################
  --echo #

  --echo # Casting from ST_GEOMFROMTEXT(<wkt>) to POINT must return expected point.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS POINT));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((2 2))') AS POINT));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(3 3))') AS POINT));
  --echo #

  --echo #############################################
  --echo # Testing result of user variable input     #
  --echo #############################################
  --echo #

  SET @point = ST_GEOMFROMTEXT('POINT(1 1)');
  SET @multipoint = ST_GEOMFROMTEXT('MULTIPOINT((2 2))');
  SET @geomcollection = ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(3 3))');
  --echo #

  --echo # Casting from geometry in user variable to POINT must return expected point.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS POINT));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((2 2))') AS POINT));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(3 3))') AS POINT));
  --echo #

  --echo #############################################
  --echo # Testing result of table column input      #
  --echo #############################################
  --echo #

  --disable_warnings
  drop table if exists gis_point_castable;
  --enable_warnings
  CREATE TABLE gis_point_castable (fid INTEGER NOT NULL PRIMARY KEY, g GEOMETRY);
  INSERT INTO gis_point_castable values
  (101, ST_GEOMFROMTEXT('POINT(1 1)')),
  (102, ST_GEOMFROMTEXT('MULTIPOINT((2 2))')),
  (103, ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(3 3))'));
  --echo #

  --echo # Casting from geometry column to POINT must return expected point.
  SELECT ST_ASTEXT(CAST(g AS POINT)) FROM gis_point_castable;
  --echo #

  --echo # Cleanup.
  DROP TABLE gis_point_castable;

  ###############################################################################
  #                                                                             #
  # CAST(... AS LINESTRING) allows casting geometries of type                   #
  # LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING and GEOMETRYCOLLECTION     #
  # to type LINESTRING.                                                         #
  #                                                                             #
  ###############################################################################

  --echo ############################################
  --echo # Requirement F-8a:                        #
  --echo # CAST(linestring AS LINESTRING)           #
  --echo ############################################
  --echo #

  --echo # Casting from LINESTRING to LINESTRING is always allowed.
  --echo # Must return Linestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)') AS LINESTRING));
  --echo #

  --echo #
  --echo ############################################
  --echo # Requirement F-8b:                        #
  --echo # CAST(polygon AS LINESTRING)              #
  --echo ############################################
  --echo #

  --echo # Casting from POLYGON with only exterior ring to LINESTRING is allowed.
  --echo # Must return Linestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((1 1, 2 2, 3 3, 1 1))') AS LINESTRING));
  --echo #

  --echo # Casting from POLYGON with multiple rings to LINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((1 1, 2 2, 3 3, 1 1), (4 4, 5 5, 6 6, 4 4))') AS LINESTRING));

  --echo #
  --echo ############################################
  --echo # Requirement F-8c:                        #
  --echo # CAST(multipoint AS LINESTRING)           #
  --echo ############################################
  --echo #

  --echo # Casting from MULTIPOINT with two or more points to LINESTRING is allowed.
  --echo # Must return Linestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((1 1), (2 2))') AS LINESTRING));
  --echo #

  --echo # Casting from MULTIPOINT with only one point to LINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((1 1))') AS LINESTRING));

  --echo #
  --echo ############################################
  --echo # Requirement F-8d:                        #
  --echo # CAST(multilinestring AS LINESTRING)      #
  --echo ############################################
  --echo #

  --echo # Casting from MULTILINESTRING with only one Linestring to LINESTRING is allowed.
  --echo # Must return Linestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 2 2))') AS LINESTRING));
  --echo #

  --echo # Casting from MULTILINESTRING with multiple Linestrings to LINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 2 2), (3 3, 4 4))') AS LINESTRING));

  --echo #
  --echo ############################################
  --echo # Requirement F-8e:                        #
  --echo # CAST(geometrycollection AS LINESTRING)   #
  --echo ############################################
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with only one Linestring to LINESTRING is allowed.
  --echo # Must return Linestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2))') AS LINESTRING));
  --echo #

  --echo # Casting from empty GEOMETRYCOLLECTION to LINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION()') AS LINESTRING));
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with multiple Linestrings to LINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2), LINESTRING(3 3, 4 4))') AS LINESTRING));
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with other geometries than Linestrings to LINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2), GEOMETRYCOLLECTION())') AS LINESTRING));

  --echo #
  --echo ############################################
  --echo # Requirement F-8d:                        #
  --echo # Disallowed casts to LINESTRING           #
  --echo ############################################
  --echo #

  --echo # Casting from POINT to LINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS LINESTRING));
  --echo #

  --echo # Casting from MULTIPOLYGON to LINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((1 1, 2 2, 3 3, 1 1)))') AS LINESTRING));
  --echo #

  --echo #############################################
  --echo # Testing result of WKT input               #
  --echo #############################################
  --echo #

  --echo # Casting from ST_GEOMFROMTEXT(<wkt>) to LINESTRING must return expected linestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)') AS LINESTRING));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3))') AS LINESTRING));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((5 5), (6 6))') AS LINESTRING));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((7 7, 8 8))') AS LINESTRING));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(9 9, 10 10))') AS LINESTRING));
  --echo #

  --echo #############################################
  --echo # Testing result of user variable input     #
  --echo #############################################
  --echo #

  SET @linestring = ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)');
  SET @polygon = ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3))');
  SET @multipoint = ST_GEOMFROMTEXT('MULTIPOINT((5 5), (6 6))');
  SET @multilinestring = ST_GEOMFROMTEXT('MULTILINESTRING((7 7, 8 8))');
  SET @geomcollection = ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(9 9, 10 10))');
  --echo #

  --echo # Casting from geometry in user variable to LINESTRING must return expected linestring.
  SELECT ST_ASTEXT(CAST(@linestring AS LINESTRING));
  SELECT ST_ASTEXT(CAST(@multipoint AS LINESTRING));
  SELECT ST_ASTEXT(CAST(@multilinestring AS LINESTRING));
  SELECT ST_ASTEXT(CAST(@geomcollection AS LINESTRING));
  --echo #

  --echo #############################################
  --echo # Testing result of table column input      #
  --echo #############################################
  --echo #

  --disable_warnings
  drop table if exists gis_linestring_castable;
  --enable_warnings
  CREATE TABLE gis_linestring_castable (fid INTEGER NOT NULL PRIMARY KEY, g GEOMETRY);
  INSERT INTO gis_linestring_castable VALUES
  (101, ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)')),
  (102, ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3))')),
  (103, ST_GEOMFROMTEXT('MULTIPOINT((5 5), (6 6))')),
  (104, ST_GEOMFROMTEXT('MULTILINESTRING((7 7, 8 8))')),
  (105, ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(9 9, 10 10))'));
  --echo #

  --echo # Casting from geometry column to LINESTRING must return expected linestring.
  SELECT ST_ASTEXT(CAST(g AS LINESTRING)) FROM gis_linestring_castable;
  --echo #

  --echo # Cleanup.
  DROP TABLE gis_linestring_castable;

  ###############################################################################
  #                                                                             #
  # CAST(... AS POLYGON) allows casting geometries of type                      #
  # LINESTRING, POLYGON, MULTILINESTRING, MULTIPOLYGON and GEOMETRYCOLLECTION   #
  # to type POLYGON.                                                            #
  #                                                                             #
  ###############################################################################

  --echo ########################################
  --echo # Requirement F-9a:                    #
  --echo # CAST(linestring AS POLYGON)          #
  --echo ########################################
  --echo #

  --echo # Casting from LINESTRING that is a correctly oriented linearring (counter clockwise) to POLYGON is allowed.
  --echo # Must return POLYGON.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 4 1, 4 4, 1 4, 1 1)') AS POLYGON));
  --echo #

  --echo # Casting from LINESTRING that is not a linearring to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 4 1, 4 4, 1 4)') AS POLYGON));
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 4 4, 1 1)') AS POLYGON));
  --echo #

  --echo # Casting from LINESTRING that is not a counter clockwise oriented linearring to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4033
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 1 4, 4 4, 4 1, 1 1)') AS POLYGON));
  --echo #

  --echo ########################################
  --echo # Requirement F-9b:                    #
  --echo # CAST(polygon AS POLYGON)             #
  --echo ########################################
  --echo #

  --echo # Casting from POLYGON to POLYGON is always allowed.
  --echo # Must return POLYGON. 
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((1 1, 4 1, 4 4, 1 4, 1 1), (2 2, 2 3, 3 3, 3 2, 2 2))') AS POLYGON));
  --echo #

  --echo # Cast may reverse direction of some rings in polygon if
  --echo # one or more rings are oriented the wrong way. This is still the same polygon.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((1 1, 1 4, 4 4, 4 1, 1 1), (2 2, 3 2, 3 3, 2 3, 2 2))') AS POLYGON));
  --echo #

  --echo #
  --echo ########################################
  --echo # Requirement F-9c:                    #
  --echo # CAST(multilinestring AS POLYGON)     #
  --echo ########################################
  --echo #

  --echo # Casting from MULTILINESTRING with only correctly oriented linearrings (first ring counter clockwise, remaining rings clockwise) to POLYGON is allowed.
  --echo # Must return POLYGON.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 4 1, 4 4, 1 4, 1 1), (5 5, 5 6, 6 6, 6 5, 5 5))') AS POLYGON));
  --echo #

  --echo # Casting from MULTILINESTRING with not only linearrings to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 4 1, 4 4, 1 4, 1 1), (5 5, 5 6, 6 6, 6 5))') AS POLYGON));
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 4 4, 1 1), (5 5, 5 6, 6 6, 6 5, 5 5))') AS POLYGON));
  --echo #

  --echo # Casting from MULTILINESTRING with not only correctly oriented linearrings to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4033
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 4 1, 4 4, 1 4, 1 1), (5 5, 6 5, 6 6, 5 6, 5 5))') AS POLYGON));
  --echo #

  --echo ########################################
  --echo # Requirement F-9d:                    #
  --echo # CAST(multipolygon AS POLYGON)        #
  --echo ########################################
  --echo #

  --echo # Casting from MULTIPOLYGON with only one polygon to POLYGON is allowed.
  --echo # Must return POLYGON.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((1 1, 4 1, 4 4, 1 4, 1 1)))') AS POLYGON));
  --echo #

  --echo # Casting from MULTIPOLYGON with multiple polygons to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((1 1, 4 1, 4 4, 1 4, 1 1)), ((5 5, 5 6, 6 6, 6 5, 5 5)))') AS POLYGON));

  --echo #
  --echo ########################################
  --echo # Requirement F-9e:                    #
  --echo # CAST(geometrycollection AS POLYGON)  #
  --echo ########################################
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with only one polygon to POLYGON is allowed.
  --echo # Must return POLYGON.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((1 1, 4 1, 4 4, 1 4, 1 1)))') AS POLYGON));
  --echo #

  --echo # Casting from empty GEOMETRYCOLLECTION to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION()') AS POLYGON));
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with multiple polygons to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((1 1, 4 1, 4 4, 1 4, 1 1)), POLYGON((5 5, 5 6, 6 6, 6 5, 5 5)))') AS POLYGON));
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with not only polygons to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((1 1, 4 1, 4 4, 1 4, 1 1)), GEOMETRYCOLLECTION())') AS POLYGON));

  --echo #
  --echo ########################################
  --echo # Requirement F-9f:                    #
  --echo # Disallowed casts to POLYGON          #
  --echo ########################################
  --echo #

  --echo # Casting from POINT to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS POLYGON));
  --echo #

  --echo # Casting from MULTIPOINT to POLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((1 1), (2 2))') AS POLYGON));

  --echo #
  --echo #############################################
  --echo # Testing result of WKT input               #
  --echo #############################################
  --echo #

  --echo # Casting from ST_GEOMFROMTEXT(<WKT>) to POLYGON must return expected polygon.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 2 1, 2 2, 1 2, 1 1)') AS POLYGON));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3), (5 5, 5 6, 6 6, 6 5, 5 5))') AS POLYGON));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((7 7, 8 7, 8 8, 7 8, 7 7), (9 9, 9 10, 10 10, 10 9, 9 9))') AS POLYGON));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((11 11, 12 11, 12 12, 11 12, 11 11)))') AS POLYGON));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((13 13, 14 13, 14 14, 13 14, 13 13)))') AS POLYGON));
  --echo #

  --echo #############################################
  --echo # Testing result of user variable input     #
  --echo #############################################
  --echo #

  SET @linestring = ST_GEOMFROMTEXT('LINESTRING(1 1, 2 1, 2 2, 1 2, 1 1)');
  SET @polygon = ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3), (5 5, 5 6, 6 6, 6 5, 5 5))');
  SET @multilinestring = ST_GEOMFROMTEXT('MULTILINESTRING((7 7, 8 7, 8 8, 7 8, 7 7), (9 9, 9 10, 10 10, 10 9, 9 9))');
  SET @multipolygon = ST_GEOMFROMTEXT('MULTIPOLYGON(((11 11, 12 11, 12 12, 11 12, 11 11)))');
  SET @geomcollection = ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((13 13, 14 13, 14 14, 13 14, 13 13)))');
  --echo #

  --echo # Casting from geometry in user variable to POLYGON must return expected polygon.
  SELECT ST_ASTEXT(CAST(@linestring AS POLYGON));
  SELECT ST_ASTEXT(CAST(@polygon AS POLYGON));
  SELECT ST_ASTEXT(CAST(@multilinestring AS POLYGON));
  SELECT ST_ASTEXT(CAST(@multipolygon AS POLYGON));
  SELECT ST_ASTEXT(CAST(@geomcollection AS POLYGON));
  --echo #

  --echo #############################################
  --echo # Testing result of table column input      #
  --echo #############################################
  --echo #

  --disable_warnings
  drop table if exists gis_polygon_castable;
  --enable_warnings
  CREATE TABLE gis_polygon_castable (fid INTEGER NOT NULL PRIMARY KEY, g GEOMETRY);
  INSERT INTO gis_polygon_castable VALUES
  (101, ST_GEOMFROMTEXT('LINESTRING(1 1, 2 1, 2 2, 1 2, 1 1)')),
  (102, ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3), (5 5, 5 6, 6 6, 6 5, 5 5))')),
  (103, ST_GEOMFROMTEXT('MULTILINESTRING((7 7, 8 7, 8 8, 7 8, 7 7), (9 9, 9 10, 10 10, 10 9, 9 9))')),
  (104, ST_GEOMFROMTEXT('MULTIPOLYGON(((11 11, 12 11, 12 12, 11 12, 11 11)))')),
  (105, ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((13 13, 14 13, 14 14, 13 14, 13 13)))'));
  --echo #

  --echo # Casting from geometry column to POLYGON must return expected polygon.
  SELECT ST_ASTEXT(CAST(g AS POLYGON)) FROM gis_polygon_castable;
  --echo #

  --echo # Cleanup.
  DROP TABLE gis_polygon_castable;

  ###############################################################################
  #                                                                             #
  # CAST(... AS MULTIPOINT) allows casting geometries of type                   #
  # Point, Linestring, Multipoint and Geometrycollection                        #
  # to type Point.                                                              #
  #                                                                             #
  ###############################################################################

  --echo ###########################################
  --echo # Requirement F-10a:                      #
  --echo # CAST(point AS MULTIPOINT)               #
  --echo ###########################################
  --echo #

  --echo # Casting from POINT to MULTIPOINT is always allowed.
  --echo # Must return MULTIPOINT.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS MULTIPOINT));
  --echo #

  --echo ###########################################
  --echo # Requirement F-10b:                      #
  --echo # CAST(linestring AS MULTIPOINT)          #
  --echo ###########################################
  --echo #

  --echo # Casting from LINESTRING to MULTIPOINT is always allowed.
  --echo # Must return MULTIPOINT.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)') AS MULTIPOINT));
  --echo #

  --echo ###########################################
  --echo # Requirement F-10c:                      #
  --echo # CAST(multipoint AS MULTIPOINT)          #
  --echo ###########################################
  --echo #

  --echo # Casting from MULTIPOINT to MULTIPOINT is always allowed.
  --echo # Must return MULTIPOINT.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((1 1), (2 2))') AS MULTIPOINT));
  --echo #

  --echo ###########################################
  --echo # Requirement F-10d:                      #
  --echo # CAST(geometrycollection AS MULTIPOINT)  #
  --echo ###########################################
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with only points to MULTIPOINT is allowed.
  --echo # Must return MULTIPOINT.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(1 1), POINT(2 2))') AS MULTIPOINT));
  --echo #

  --echo # Casting from empty GEOMETRYCOLLECTION to MULTIPOINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION()') AS MULTIPOINT));
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with not only points to MULTIPOINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(1 1), POINT(2 2), GEOMETRYCOLLECTION())') AS MULTIPOINT));
  --echo #

  --echo ###########################################
  --echo # Requirement F-10e:                      #
  --echo # Disallowed casts to MULTIPOINT          #
  --echo ###########################################
  --echo #

  --echo # Casting from POLYGON to MULTIPOINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((1 1, 4 1, 4 4, 1 4, 1 1), (2 2, 2 3, 3 3, 3 2, 2 2))') AS MULTIPOINT));
  --echo #

  --echo # Casting from MULTILINESTRING to MULTIPOINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 2 2), (3 3, 4 4))') AS MULTIPOINT));
  --echo #

  --echo # Casting from MULTIPOLYGON to MULTIPOINT is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((1 1, 4 1, 4 4, 1 4, 1 1)), ((5 5, 5 6, 6 6, 6 5, 5 5)))') AS MULTIPOINT));
  --echo #

  --echo #############################################
  --echo # Testing result of WKT input               #
  --echo #############################################
  --echo #

  --echo # Casting from ST_GEOMFROMTEXT(<WKT>) to MULTIPOINT must return expected multipoint.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS MULTIPOINT));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(2 2, 3 3)') AS MULTIPOINT));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((4 4), (5 5))') AS MULTIPOINT));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(6 6), POINT(7 7))') AS MULTIPOINT));
  --echo #

  --echo #############################################
  --echo # Testing result of user variable input     #
  --echo #############################################
  --echo #

  SET @point = ST_GEOMFROMTEXT('POINT(1 1)');
  SET @linestring = ST_GEOMFROMTEXT('LINESTRING(2 2, 3 3)');
  SET @multipoint = ST_GEOMFROMTEXT('MULTIPOINT((4 4), (5 5))');
  SET @geomcollection = ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(6 6), POINT(7 7))');
  --echo #

  --echo # Casting from geometry in user variable to MULTIPOINT must return expected multipoint.
  SELECT ST_ASTEXT(CAST(@point AS MULTIPOINT));
  SELECT ST_ASTEXT(CAST(@linestring AS MULTIPOINT));
  SELECT ST_ASTEXT(CAST(@multipoint AS MULTIPOINT));
  SELECT ST_ASTEXT(CAST(@geomcollection AS MULTIPOINT));
  --echo #

  --echo #############################################
  --echo # Testing result of table column input      #
  --echo #############################################
  --echo #

  --disable_warnings
  drop table if exists gis_multipoint_castable;
  --enable_warnings
  CREATE TABLE gis_multipoint_castable (fid INTEGER NOT NULL PRIMARY KEY, g GEOMETRY);
  INSERT INTO gis_multipoint_castable VALUES
  (101, ST_GEOMFROMTEXT('POINT(1 1)')),
  (102, ST_GEOMFROMTEXT('LINESTRING(2 2, 3 3)')),
  (103, ST_GEOMFROMTEXT('MULTIPOINT((4 4), (5 5))')),
  (104, ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(6 6), POINT(7 7))'));
  --echo #

  --echo # Casting from geometry column to MULTIPOINT must return expected multipoint.
  SELECT ST_ASTEXT(CAST(g AS MULTIPOINT)) FROM gis_multipoint_castable;
  --echo #

  --echo # Cleanup.
  DROP TABLE gis_multipoint_castable;

  ###############################################################################
  #                                                                             #
  # CAST(... AS MULTILINESTRING) allows casting geometries of type              #
  # LINESTRING, POLYGON, MULTILINESTRING, MULTIPOLYGON and GEOMETRYCOLLECTION   #
  # to type MULTILINESTRING.                                                    #
  #                                                                             #
  ###############################################################################

  --echo #################################################
  --echo # Requirement F-11a:                            #
  --echo # CAST(linestring AS MULTILINESTRING)           #
  --echo #################################################
  --echo #

  --echo # Casting from LINESTRING to MULTILINESTRING is always allowed.
  --echo # Must return Multilinestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)') AS MULTILINESTRING));
  --echo #

  --echo #################################################
  --echo # Requirement F-11b:                            #
  --echo # CAST(polygon AS MULTILINESTRING)              #
  --echo #################################################
  --echo #

  --echo # Casting from POLYGON to MULTILINESTRING is always allowed.
  --echo # Must return multilinestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((1 1, 4 1, 4 4, 1 4, 1 1), (2 2, 2 3, 3 3, 3 2, 2 2))') AS MULTILINESTRING));
  --echo #

  --echo #################################################
  --echo # Requirement F-11c:                            #
  --echo # CAST(multilinestring AS MULTILINESTRING)      #
  --echo #################################################
  --echo #

  --echo # Casting from MULTILINESTRING to MULTILINESTRING is always allowed.
  --echo # Must return Multilinestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 2 2), (3 3, 4 4))') AS MULTILINESTRING));
  --echo #

  --echo #
  --echo #################################################
  --echo # Requirement F-11d:                            #
  --echo # CAST(multipolygon AS MULTILINESTRING)         #
  --echo #################################################
  --echo #

  --echo # Casting from MULTIPOLYGON with only exterior ring polygons to MULTILINESTRING is allowed.
  --echo # Must return Multilinestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((1 1, 2 1, 2 2, 1 2, 1 1)), ((3 3, 4 3, 4 4, 3 4, 3 3)))') AS MULTILINESTRING));
  --echo #

  --echo # Casting from MULTIPOLYGON with interior-ring polygons to MULTILINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((1 1, 4 1, 4 4, 1 4, 1 1), (2 2, 2 3, 3 3, 3 2, 2 2)), ((1 1, 2 1, 2 2, 1 2, 1 1)))') AS MULTILINESTRING));


  --echo #
  --echo #################################################
  --echo # Requirement F-11e:                            #
  --echo # CAST(geometrycollection AS MULTILINESTRING)   #
  --echo #################################################
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with only linestrings to MULTILINESTRING is allowed.
  --echo # Must return MULTILINESTRING.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2), LINESTRING(3 3, 4 4))') AS MULTILINESTRING));
  --echo #

  --echo # Casting from empty GEOMETRYCOLLECTION to MULTILINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION()') AS MULTILINESTRING));
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with not only linestrings to MULTILINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(1 1, 2 2), LINESTRING(3 3, 4 4), GEOMETRYCOLLECTION())') AS MULTILINESTRING));
  --echo #

  --echo ############################################
  --echo # Requirement F-11f:                       #
  --echo # Disallowed casts to MULTILINESTRING      #
  --echo ############################################
  --echo #

  --echo # Casting from POINT to MULTILINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS MULTILINESTRING));
  --echo #

  --echo # Casting from MULTIPOINT to MULTILINESTRING is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((1 1), (2 2))') AS MULTILINESTRING));
  --echo #

  --echo #############################################
  --echo # Testing result of WKT input               #
  --echo #############################################
  --echo #

  --echo # Casting from ST_GEOMFROMTEXT(<WKT>) to MULTILINESTRING must return expected linestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)') AS MULTILINESTRING));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3))') AS MULTILINESTRING));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((5 5, 6 6), (7 7, 8 8))') AS MULTILINESTRING));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((9 9, 10 9, 10 10, 9 10, 9 9)), ((11 11, 12 11, 12 12, 12 12, 11 11)))') AS MULTILINESTRING));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(13 13, 14 14), LINESTRING(15 15, 16 16))') AS MULTILINESTRING));
  --echo #

  --echo #############################################
  --echo # Testing result of user variable input     #
  --echo #############################################
  --echo #

  SET @linestring = ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)');
  SET @polygon = ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3))');
  SET @multilinestring = ST_GEOMFROMTEXT('MULTILINESTRING((5 5, 6 6), (7 7, 8 8))');
  SET @multipolygon = ST_GEOMFROMTEXT('MULTIPOLYGON(((9 9, 10 9, 10 10, 9 10, 9 9)), ((11 11, 12 11, 12 12, 12 12, 11 11)))');
  SET @geomcollection = ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(13 13, 14 14), LINESTRING(15 15, 16 16))');
  --echo #

  --echo # Casting from geometry in user variable to MULTILINESTRING must return expected multilinestring.
  SELECT ST_ASTEXT(CAST(@linestring AS MULTILINESTRING));
  SELECT ST_ASTEXT(CAST(@polygon AS MULTILINESTRING));
  SELECT ST_ASTEXT(CAST(@multilinestring AS MULTILINESTRING));
  SELECT ST_ASTEXT(CAST(@multipolygon AS MULTILINESTRING));
  SELECT ST_ASTEXT(CAST(@geomcollection AS MULTILINESTRING));
  --echo #

  --echo #############################################
  --echo # Testing result of table column input      #
  --echo #############################################
  --echo #

  --disable_warnings
  drop table if exists gis_multilinestring_castable;
  --enable_warnings
  CREATE TABLE gis_multilinestring_castable (fid INTEGER NOT NULL PRIMARY KEY, g GEOMETRY);
  INSERT INTO gis_multilinestring_castable VALUES
  (101, ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)')),
  (102, ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3))')),
  (103, ST_GEOMFROMTEXT('MULTILINESTRING((5 5, 6 6), (7 7, 8 8))')),
  (104, ST_GEOMFROMTEXT('MULTIPOLYGON(((9 9, 10 9, 10 10, 9 10, 9 9)), ((11 11, 12 11, 12 12, 12 12, 11 11)))')),
  (105, ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(LINESTRING(13 13, 14 14), LINESTRING(15 15, 16 16))'));
  --echo #

  --echo # Casting from geometry column to MULTILINESTRING must return expected multilinestring.
  SELECT ST_ASTEXT(CAST(g AS MULTILINESTRING)) FROM gis_multilinestring_castable;
  --echo #

  --echo # Cleanup.
  DROP TABLE gis_multilinestring_castable;

  ###############################################################################
  #                                                                             #
  # CAST(... AS MULTIPOLYGON) allows casting geometries of type                 #
  # POLYGON, MULTILINESTRING, MULTIPOLYGON and GEOMETRYCOLLECTION               #
  # to type MULTIPOLYGON.                                                       #
  #                                                                             #
  ###############################################################################

  --echo #################################################
  --echo # Requirement F-12a:                            #
  --echo # CAST(polygon AS MULTIPOLYGON)                 #
  --echo #################################################
  --echo #

  --echo # Casting from POLYGON to MULTIPOLYGON is always allowed.
  --echo # Must return multipolygon.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((1 1, 4 1, 4 4, 1 4, 1 1), (2 2, 2 3, 3 3, 3 2, 2 2))') AS MULTIPOLYGON));
  --echo #

  --echo #################################################
  --echo # Requirement F-12b:                            #
  --echo # CAST(multilinestring AS MULTIPOLYGON)         #
  --echo #################################################
  --echo #

  --echo # Casting from MULTILINESTRING with only correctly oriented linearrings (counter clockwise) to MULTIPOLYGON is allowed.
  --echo # Must return multipolygon.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 4 1, 4 4, 1 4, 1 1), (5 5, 6 5, 6 6, 5 6, 5 5))') AS MULTIPOLYGON));
  --echo #

  --echo # Casting from MULTILINESTRING with not only linearrings to MULTIPOLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 4 1, 4 4, 1 4, 1 1), (5 5, 5 6, 6 6, 6 5))') AS MULTIPOLYGON));
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 4 4, 1 1), (5 5, 5 6, 6 6, 6 5, 5 5))') AS MULTIPOLYGON));
  --echo #

  --echo # Casting from MULTILINESTRING with not only correctly oriented linearrings to MULTIPOLYGON is not allowed.
  --echo # Must raise error.
  --error 4033
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 4 1, 4 4, 1 4, 1 1), (5 5, 5 6, 6 6, 6 5, 5 5))') AS MULTIPOLYGON));
  --echo #

  --echo ##############################################
  --echo # Requirement F-12c:                         #
  --echo # CAST(multipolygon AS MULTIPOLYGON)         #
  --echo ##############################################
  --echo #

  --echo # Casting from MULTIPOLYGON to MULTIPOLYGON is always allowed.
  --echo # Must return Multipolygon.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((1 1, 4 1, 4 4, 1 4, 1 1)), ((5 5, 5 6, 6 6, 6 5, 5 5)))') AS MULTIPOLYGON));
  --echo #

  --echo ##############################################
  --echo # Requirement F-12d:                         #
  --echo # CAST(geometrycollection AS MULTIPOLYGON)   #
  --echo ##############################################
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with only polygons to MULTIPOLYGON is allowed.
  --echo # Must return Multipolygon.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((1 1, 4 1, 4 4, 1 4, 1 1)), POLYGON((5 5, 6 5, 6 6, 5 6, 5 5)))') AS MULTIPOLYGON));
  --echo #

  --echo # Casting from empty GEOMETRYCOLLECTION to MULTIPOLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION()') AS MULTIPOLYGON));
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION with not only polygons to MULTIPOLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((1 1, 4 1, 4 4, 1 4, 1 1)), POLYGON((5 5, 6 5, 6 6, 5 6, 5 5)), GEOMETRYCOLLECTION())') AS MULTIPOLYGON));
  --echo #

  --echo ############################################
  --echo # Requirement F-12e:                       #
  --echo # Disallowed casts to MULTIPOLYGON         #
  --echo ############################################
  --echo #

  --echo # Casting from POINT to MULTIPOLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS MULTIPOLYGON));
  --echo #

  --echo # Casting from LINESTRING to MULTIPOLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)') AS MULTIPOLYGON));
  --echo #

  --echo # Casting from MULTIPOINT to MULTIPOLYGON is not allowed.
  --echo # Must raise error.
  --error 4032
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((1 1), (2 2))') AS MULTIPOLYGON));
  --echo #

  --echo #############################################
  --echo # Testing result of WKT input               #
  --echo #############################################
  --echo #

  --echo # Casting from ST_GEOMFROMTEXT(<WKT>) to MULTIPOLYGON must return expected linestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3))') AS MULTIPOLYGON));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((5 5, 6 5, 6 6, 5 6, 5 5), (7 7, 8 7, 8 8, 7 8, 7 7))') AS MULTIPOLYGON));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((9 9, 10 9, 10 10, 9 10, 9 9)), ((11 11, 12 11, 12 12, 12 12, 11 11)))') AS MULTIPOLYGON));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((13 13, 14 13, 14 14, 13 14, 13 13)), POLYGON((15 15, 16 15, 16 16, 15 16, 15 15)))') AS MULTIPOLYGON));
  --echo #

  --echo #############################################
  --echo # Testing result of user variable input     #
  --echo #############################################
  --echo #

  SET @polygon = ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3))');
  SET @multilinestring = ST_GEOMFROMTEXT('MULTILINESTRING((5 5, 6 5, 6 6, 5 6, 5 5), (7 7, 8 7, 8 8, 7 8, 7 7))');
  SET @multipolygon = ST_GEOMFROMTEXT('MULTIPOLYGON(((9 9, 10 9, 10 10, 9 10, 9 9)), ((11 11, 12 11, 12 12, 12 12, 11 11)))');
  SET @geomcollection = ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((13 13, 14 13, 14 14, 13 14, 13 13)), POLYGON((15 15, 16 15, 16 16, 15 16, 15 15)))');
  --echo #

  --echo # Casting from geometry in user variable to MULTIPOLYGON must return expected multipolygon.
  SELECT ST_ASTEXT(CAST(@polygon AS MULTIPOLYGON));
  SELECT ST_ASTEXT(CAST(@multilinestring AS MULTIPOLYGON));
  SELECT ST_ASTEXT(CAST(@multipolygon AS MULTIPOLYGON));
  SELECT ST_ASTEXT(CAST(@geomcollection AS MULTIPOLYGON));
  --echo #

  --echo #############################################
  --echo # Testing result of table column input      #
  --echo #############################################
  --echo #

  --disable_warnings
  drop table if exists gis_multipolygon_castable;
  --enable_warnings
  CREATE TABLE gis_multipolygon_castable (fid INTEGER NOT NULL PRIMARY KEY, g GEOMETRY);
  INSERT INTO gis_multipolygon_castable VALUES
  (101, ST_GEOMFROMTEXT('POLYGON((3 3, 4 3, 4 4, 3 4, 3 3))')),
  (102, ST_GEOMFROMTEXT('MULTILINESTRING((5 5, 6 5, 6 6, 5 6, 5 5), (7 7, 8 7, 8 8, 7 8, 7 7))')),
  (103, ST_GEOMFROMTEXT('MULTIPOLYGON(((9 9, 10 9, 10 10, 9 10, 9 9)), ((11 11, 12 11, 12 12, 12 12, 11 11)))')),
  (104, ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((13 13, 14 13, 14 14, 13 14, 13 13)), POLYGON((15 15, 16 15, 16 16, 15 16, 15 15)))'));
  --echo #

  --echo # Casting from geometry column to MULTIPOLYGON must return expected multipolygon.
  SELECT ST_ASTEXT(CAST(g AS MULTIPOLYGON)) FROM gis_multipolygon_castable;
  --echo #

  --echo # Cleanup.
  DROP TABLE gis_multipolygon_castable;

  ###############################################################################
  #                                                                             #
  # CAST(... AS GEOMETRYCOLLECTION) allows casting geometries of type           #
  # POINT, LINESTRING, POLYGON, MULTIPOINT, MULTILINESTRING, MULTIPOLYGON and   #
  #  GEOMETRYCOLLECTION to type GEOMETRYCOLLECTION.                             #
  #                                                                             #
  ###############################################################################

  --echo ####################################################
  --echo # Requirement F-13a:                               #
  --echo # CAST(... AS GEOMCOLLECTION) must give the same   #
  --echo # same result as CAST(... AS GEOMETRYCOLLECTION)   #
  --echo ####################################################
  --echo #

  --echo # Casting using CAST(... AS GEOMETRYCOLLECTION) must be allowed.
  --echo # Must return geometrycollection.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS GEOMETRYCOLLECTION));
  --echo #

  --echo # Casting using CAST(... AS GEOMCOLLECTION) must be allowed.
  --echo # Must return geometrycollection.
  #SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS GEOMCOLLECTION)));
  --echo #

  --echo ####################################################
  --echo # Requirement F-13b:                               #
  --echo # CAST(point AS GEOMETRYCOLLECTION)                #
  --echo ####################################################
  --echo #

  --echo # Casting from POINT to GEOMETRYCOLLECTION is always allowed.
  --echo # Must return geometrycollection.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS GEOMETRYCOLLECTION));
  --echo #

  --echo ####################################################
  --echo # Requirement F-13c:                               #
  --echo # CAST(linestring AS GEOMETRYCOLLECTION)           #
  --echo ####################################################
  --echo #

  --echo # Casting from LINESTRING to GEOMETRYCOLLECTION is always allowed.
  --echo # Must return geometrycollection.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(1 1, 2 2)') AS GEOMETRYCOLLECTION));
  --echo #

  --echo ####################################################
  --echo # Requirement F-13d:                               #
  --echo # CAST(polygon AS GEOMETRYCOLLECTION)              #
  --echo ####################################################
  --echo #

  --echo # Casting from POLYGON to GEOMETRYCOLLECTION is always allowed.
  --echo # Must return geometrycollection.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((1 1, 4 1, 4 4, 1 4, 1 1), (2 2, 3 2, 3 3, 2 3, 2 2))') AS GEOMETRYCOLLECTION));
  --echo #

  --echo ####################################################
  --echo # Requirement F-13e:                               #
  --echo # CAST(multipoint AS GEOMETRYCOLLECTION)           #
  --echo ####################################################
  --echo #

  --echo # Casting from MULTIPOINT to GEOMETRYCOLLECTION is always allowed.
  --echo # Must return geometrycollection.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((1 1), (2 2))') AS GEOMETRYCOLLECTION));
  --echo #

  --echo ####################################################
  --echo # Requirement F-13f:                               #
  --echo # CAST(multilinestring AS GEOMETRYCOLLECTION)      #
  --echo ####################################################
  --echo #

  --echo # Casting from MULTILINESTRING to GEOMETRYCOLLECTION is always allowed.
  --echo # Must return geometrycollection.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((1 1, 2 2), (3 3, 4 4))') AS GEOMETRYCOLLECTION));
  --echo #

  --echo ####################################################
  --echo # Requirement F-13g:                               #
  --echo # CAST(multipolygon AS GEOMETRYCOLLECTION)         #
  --echo ####################################################
  --echo #

  --echo # Casting from MULTIPOLYGON to GEOMETRYCOLLECTION is always allowed.
  --echo # Must return geometrycollection.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((1 1, 4 1, 4 4, 1 4, 1 1)), ((5 5, 6 5, 6 6, 5 6, 5 5)))') AS GEOMETRYCOLLECTION));
  --echo #

  --echo ####################################################
  --echo # Requirement F-13h:                               #
  --echo # CAST(geometrycollection AS GEOMETRYCOLLECTION)   #
  --echo ####################################################
  --echo #

  --echo # Casting from GEOMETRYCOLLECTION to GEOMETRYCOLLECTION is always allowed.
  --echo # Must return geometrycollection.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(1 1), LINESTRING(2 2, 3 3))') AS GEOMETRYCOLLECTION));
  --echo #

  --echo #############################################
  --echo # Testing result of WKT input               #
  --echo #############################################
  --echo #

  --echo # Casting from ST_GEOMFROMTEXT(<WKT>) to GEOMETRYCOLLECTION must return expected linestring.
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('LINESTRING(2 2, 3 3)') AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POLYGON((4 4, 5 4, 5 5, 4 5, 4 4))') AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOINT((6 6), (7 7))') AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTILINESTRING((8 8, 9 9), (10 10, 11 11))') AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('MULTIPOLYGON(((12 12, 13 12, 13 13, 12 13, 12 12)), ((14 14, 15 14, 15 15, 14 15, 14 14)))') AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(16 16), LINESTRING(17 17, 18 18))') AS GEOMETRYCOLLECTION));
  --echo #

  --echo #############################################
  --echo # Testing result of user variable input     #
  --echo #############################################
  --echo #

  SET @point = ST_GEOMFROMTEXT('POINT(1 1)');
  SET @linestring = ST_GEOMFROMTEXT('LINESTRING(2 2, 3 3)');
  SET @polygon = ST_GEOMFROMTEXT('POLYGON((4 4, 5 4, 5 5, 4 5, 4 4))');
  SET @multipoint = ST_GEOMFROMTEXT('MULTIPOINT((6 6), (7 7))');
  SET @multilinestring = ST_GEOMFROMTEXT('MULTILINESTRING((8 8, 9 9), (10 10, 11 11))');
  SET @multipolygon = ST_GEOMFROMTEXT('MULTIPOLYGON(((12 12, 13 12, 13 13, 12 13, 12 12)), ((14 14, 15 14, 15 15, 14 15, 14 14)))');
  SET @geomcollection = ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(16 16), LINESTRING(17 17, 18 18))');
  --echo #

  --echo # Casting from geometry in user variable to GEOMETRYCOLLECTION must return expected geometrycollection.
  SELECT ST_ASTEXT(CAST(@point AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(@linestring AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(@polygon AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(@multipoint AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(@multilinestring AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(@multipolygon AS GEOMETRYCOLLECTION));
  SELECT ST_ASTEXT(CAST(@geomcollection AS GEOMETRYCOLLECTION));
  --echo #

  --echo #############################################
  --echo # Testing result of table column input      #
  --echo #############################################
  --echo #

  --disable_warnings
  drop table if exists gis_geometrycollection_castable;
  --enable_warnings
  CREATE TABLE gis_geometrycollection_castable (fid INTEGER NOT NULL PRIMARY KEY, g GEOMETRY);
  INSERT INTO gis_geometrycollection_castable VALUES
  (101, ST_GEOMFROMTEXT('POINT(1 1)')),
  (102, ST_GEOMFROMTEXT('LINESTRING(2 2, 3 3)')),
  (103, ST_GEOMFROMTEXT('POLYGON((4 4, 5 4, 5 5, 4 5, 4 4))')),
  (104, ST_GEOMFROMTEXT('MULTIPOINT((6 6), (7 7))')),
  (105, ST_GEOMFROMTEXT('MULTILINESTRING((8 8, 9 9), (10 10, 11 11))')),
  (106, ST_GEOMFROMTEXT('MULTIPOLYGON(((12 12, 13 12, 13 13, 12 13, 12 12)), ((14 14, 15 14, 15 15, 14 15, 14 14)))')),
  (107, ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POINT(16 16), LINESTRING(17 17, 18 18))'));
  --echo #

  --echo # Casting from geometry column to GEOMETRYCOLLECTION must return expected geometrycollection.
  SELECT ST_ASTEXT(CAST(g AS GEOMETRYCOLLECTION)) FROM gis_geometrycollection_castable;
  --echo #

  --echo # Cleanup.
  DROP TABLE gis_geometrycollection_castable;

  --echo ####################################################################
  --echo # Requirement F-1d:                                                #
  --echo # Non-instantiable target types must not be allowed.               #
  --echo ####################################################################
  --echo #

  --echo # Casting to GEOMETRY must raise error.
  --error 1064
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS GEOMETRY));
  --echo #

  --echo # Casting to CURVE must raise error.
  --error 1064
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS CURVE));
  --echo #

  --echo # Casting to SURFACE must raise error.
  --error 1064
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS SURFACE));
  --echo #

  --echo # Casting to MULTICURVE must raise error.
  --error 1064
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS MULTICURVE));
  --echo #

  --echo # Casting to MULTISURFACE must raise error.
  --error 1064
  SELECT ST_ASTEXT(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS MULTISURFACE));
  --echo #

  --echo ####################################################################
  --echo # Requirement F-1e:                                                #
  --echo # Casting to non-geometry types must give same result as before.   #
  --echo ####################################################################
  --echo #

  --echo # Casting geometry to SIGNED must raise error.
  --error ER_WRONG_ARGUMENTS
  SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS SIGNED);
  --echo #

  --echo # Casting geometry to UNSIGNED must raise error.
  --error ER_WRONG_ARGUMENTS
  SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS UNSIGNED);
  --echo #

  --echo # Casting geometry to YEAR must raise error.
  --error ER_WRONG_ARGUMENTS
  SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS YEAR);
  --echo #

  --disable_warnings

  --echo # Casting geometry to DATE must return NULL.
  SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS DATE);
  --echo #

  --echo # Casting geometry to TIME must return NULL.
  SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS TIME);
  --echo #

  --echo # Casting geometry to DATETIME must return NULL.
  SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS DATETIME);
  --echo #

  --echo # Casting geometry to CHAR must return SWKB.
  SELECT HEX(CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS CHAR));
  --echo #

  --echo # Casting geometry to DECIMAL must return 0.
  SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS DECIMAL);
  --echo #

  --echo # Casting geometry to FLOAT must return 0.
  SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS FLOAT);
  --echo #

  --echo # Casting geometry to DOUBLE must return 0.
  SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS DOUBLE);
  --echo #

  --enable_warnings

  --echo # Casting geometry to JSON must return JSON-string. （not support now）
  # SELECT CAST(ST_GEOMFROMTEXT('POINT(1 1)') AS JSON);
  --echo #

  --echo ####################################################################
  --echo # Requirement F-2:                                                 #
  --echo # Casting NULL to geometry types must return NULL.               #
  --echo ####################################################################
  --echo #

  SELECT CAST(NULL AS POINT);
  --echo #

  --echo ####################################################################
  --echo # Requirement F-3:                                                 #
  --echo # Casting geometries that are not syntactically well-formed        #
  --echo # must not be allowed.                                             #
  --echo ####################################################################
  --echo #

  --echo # Casting 'POINT(1)' to POINT must raise error.
  --error 3037
  SELECT CAST(0x000000000101000000000000000000F03F AS POINT);
  --echo #

  --echo ####################################################################
  --echo # Requirement F-6b:                                                #
  --echo # Casting geographic geometry with longitude outside of            #
  --echo # (-180, 180] must not be allowed.                                 #
  --echo ####################################################################
  --echo #

  --echo # Casting POINT(0 180.000000001) with SRID=4326 to POINT must raise error.
  --error 3731
  SELECT CAST(0xE6100000010100000070890000008066400000000000000000 AS POINT);
  --echo #

  --echo # Casting POINT(0 -180.000000001) with SRID=4326 to POINT must raise error.
  --error 3731
  SELECT CAST(0xE6100000010100000070890000008066C00000000000000000 AS POINT);
  --echo #

  --echo ####################################################################
  --echo # Requirement F-6c:                                                #
  --echo # Casting geographic geometry with latitude outside of             #
  --echo # [-90, 90] must not be allowed.                                   #
  --echo ####################################################################
  --echo #

  --echo # Casting POINT(90.000000001 0) with SRID=4326 to POINT must raise error.
  --error 3732
  SELECT CAST(0xE610000001010000000000000000000000E112010000805640 AS POINT);
  --echo #

  --echo # Casting POINT(-90.000000001 0) with SRID=4326 to POINT must raise error.
  --error 3732
  SELECT CAST(0xE610000001010000000000000000000000E1120100008056C0 AS POINT);
  --echo #

  # bugfix: 
  --disable_warnings
  drop table if exists gis_tt2;
  --enable_warnings
  create table gis_tt2(a year);
  insert into gis_tt2 values(2010-10-10);
  select * from gis_tt2;
  --error 3548
  select cast(a as point) from gis_tt2;
  drop table gis_tt2;

  --error 3037
  select cast(cast("1.23" as decimal) as point);
  --error 3037
  select cast(cast("1.23" as decimal) as linestring);
  --error 3037
  select cast(cast("1.23" as decimal) as polygon);
  --error 3037
  select cast(cast("1.23" as decimal) as multipoint);
  --error 3037
  select cast(cast("1.23" as decimal) as multilinestring);
  --error 3037
  select cast(cast("1.23" as decimal) as multipolygon);
  --error 3037
  select cast(cast("1.23" as decimal) as Geometrycollection);

  --error 3037
  select cast(123 as point);
  --error 3548
  select cast(121111111111111111111111113 as point);
  --error 3548
  select cast(123.123 as point);
  --error 3548
  select cast(121111111111111111111111113.123 as point);
  --error 3548
  select cast(cast(23 as year) as point);

  # bugfix: 
  SELECT st_astext(CAST(ST_GEOMFROMTEXT('POINT(1 1)', 4326) AS POINT));

  # bugfix: 
  select st_astext(cast(ST_GeomFromText('point(10 20)',4326) as MULTIPOINT));

  # bugfix: 
  select st_astext(cast(ST_GeomFromText('MULTIPOLYGON(((1 0,10 0,7 7,0 10,1 0)),((5 6,7 5,7 7,5 7, 5 6)))') as MULTILINESTRING));

  # bugfix: 
  --error 3732
  select st_astext(cast(x'E6100000010100000066666666668656400000000000806640' as MULTIPOINT));
  --error 3732
  select st_astext(cast(x'E6100000010100000066666666668656400000000000806640' as GEOMETRYCOLLECTION));
  # bugfix: 
  select st_astext(cast(x'0000000001030000000100000004000000000000000080514000000000008051400000000000002440000000000000000000000000000024400000000000002440000000000080514000000000008051E0' as MULTIPOLYGON));

  # bugfix: 
--disable_warnings
DROP TABLE IF EXISTS tt1;
--enable_warnings
  create table tt1(id int);
  --error 1366
  insert into tt1 values(ST_GeomFromText('LINESTRING(0 0, 10 10, 20 25, 50 60)',0));
  drop table tt1;
  --disable_warnings
  drop table if exists t;
  --enable_warnings
  create table t (c1 int, c2 bigint, c3 double, c4 float, c5 decimal, c6 datetime,
                  c7 date, c8 time, c9 year, c10 bit, c11 varchar(100), c12 json);
  --error 1366
  insert into t(c1) value (point(0,0));
  --error 1366
  insert into t(c2) value (point(0,0));
  --error 1264
  insert into t(c3) value (point(0,0));
  --error 1264
  insert into t(c4) value (point(0,0));
  --error 1366
  insert into t(c5) value (point(0,0));
  --error 1292
  insert into t(c6) value (point(0,0));
  --error 1292
  insert into t(c7) value (point(0,0));
  --error 1292
  insert into t(c8) value (point(0,0));
  --error 1366
  insert into t(c9) value (point(0,0));
  --error 1406
  insert into t(c10) value (point(0,0));
  # geometry转成varchar（默认utf8）要看具体数据内容是否违反utf8的编码规则，例如insert into t(c11) value (st_geomfromtext('point(0 0)',32766))会报1366，mysql也一样
  insert into t(c11) value (point(0,0));
--error 3144
  insert into t(c12) value (point(0,0));
  drop table t;

  # bugfix: 
  --error 3548
  select cast(x'010100000000000000008056403333333333836640' as MULTIPOINT);

  # 
  SELECT TIME(ST_GEOMETRYFROMTEXT('polygon((1 1,1 1,1 1,1 1))'));
  --disable_warnings
  drop table if exists t;
  --enable_warnings
  create table t(id int, t time);
  --error 1292
  insert into t values(1, st_geomfromtext('POINT(1 1)'));
  drop table t;

  # bugfix: 
  --disable_warnings
  drop table if exists t;
  --enable_warnings
  create table t (e enum('a','b'));
  --error 1235
  insert into t values(Point(0,0));
  drop table t;

  # bugfix: 
  create or replace view v as select cast(st_geomfromwkb(x'00000000010100000000000000008056400000000000805640') as Multipoint);
  desc v;
  create or replace view v as select cast(Point(0,0) as Multipoint) a;
  desc v;
  --disable_warnings
  drop table if exists t;
  --enable_warnings
  create table t (p point);
  insert into t values(point(0,1));
  create or replace view v as select cast(t.p as Multipoint) a from t;
  select st_astext(v.a) from v;
  insert into t values(point(0.1,0.1));
  select st_astext(v.a) from v;
  drop table t;
  drop view v;

  # bugfix: 
  --error 0, 1051
  drop table t1;
  create table t1(id int  AUTO_INCREMENT primary key ,g geometry not null);
  insert into t1(g) values(ST_GeomFromText('point(10 20)'));
  insert into t1(g) values(ST_GeomFromText('LINESTRING(0 0, 10 10, 20 25, 50 60)'));
  insert into t1(g) values(ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))'));
  insert into t1(g) values(ST_GeomFromText('MULTIPOINT(0 0, 20 20, 60 60)'));
  insert into t1(g) values(ST_GeomFromText('MULTILINESTRING((10 10, 20 20), (15 15, 30 15))'));
  insert into t1(g) values(ST_GeomFromText('MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))'));
  insert into t1(g) values(ST_GeomFromText('GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))'));
  select SOUNDEX(g) from t1;

  # bugfix: 
  select CONVERT(g, json) from t1;
  select CAST(g as json) from t1;

  drop table t1;
  create table t1(id int  AUTO_INCREMENT primary key ,g geometry not null);
  insert into t1(g) values(ST_GeomFromText('point(10 20)', 4326));
  insert into t1(g) values(ST_GeomFromText('LINESTRING(0 0, 10 10, 20 25, 50 60)', 4326));
  insert into t1(g) values(ST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))', 4326));
  insert into t1(g) values(ST_GeomFromText('MULTIPOINT(0 0, 20 20, 60 60)', 4326));
  insert into t1(g) values(ST_GeomFromText('MULTILINESTRING((10 10, 20 20), (15 15, 30 15))', 4326));
  insert into t1(g) values(ST_GeomFromText('MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))', 4326));
  insert into t1(g) values(ST_GeomFromText('GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))', 4326));
  select CONVERT(g, json) from t1;
  select CAST(g as json) from t1;
