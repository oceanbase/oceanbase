result_format: 4
explain_protocol: 2
drop table if exists t1,t2;
create table t1 (id int primary key, i2 int);
create table t2 (id int primary key, i2 int);
insert/*trace*/ into t1(id) values (75);
insert/*trace*/ into t1(id) values (79);
insert/*trace*/ into t1(id) values (78);
insert/*trace*/ into t1(id) values (77);
insert/*trace*/ into t1(id) values (104);
insert/*trace*/ into t1(id) values (103);
insert/*trace*/ into t1(id) values (102);
insert/*trace*/ into t1(id) values (101);
insert/*trace*/ into t1(id) values (105);
insert/*trace*/ into t1(id) values (106);
insert/*trace*/ into t1(id) values (107);
insert/*trace*/ into t2(id) values (107),(75),(1000);


EXPLAIN select t1.id, t2.id from t1 join t2 on t2.id = t1.id where t1.id>200;
Query Plan
==================================================
|ID|OPERATOR          |NAME|EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |MERGE JOIN        |    |1       |5           |
|1 |├─TABLE RANGE SCAN|t1  |1       |3           |
|2 |└─TABLE RANGE SCAN|t2  |1       |3           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t2.id]), filter(nil), rowset=16
      equal_conds([t2.id = t1.id]), other_conds(nil)
      merge_directions([ASC])
  1 - output([t1.id]), filter(nil), rowset=16
      access([t1.id]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.id]), range(200 ; MAX), 
      range_cond([t1.id > 200])
  2 - output([t2.id]), filter(nil), rowset=16
      access([t2.id]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.id]), range(200 ; MAX), 
      range_cond([t2.id > 200])
select t1.id, t2.id from t1 join t2 on t2.id = t1.id where t1.id>200;
+----+----+
| id | id |
+----+----+
+----+----+

EXPLAIN select t1.id, t2.id from t1 join t2 on t2.id = t1.id where t1.id>200 and t1.id<200;
Query Plan
==================================================
|ID|OPERATOR          |NAME|EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |HASH JOIN         |    |0       |5           |
|1 |├─TABLE RANGE SCAN|t1  |0       |3           |
|2 |└─TABLE RANGE SCAN|t2  |0       |3           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t2.id]), filter(nil), rowset=16
      equal_conds([t2.id = t1.id]), other_conds(nil)
  1 - output([t1.id]), filter(nil), rowset=16
      access([t1.id]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t1.id]), range(MAX ; MIN)always false, 
      range_cond([t1.id > 200], [t1.id < 200])
  2 - output([t2.id]), filter(nil), rowset=16
      access([t2.id]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.id]), range(MAX ; MIN)always false, 
      range_cond([t2.id < 200], [t2.id > 200])
select t1.id, t2.id from t1 join t2 on t2.id = t1.id where t1.id>200 and t1.id<200;
+----+----+
| id | id |
+----+----+
+----+----+

EXPLAIN select a.id , b.id from t1 a join t2 b on a.id = b.id where a.id>200 and a.id<200;
Query Plan
==================================================
|ID|OPERATOR          |NAME|EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |HASH JOIN         |    |0       |5           |
|1 |├─TABLE RANGE SCAN|a   |0       |3           |
|2 |└─TABLE RANGE SCAN|b   |0       |3           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([a.id], [b.id]), filter(nil), rowset=16
      equal_conds([a.id = b.id]), other_conds(nil)
  1 - output([a.id]), filter(nil), rowset=16
      access([a.id]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([a.id]), range(MAX ; MIN)always false, 
      range_cond([a.id > 200], [a.id < 200])
  2 - output([b.id]), filter(nil), rowset=16
      access([b.id]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.id]), range(MAX ; MIN)always false, 
      range_cond([b.id < 200], [b.id > 200])
select a.id , b.id from t1 a join t2 b on a.id = b.id where a.id>200 and a.id<200;
+----+----+
| id | id |
+----+----+
+----+----+

EXPLAIN select a.id , b.id from t1 a join t2 b on a.id = a.id where a.id>200 and a.id<200;
Query Plan
===========================================================
|ID|OPERATOR                   |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN |    |3       |3           |
|1 |├─TABLE FULL SCAN          |b   |3       |3           |
|2 |└─MATERIAL                 |    |0       |3           |
|3 |  └─TABLE RANGE SCAN       |a   |0       |3           |
===========================================================
Outputs & filters:
-------------------------------------
  0 - output([a.id], [b.id]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  1 - output([b.id]), filter(nil), rowset=16
      access([b.id]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([b.id]), range(MIN ; MAX)always true
  2 - output([a.id]), filter(nil), rowset=16
  3 - output([a.id]), filter([a.id = a.id]), rowset=16
      access([a.id]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([a.id]), range(MAX ; MIN)always false, 
      range_cond([a.id > 200], [a.id < 200])
select a.id , b.id from t1 a join t2 b on a.id = a.id where a.id>200 and a.id<200;
+----+----+
| id | id |
+----+----+
+----+----+
drop table t1, t2;
