result_format: 4
explain_protocol: 2
alter system set _enable_newsort = true;
drop table if exists xy_t1, xy_t2;
create table xy_t1(c1 int, c2 int);
create table xy_t2(c1 int, c2 int);
insert/*insert trace*/ into xy_t1 values(0, 0), (1,1), (2,2), (5,5), (5,5), (6,7), (6,6), (7,7);
insert/*insert trace*/ into xy_t2 values(1,1), (3,3), (5,5), (5,5), (6,6);


# ************** 测试anti仅含equal condition的情况 *******
EXPLAIN select /*+ USE_NL(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN |     |3       |4           |
|1 |├─TABLE FULL SCAN     |xy_t1|8       |3           |
|2 |└─MATERIAL            |     |5       |3           |
|3 |  └─TABLE FULL SCAN   |xy_t2|5       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      conds([xy_t1.c1 = xy_t2.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t2.c1]), filter(nil), rowset=16
  3 - output([xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_NL(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 |    2 |
|    7 |    7 |
+------+------+

EXPLAIN select /*+ USE_MERGE(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE ANTI JOIN    |     |3       |7           |
|1 |├─SORT             |     |8       |4           |
|2 |│ └─TABLE FULL SCAN|xy_t1|8       |3           |
|3 |└─SORT             |     |5       |3           |
|4 |  └─TABLE FULL SCAN|xy_t2|5       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      sort_keys([xy_t1.c1, ASC])
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t2.c1]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  4 - output([xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_MERGE(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 |    2 |
|    7 |    7 |
+------+------+

EXPLAIN select /*+ USE_HASH(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT ANTI JOIN |     |3       |7           |
|1 |├─TABLE FULL SCAN    |xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|8       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds(nil)
  1 - output([xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_HASH(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 |    2 |
|    7 |    7 |
+------+------+
# *************  end *******************

# ************** 测试anti含other condition的情况 *******
EXPLAIN select /*+ USE_NL(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN |     |8       |4           |
|1 |├─TABLE FULL SCAN     |xy_t1|8       |3           |
|2 |└─MATERIAL            |     |5       |3           |
|3 |  └─TABLE FULL SCAN   |xy_t2|5       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      conds([xy_t1.c2 > xy_t2.c2], [xy_t1.c1 = xy_t2.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
  3 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_NL(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    1 |    1 |
|    2 |    2 |
|    5 |    5 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
+------+------+

EXPLAIN select /*+ USE_MERGE(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE ANTI JOIN    |     |8       |7           |
|1 |├─SORT             |     |8       |4           |
|2 |│ └─TABLE FULL SCAN|xy_t1|8       |3           |
|3 |└─SORT             |     |5       |3           |
|4 |  └─TABLE FULL SCAN|xy_t2|5       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c2 > xy_t2.c2])
      merge_directions([ASC])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      sort_keys([xy_t1.c1, ASC])
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  4 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_MERGE(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    1 |    1 |
|    2 |    2 |
|    5 |    5 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
+------+------+

EXPLAIN select /*+ USE_HASH(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT ANTI JOIN |     |8       |7           |
|1 |├─TABLE FULL SCAN    |xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|8       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c2 > xy_t2.c2])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_HASH(xy_t1, xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    1 |    1 |
|    2 |    2 |
|    5 |    5 |
|    5 |    5 |
|    6 |    6 |
|    7 |    7 |
+------+------+
# ************** end *********

# ************** 测试semi仅含equal condition的情况 *******
EXPLAIN select /*+ USE_NL(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |     |6       |4           |
|1 |├─TABLE FULL SCAN     |xy_t1|8       |3           |
|2 |└─MATERIAL            |     |5       |3           |
|3 |  └─TABLE FULL SCAN   |xy_t2|5       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      conds([xy_t1.c1 = xy_t2.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t2.c1]), filter(nil), rowset=16
  3 - output([xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_NL(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    6 |    7 |
|    6 |    6 |
+------+------+

EXPLAIN select /*+ USE_MERGE(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE SEMI JOIN    |     |6       |7           |
|1 |├─SORT             |     |8       |4           |
|2 |│ └─TABLE FULL SCAN|xy_t1|8       |3           |
|3 |└─SORT             |     |5       |3           |
|4 |  └─TABLE FULL SCAN|xy_t2|5       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      sort_keys([xy_t1.c1, ASC])
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t2.c1]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  4 - output([xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_MERGE(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    6 |    7 |
|    6 |    6 |
+------+------+

EXPLAIN select /*+ USE_HASH(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |     |6       |7           |
|1 |├─TABLE FULL SCAN    |xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|8       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds(nil)
  1 - output([xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_HASH(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    6 |    7 |
|    6 |    6 |
+------+------+
# *************  end *******************

# ************** 测试semi join含other condition的情况 *******
EXPLAIN select /*+ USE_NL(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |     |1       |4           |
|1 |├─TABLE FULL SCAN     |xy_t1|8       |3           |
|2 |└─MATERIAL            |     |5       |3           |
|3 |  └─TABLE FULL SCAN   |xy_t2|5       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      conds([xy_t1.c2 > xy_t2.c2], [xy_t1.c1 = xy_t2.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
  3 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_NL(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+
| c1   | c2   |
+------+------+
|    6 |    7 |
+------+------+

EXPLAIN select /*+ USE_MERGE(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE SEMI JOIN    |     |1       |7           |
|1 |├─SORT             |     |8       |4           |
|2 |│ └─TABLE FULL SCAN|xy_t1|8       |3           |
|3 |└─SORT             |     |5       |3           |
|4 |  └─TABLE FULL SCAN|xy_t2|5       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c2 > xy_t2.c2])
      merge_directions([ASC])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      sort_keys([xy_t1.c1, ASC])
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  4 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_MERGE(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+
| c1   | c2   |
+------+------+
|    6 |    7 |
+------+------+

EXPLAIN select /*+ USE_HASH(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |     |1       |7           |
|1 |├─TABLE FULL SCAN    |xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|8       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c2 > xy_t2.c2])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_HASH(xy_t1, xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+
| c1   | c2   |
+------+------+
|    6 |    7 |
+------+------+
# ************** end *********

# ************** 测试上层算子需要投影的情况 ********
EXPLAIN select /*+ USE_NL(xy_t1, xy_t2)*/ c1, c2, c1, c2  from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN |     |8       |4           |
|1 |├─TABLE FULL SCAN     |xy_t1|8       |3           |
|2 |└─MATERIAL            |     |5       |3           |
|3 |  └─TABLE FULL SCAN   |xy_t2|5       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2], [xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      conds([xy_t1.c2 > xy_t2.c2], [xy_t1.c1 = xy_t2.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
  3 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_NL(xy_t1, xy_t2)*/ c1, c2, c1, c2  from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    0 |    0 |    0 |    0 |
|    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |
|    5 |    5 |    5 |    5 |
|    5 |    5 |    5 |    5 |
|    6 |    6 |    6 |    6 |
|    7 |    7 |    7 |    7 |
+------+------+------+------+

EXPLAIN select /*+ USE_MERGE(xy_t1, xy_t2)*/ c1, c2, c1, c2  from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE ANTI JOIN    |     |8       |7           |
|1 |├─SORT             |     |8       |4           |
|2 |│ └─TABLE FULL SCAN|xy_t1|8       |3           |
|3 |└─SORT             |     |5       |3           |
|4 |  └─TABLE FULL SCAN|xy_t2|5       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2], [xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c2 > xy_t2.c2])
      merge_directions([ASC])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      sort_keys([xy_t1.c1, ASC])
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  4 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_MERGE(xy_t1, xy_t2)*/ c1, c2, c1, c2  from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    0 |    0 |    0 |    0 |
|    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |
|    5 |    5 |    5 |    5 |
|    5 |    5 |    5 |    5 |
|    6 |    6 |    6 |    6 |
|    7 |    7 |    7 |    7 |
+------+------+------+------+

EXPLAIN select /*+ USE_HASH(xy_t1, xy_t2)*/ c1, c2, c1, c2  from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT ANTI JOIN |     |8       |7           |
|1 |├─TABLE FULL SCAN    |xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|8       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2], [xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c2 > xy_t2.c2])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_HASH(xy_t1, xy_t2)*/ c1, c2, c1, c2  from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    0 |    0 |    0 |    0 |
|    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |
|    5 |    5 |    5 |    5 |
|    5 |    5 |    5 |    5 |
|    6 |    6 |    6 |    6 |
|    7 |    7 |    7 |    7 |
+------+------+------+------+

EXPLAIN select /*+ USE_NL(xy_t1, xy_t2)*/  c1, c2, c1, c2 from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |     |1       |4           |
|1 |├─TABLE FULL SCAN     |xy_t1|8       |3           |
|2 |└─MATERIAL            |     |5       |3           |
|3 |  └─TABLE FULL SCAN   |xy_t2|5       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2], [xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      conds([xy_t1.c2 > xy_t2.c2], [xy_t1.c1 = xy_t2.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
  3 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_NL(xy_t1, xy_t2)*/  c1, c2, c1, c2 from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    6 |    7 |    6 |    7 |
+------+------+------+------+

EXPLAIN select /*+ USE_MERGE(xy_t1, xy_t2)*/ c1, c2, c1, c2 from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE SEMI JOIN    |     |1       |7           |
|1 |├─SORT             |     |8       |4           |
|2 |│ └─TABLE FULL SCAN|xy_t1|8       |3           |
|3 |└─SORT             |     |5       |3           |
|4 |  └─TABLE FULL SCAN|xy_t2|5       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2], [xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c2 > xy_t2.c2])
      merge_directions([ASC])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      sort_keys([xy_t1.c1, ASC])
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  4 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_MERGE(xy_t1, xy_t2)*/ c1, c2, c1, c2 from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    6 |    7 |    6 |    7 |
+------+------+------+------+

EXPLAIN select /*+ USE_HASH(xy_t1, xy_t2)*/ c1, c2, c1, c2 from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |     |1       |7           |
|1 |├─TABLE FULL SCAN    |xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|8       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2], [xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c2 > xy_t2.c2])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ USE_HASH(xy_t1, xy_t2)*/ c1, c2, c1, c2 from xy_t1 where exists (select 1 from xy_t2 where xy_t1.c1 = xy_t2.c1 and xy_t1.c2 > xy_t2.c2);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    6 |    7 |    6 |    7 |
+------+------+------+------+
# ************** end ********
drop table xy_t1, xy_t2;

## bug:
drop table if exists xy_x_t, xy_y_t;
create table xy_x_t(x1 int, x2 varchar(100));
create table xy_y_t(y1 int, y2 varchar(100));
insert/*insert trace*/ into xy_x_t values(NULL,"VECPQ"),(NULL,"bdarkyzh"),(NULL,"it"),(NULL,"tgn"),(NULL,"had"),(NULL,"b"),(NULL,"g"),(NULL,"it's"),(NULL,"r"),(NULL,"KSZCK"),(NULL,"s"),(NULL,"UJRXI"),(NULL,"HLKDP"),(NULL,"about"),(NULL,"ROITX"),(NULL,"OEJAP"),(NULL,"u"),(NULL,"egisjnib"),(NULL,"ozkegisjn"),(NULL,"oh"),(NULL,"lrlmds"),(NULL,"r"),(NULL,"a"),(NULL,"here"),(NULL,"ihrad"),(NULL,"good"),(-2139029504,"eyqjoq"),(-2061369344,"GSUGA"),(-1882128384,"there"),(-1552613376,"d"),(-1511981056,"and"),(-1504706560,"and"),(-1259929600,"o"),(-973340672,"at"),(-918945792,"DNMFW"),(-778960896,"r"),(-753336320,"PKGAE"),(-593821696,"UGSPN"),(-457179136,"got"),(-314638336,"will"),(-233701376,"o"),(-104202240,"SUEUH"),(0,"yzh"),(0,"i"),(1,"TQOYB"),(1,"FFHTJ"),(2,"it's"),(2,"ezcuilyxac"),(2,"VZLUW"),(2,"want"),(2,"think"),(3,"prsazev"),(3,"get"),(3,"out"),(4,"a"),(4,"PVYPZ"),(4,"k"),(4,"bpqswbeyqj"),(4,"isjn"),(4,"that's"),(4,"well"),(5,"arkyz"),(5,"w"),(5,"with"),(5,"just"),(5,"PFBCU"),(6,"uyslpcybda"),(6,"co"),(6,"u"),(6,"j"),(6,"g"),(7,"cybdark"),(7,"BKWPE"),(8,"lmdsl"),(8,"NNIGT"),(8,"of"),(9,"etu"),(9,"TBMEI"),(9,"QPPLC"),(9,"mdsl"),(27262976,"n"),(162267136,"to"),(199884800,"y"),(334364672,"h"),(597295104,"did"),(748814336,"rhljip"),(769916928,"OQKEV"),(839778304,"USTRY"),(947585024,"hey"),(1210777600,"want"),(1232601088,"azev"),(1250689024,"a"),(1329463296,"QAMOL"),(1573126144,"zcuilyx"),(1594753024,"yeah"),(1730215936,"PMUMX"),(1925709824,"g"),(2048262144,"b"),(2082275328,"k"),(2131492864,"was");
insert/*insert trace*/ into xy_y_t values(NULL,"mmkfu"),(NULL,"c"),(NULL,"know"),(NULL,"ZYTQH"),(NULL,"j"),(NULL,"y"),(NULL,"what"),(NULL,"SXXNL"),(NULL,"b"),(NULL,"NFZFZ"),(-1992359936,"not"),(-1711210496,"uoorvy"),(-1150287872,"BKNFS"),(-926613504,"was"),(-858128384,"y"),(-549126144,"v"),(-537198592,"now"),(-491651072,"t"),(-66125824,"here"),(0,"XCYGJ"),(1,"YGHBI"),(2,"g"),(6,"kfuoorvyvn"),(7,"EGBLS"),(9,"jsnsdfm"),(1584463872,"face");


EXPLAIN select /*+use_hash(xy_x_t xy_y_t)*/ * from xy_x_t where x1 in (select y1 from xy_y_t where y2 < xy_x_t.x2);
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |      |9       |27          |
|1 |├─TABLE FULL SCAN    |xy_y_t|26      |4           |
|2 |└─TABLE FULL SCAN    |xy_x_t|100     |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_x_t.x1], [xy_x_t.x2]), filter(nil), rowset=256
      equal_conds([xy_x_t.x1 = xy_y_t.y1]), other_conds([xy_y_t.y2 < xy_x_t.x2])
  1 - output([xy_y_t.y2], [xy_y_t.y1]), filter(nil), rowset=256
      access([xy_y_t.y2], [xy_y_t.y1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_y_t.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_x_t.x2], [xy_x_t.x1]), filter(nil), rowset=256
      access([xy_x_t.x2], [xy_x_t.x1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_x_t.__pk_increment]), range(MIN ; MAX)always true
select /*+use_hash(xy_x_t xy_y_t)*/ * from xy_x_t where x1 in (select y1 from xy_y_t where y2 < xy_x_t.x2);
+------+------------+
| x1   | x2         |
+------+------------+
|    0 | yzh        |
|    2 | VZLUW      |
|    2 | it's       |
|    2 | think      |
|    2 | want       |
|    6 | u          |
|    6 | uyslpcybda |
|    9 | QPPLC      |
|    9 | TBMEI      |
|    9 | mdsl       |
+------+------------+
EXPLAIN select /*+use_merge(xy_x_t xy_y_t)*/ * from xy_x_t where x1 in (select y1 from xy_y_t where y2 < xy_x_t.x2);
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE SEMI JOIN    |      |9       |57          |
|1 |├─SORT             |      |100     |30          |
|2 |│ └─TABLE FULL SCAN|xy_x_t|100     |7           |
|3 |└─SORT             |      |26      |9           |
|4 |  └─TABLE FULL SCAN|xy_y_t|26      |4           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_x_t.x1], [xy_x_t.x2]), filter(nil), rowset=256
      equal_conds([xy_x_t.x1 = xy_y_t.y1]), other_conds([xy_y_t.y2 < xy_x_t.x2])
      merge_directions([ASC])
  1 - output([xy_x_t.x1], [xy_x_t.x2]), filter(nil), rowset=256
      sort_keys([xy_x_t.x1, ASC])
  2 - output([xy_x_t.x2], [xy_x_t.x1]), filter(nil), rowset=256
      access([xy_x_t.x2], [xy_x_t.x1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_x_t.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_y_t.y1], [xy_y_t.y2]), filter(nil), rowset=256
      sort_keys([xy_y_t.y1, ASC])
  4 - output([xy_y_t.y2], [xy_y_t.y1]), filter(nil), rowset=256
      access([xy_y_t.y2], [xy_y_t.y1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_y_t.__pk_increment]), range(MIN ; MAX)always true
select /*+use_merge(xy_x_t xy_y_t)*/ * from xy_x_t where x1 in (select y1 from xy_y_t where y2 < xy_x_t.x2);
+------+------------+
| x1   | x2         |
+------+------------+
|    0 | yzh        |
|    2 | VZLUW      |
|    2 | it's       |
|    2 | think      |
|    2 | want       |
|    6 | u          |
|    6 | uyslpcybda |
|    9 | QPPLC      |
|    9 | TBMEI      |
|    9 | mdsl       |
+------+------------+
EXPLAIN select /*+use_nl(xy_x_t xy_y_t)*/ * from xy_x_t where x1 in (select y1 from xy_y_t where y2 < xy_x_t.x2);
Query Plan
========================================================
|ID|OPERATOR              |NAME  |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |      |9       |115         |
|1 |├─TABLE FULL SCAN     |xy_x_t|100     |7           |
|2 |└─MATERIAL            |      |26      |8           |
|3 |  └─TABLE FULL SCAN   |xy_y_t|26      |4           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_x_t.x1], [xy_x_t.x2]), filter(nil), rowset=256
      conds([xy_x_t.x1 = xy_y_t.y1], [xy_y_t.y2 < xy_x_t.x2]), nl_params_(nil), use_batch=false
  1 - output([xy_x_t.x2], [xy_x_t.x1]), filter(nil), rowset=256
      access([xy_x_t.x2], [xy_x_t.x1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_x_t.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_y_t.y2], [xy_y_t.y1]), filter(nil), rowset=256
  3 - output([xy_y_t.y2], [xy_y_t.y1]), filter(nil), rowset=256
      access([xy_y_t.y2], [xy_y_t.y1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_y_t.__pk_increment]), range(MIN ; MAX)always true
select /*+use_nl(xy_x_t xy_y_t)*/ * from xy_x_t where x1 in (select y1 from xy_y_t where y2 < xy_x_t.x2);
+------+------------+
| x1   | x2         |
+------+------------+
|    0 | yzh        |
|    2 | VZLUW      |
|    2 | it's       |
|    2 | think      |
|    2 | want       |
|    6 | u          |
|    6 | uyslpcybda |
|    9 | QPPLC      |
|    9 | TBMEI      |
|    9 | mdsl       |
+------+------------+

drop table xy_x_t, xy_y_t;
create table xy_x_t(x1 int not null, x2 varchar(100) not null);
create table xy_y_t(y1 int not null, y2 varchar(100) not null);
insert/*insert trace*/ into xy_x_t values(-2139029504,"eyqjoq"),(-2061369344,"GSUGA"),(-1882128384,"there"),(-1552613376,"d"),(-1511981056,"and"),(-1504706560,"and"),(-1259929600,"o"),(-973340672,"at"),(-918945792,"DNMFW"),(-778960896,"r"),(-753336320,"PKGAE"),(-593821696,"UGSPN"),(-457179136,"got"),(-314638336,"will"),(-233701376,"o"),(-104202240,"SUEUH"),(0,"yzh"),(0,"i"),(1,"TQOYB"),(1,"FFHTJ"),(2,"it's"),(2,"ezcuilyxac"),(2,"VZLUW"),(2,"want"),(2,"think"),(3,"prsazev"),(3,"get"),(3,"out"),(4,"a"),(4,"PVYPZ"),(4,"k"),(4,"bpqswbeyqj"),(4,"isjn"),(4,"that's"),(4,"well"),(5,"arkyz"),(5,"w"),(5,"with"),(5,"just"),(5,"PFBCU"),(6,"uyslpcybda"),(6,"co"),(6,"u"),(6,"j"),(6,"g"),(7,"cybdark"),(7,"BKWPE"),(8,"lmdsl"),(8,"NNIGT"),(8,"of"),(9,"etu"),(9,"TBMEI"),(9,"QPPLC"),(9,"mdsl"),(27262976,"n"),(162267136,"to"),(199884800,"y"),(334364672,"h"),(597295104,"did"),(748814336,"rhljip"),(769916928,"OQKEV"),(839778304,"USTRY"),(947585024,"hey"),(1210777600,"want"),(1232601088,"azev"),(1250689024,"a"),(1329463296,"QAMOL"),(1573126144,"zcuilyx"),(1594753024,"yeah"),(1730215936,"PMUMX"),(1925709824,"g"),(2048262144,"b"),(2082275328,"k"),(2131492864,"was");
insert/*insert trace*/ into xy_y_t values(-1992359936,"not"),(-1711210496,"uoorvy"),(-1150287872,"BKNFS"),(-926613504,"was"),(-858128384,"y"),(-549126144,"v"),(-537198592,"now"),(-491651072,"t"),(-66125824,"here"),(0,"XCYGJ"),(1,"YGHBI"),(2,"g"),(6,"kfuoorvyvn"),(7,"EGBLS"),(9,"jsnsdfm"),(1584463872,"face");
EXPLAIN select /*+use_hash(xy_x_t xy_y_t)*/ * from xy_x_t where x1 not in (select y1 from xy_y_t where y2 < xy_x_t.x2);
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |HASH RIGHT ANTI JOIN |      |66      |22          |
|1 |├─TABLE FULL SCAN    |xy_y_t|16      |3           |
|2 |└─TABLE FULL SCAN    |xy_x_t|74      |6           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_x_t.x1], [xy_x_t.x2]), filter(nil), rowset=256
      equal_conds([xy_x_t.x1 = xy_y_t.y1]), other_conds([xy_y_t.y2 < xy_x_t.x2])
  1 - output([xy_y_t.y2], [xy_y_t.y1]), filter(nil), rowset=256
      access([xy_y_t.y2], [xy_y_t.y1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_y_t.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_x_t.x2], [xy_x_t.x1]), filter(nil), rowset=256
      access([xy_x_t.x2], [xy_x_t.x1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_x_t.__pk_increment]), range(MIN ; MAX)always true
select /*+use_hash(xy_x_t xy_y_t)*/ * from xy_x_t where x1 not in (select y1 from xy_y_t where y2 < xy_x_t.x2);
+-------------+------------+
| x1          | x2         |
+-------------+------------+
|           0 | i          |
|           1 | FFHTJ      |
|           1 | TQOYB      |
|           2 | ezcuilyxac |
|           3 | get        |
|           3 | out        |
|           3 | prsazev    |
|           4 | PVYPZ      |
|           4 | a          |
|           4 | bpqswbeyqj |
|           4 | isjn       |
|           4 | k          |
|           4 | that's     |
|           4 | well       |
|           5 | PFBCU      |
|           5 | arkyz      |
|           5 | just       |
|           5 | w          |
|           5 | with       |
|           6 | co         |
|           6 | g          |
|           6 | j          |
|           7 | BKWPE      |
|           7 | cybdark    |
|           8 | NNIGT      |
|           8 | lmdsl      |
|           8 | of         |
|           9 | etu        |
|    27262976 | n          |
|   162267136 | to         |
|   199884800 | y          |
|   334364672 | h          |
|   597295104 | did        |
|   748814336 | rhljip     |
|   769916928 | OQKEV      |
|   839778304 | USTRY      |
|   947585024 | hey        |
|  -104202240 | SUEUH      |
|  -233701376 | o          |
|  -314638336 | will       |
|  -457179136 | got        |
|  -593821696 | UGSPN      |
|  -753336320 | PKGAE      |
|  -778960896 | r          |
|  -918945792 | DNMFW      |
|  -973340672 | at         |
|  1210777600 | want       |
|  1232601088 | azev       |
|  1250689024 | a          |
|  1329463296 | QAMOL      |
|  1573126144 | zcuilyx    |
|  1594753024 | yeah       |
|  1730215936 | PMUMX      |
|  1925709824 | g          |
|  2048262144 | b          |
|  2082275328 | k          |
|  2131492864 | was        |
| -1259929600 | o          |
| -1504706560 | and        |
| -1511981056 | and        |
| -1552613376 | d          |
| -1882128384 | there      |
| -2061369344 | GSUGA      |
| -2139029504 | eyqjoq     |
+-------------+------------+
EXPLAIN select /*+use_merge(xy_x_t xy_y_t)*/ * from xy_x_t where x1 not in (select y1 from xy_y_t where y2 < xy_x_t.x2);
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE ANTI JOIN    |      |66      |43          |
|1 |├─SORT             |      |74      |23          |
|2 |│ └─TABLE FULL SCAN|xy_x_t|74      |6           |
|3 |└─SORT             |      |16      |7           |
|4 |  └─TABLE FULL SCAN|xy_y_t|16      |3           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_x_t.x1], [xy_x_t.x2]), filter(nil), rowset=256
      equal_conds([xy_x_t.x1 = xy_y_t.y1]), other_conds([xy_y_t.y2 < xy_x_t.x2])
      merge_directions([ASC])
  1 - output([xy_x_t.x1], [xy_x_t.x2]), filter(nil), rowset=256
      sort_keys([xy_x_t.x1, ASC])
  2 - output([xy_x_t.x2], [xy_x_t.x1]), filter(nil), rowset=256
      access([xy_x_t.x2], [xy_x_t.x1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_x_t.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_y_t.y1], [xy_y_t.y2]), filter(nil), rowset=256
      sort_keys([xy_y_t.y1, ASC])
  4 - output([xy_y_t.y2], [xy_y_t.y1]), filter(nil), rowset=256
      access([xy_y_t.y2], [xy_y_t.y1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_y_t.__pk_increment]), range(MIN ; MAX)always true
select /*+use_merge(xy_x_t xy_y_t)*/ * from xy_x_t where x1 not in (select y1 from xy_y_t where y2 < xy_x_t.x2);
+-------------+------------+
| x1          | x2         |
+-------------+------------+
|           0 | i          |
|           1 | FFHTJ      |
|           1 | TQOYB      |
|           2 | ezcuilyxac |
|           3 | get        |
|           3 | out        |
|           3 | prsazev    |
|           4 | PVYPZ      |
|           4 | a          |
|           4 | bpqswbeyqj |
|           4 | isjn       |
|           4 | k          |
|           4 | that's     |
|           4 | well       |
|           5 | PFBCU      |
|           5 | arkyz      |
|           5 | just       |
|           5 | w          |
|           5 | with       |
|           6 | co         |
|           6 | g          |
|           6 | j          |
|           7 | BKWPE      |
|           7 | cybdark    |
|           8 | NNIGT      |
|           8 | lmdsl      |
|           8 | of         |
|           9 | etu        |
|    27262976 | n          |
|   162267136 | to         |
|   199884800 | y          |
|   334364672 | h          |
|   597295104 | did        |
|   748814336 | rhljip     |
|   769916928 | OQKEV      |
|   839778304 | USTRY      |
|   947585024 | hey        |
|  -104202240 | SUEUH      |
|  -233701376 | o          |
|  -314638336 | will       |
|  -457179136 | got        |
|  -593821696 | UGSPN      |
|  -753336320 | PKGAE      |
|  -778960896 | r          |
|  -918945792 | DNMFW      |
|  -973340672 | at         |
|  1210777600 | want       |
|  1232601088 | azev       |
|  1250689024 | a          |
|  1329463296 | QAMOL      |
|  1573126144 | zcuilyx    |
|  1594753024 | yeah       |
|  1730215936 | PMUMX      |
|  1925709824 | g          |
|  2048262144 | b          |
|  2082275328 | k          |
|  2131492864 | was        |
| -1259929600 | o          |
| -1504706560 | and        |
| -1511981056 | and        |
| -1552613376 | d          |
| -1882128384 | there      |
| -2061369344 | GSUGA      |
| -2139029504 | eyqjoq     |
+-------------+------------+
EXPLAIN select /*+use_nl(xy_x_t xy_y_t)*/ * from xy_x_t where x1 not in (select y1 from xy_y_t where y2 < xy_x_t.x2);
Query Plan
========================================================
|ID|OPERATOR              |NAME  |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN |      |66      |56          |
|1 |├─TABLE FULL SCAN     |xy_x_t|74      |6           |
|2 |└─MATERIAL            |      |16      |6           |
|3 |  └─TABLE FULL SCAN   |xy_y_t|16      |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_x_t.x1], [xy_x_t.x2]), filter(nil), rowset=256
      conds([xy_y_t.y2 < xy_x_t.x2], [xy_x_t.x1 = xy_y_t.y1]), nl_params_(nil), use_batch=false
  1 - output([xy_x_t.x2], [xy_x_t.x1]), filter(nil), rowset=256
      access([xy_x_t.x2], [xy_x_t.x1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_x_t.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_y_t.y2], [xy_y_t.y1]), filter(nil), rowset=256
  3 - output([xy_y_t.y2], [xy_y_t.y1]), filter(nil), rowset=256
      access([xy_y_t.y2], [xy_y_t.y1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_y_t.__pk_increment]), range(MIN ; MAX)always true
select /*+use_nl(xy_x_t xy_y_t)*/ * from xy_x_t where x1 not in (select y1 from xy_y_t where y2 < xy_x_t.x2);
+-------------+------------+
| x1          | x2         |
+-------------+------------+
|           0 | i          |
|           1 | FFHTJ      |
|           1 | TQOYB      |
|           2 | ezcuilyxac |
|           3 | get        |
|           3 | out        |
|           3 | prsazev    |
|           4 | PVYPZ      |
|           4 | a          |
|           4 | bpqswbeyqj |
|           4 | isjn       |
|           4 | k          |
|           4 | that's     |
|           4 | well       |
|           5 | PFBCU      |
|           5 | arkyz      |
|           5 | just       |
|           5 | w          |
|           5 | with       |
|           6 | co         |
|           6 | g          |
|           6 | j          |
|           7 | BKWPE      |
|           7 | cybdark    |
|           8 | NNIGT      |
|           8 | lmdsl      |
|           8 | of         |
|           9 | etu        |
|    27262976 | n          |
|   162267136 | to         |
|   199884800 | y          |
|   334364672 | h          |
|   597295104 | did        |
|   748814336 | rhljip     |
|   769916928 | OQKEV      |
|   839778304 | USTRY      |
|   947585024 | hey        |
|  -104202240 | SUEUH      |
|  -233701376 | o          |
|  -314638336 | will       |
|  -457179136 | got        |
|  -593821696 | UGSPN      |
|  -753336320 | PKGAE      |
|  -778960896 | r          |
|  -918945792 | DNMFW      |
|  -973340672 | at         |
|  1210777600 | want       |
|  1232601088 | azev       |
|  1250689024 | a          |
|  1329463296 | QAMOL      |
|  1573126144 | zcuilyx    |
|  1594753024 | yeah       |
|  1730215936 | PMUMX      |
|  1925709824 | g          |
|  2048262144 | b          |
|  2082275328 | k          |
|  2131492864 | was        |
| -1259929600 | o          |
| -1504706560 | and        |
| -1511981056 | and        |
| -1552613376 | d          |
| -1882128384 | there      |
| -2061369344 | GSUGA      |
| -2139029504 | eyqjoq     |
+-------------+------------+

drop table xy_x_t, xy_y_t;

### bug 15280254 end
### ********************* test right semi/anti join
drop table if exists xy_t1, xy_t2, xy_t3, xy_t4;
create table xy_t1(c1 int, c2 int, key idx_c2(c2, c1));
create table xy_t2(c1 int, c2 int, key idx_c2(c2, c1));
create table xy_t3(c1 int, c2 int, key idx_c2(c2, c1));
create table xy_t4(c1 int, c2 int, key idx_c2(c2, c1));
insert/*insert trace*/ into xy_t1 values(0, 0), (1,1), (2, null),(2,2), (5,5), (5,5), (5,7),(6,7), (6,6), (6, null),(7,7), (7, 0), (8,0), (8,8), (8, 5), (9, 0), (9, 7), (10,10), (null, 1), (1,1), (3,3), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (0, 0), (1,1), (2, null),(2,2), (5,5), (5,5), (5,7),(6,7), (6,6), (6, null),(7,7), (7, 0), (8,0), (8,8), (8, 5), (9, 0), (9, 7), (10,10), (null, 1), (1,1), (3,3), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (0, 0), (1,1), (2, null),(2,2), (5,5), (5,5), (5,7),(6,7), (6,6), (6, null),(7,7), (7, 0), (8,0), (8,8), (8, 5), (9, 0), (9, 7), (10,10), (null, 1), (1,1), (3,3), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (0, 0), (1,1), (2, null),(2,2), (5,5), (5,5), (5,7),(6,7), (6,6), (6, null),(7,7), (7, 0), (8,0), (8,8), (8, 5), (9, 0), (9, 7), (10,10), (null, 1), (1,1), (3,3), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1), (20,1);
insert/*insert trace*/ into xy_t2 values(null, 1), (1,1), (3,3), (5,5), (5,6), (5,4), (6,6), (9,9);
insert/*insert trace*/ into xy_t3 values(1,1), (3,3), (5,5), (5,6), (5,4), (6,6), (9,9), (5,7),(6,7), (6,6), (6, null),(7,7);
insert/*insert trace*/ into xy_t4 values(1,1), (3,3);


***************** RIGHT HASH SEMI 最优
EXPLAIN select * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |     |51      |23          |
|1 |├─TABLE FULL SCAN    |xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|116     |8           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t1 xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |     |51      |20          |
|1 |├─TABLE FULL SCAN     |xy_t1|116     |8           |
|2 |└─MATERIAL            |     |8       |3           |
|3 |  └─TABLE FULL SCAN   |xy_t2|8       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      conds([xy_t2.c1 = xy_t1.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t2.c1]), filter(nil), rowset=256
  3 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t1 xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
+------+------+
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |     |51      |23          |
|1 |├─TABLE FULL SCAN    |xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|116     |8           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE SEMI JOIN    |     |51      |37          |
|1 |├─SORT             |     |116     |25          |
|2 |│ └─TABLE FULL SCAN|xy_t1|116     |8           |
|3 |└─SORT             |     |8       |3           |
|4 |  └─TABLE FULL SCAN|xy_t2|8       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      sort_keys([xy_t1.c1, ASC])
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t2.c1]), filter(nil), rowset=256
      sort_keys([xy_t2.c1, ASC])
  4 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    3 |    3 |
|    3 |    3 |
|    3 |    3 |
|    3 |    3 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    5 |    7 |
|    5 |    7 |
|    5 |    7 |
|    6 |    6 |
|    6 |    6 |
|    6 |    6 |
|    6 |    6 |
|    6 |    7 |
|    6 |    7 |
|    6 |    7 |
|    6 |    7 |
|    6 | NULL |
|    6 | NULL |
|    6 | NULL |
|    6 | NULL |
|    9 |    0 |
|    9 |    0 |
|    9 |    0 |
|    9 |    0 |
|    9 |    7 |
|    9 |    7 |
|    9 |    7 |
|    9 |    7 |
+------+------+
EXPLAIN select /*+ no_rewrite */ * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |SUBPLAN FILTER   |     |58      |2088        |
|1 |├─TABLE FULL SCAN|xy_t1|116     |8           |
|2 |└─TABLE FULL SCAN|xy_t2|1       |18          |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter([(T_OP_EXISTS, subquery(1))]), rowset=256
      exec_params_([xy_t1.c1(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([1]), filter([xy_t2.c1 = :0]), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ no_rewrite */ * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    1 |    1 |
|    3 |    3 |
|    3 |    3 |
|    3 |    3 |
|    3 |    3 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    5 |    7 |
|    5 |    7 |
|    5 |    7 |
|    6 |    6 |
|    6 |    6 |
|    6 |    6 |
|    6 |    6 |
|    6 |    7 |
|    6 |    7 |
|    6 |    7 |
|    6 |    7 |
|    6 | NULL |
|    6 | NULL |
|    6 | NULL |
|    6 | NULL |
|    9 |    0 |
|    9 |    0 |
|    9 |    0 |
|    9 |    0 |
|    9 |    7 |
|    9 |    7 |
|    9 |    7 |
|    9 |    7 |
+------+------+


***************** HASH SEMI 最优
EXPLAIN select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |HASH SEMI JOIN   |     |7       |20          |
|1 |├─TABLE FULL SCAN|xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|116     |6           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    4 |
|    6 |    6 |
|    9 |    9 |
|    3 |    3 |
|    5 |    6 |
|    5 |    5 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |     |7       |14          |
|1 |├─TABLE FULL SCAN     |xy_t2|8       |3           |
|2 |└─MATERIAL            |     |116     |9           |
|3 |  └─TABLE FULL SCAN   |xy_t1|116     |6           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      conds([xy_t2.c1 = xy_t1.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1]), filter(nil), rowset=256
  3 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    5 |    6 |
|    5 |    4 |
|    6 |    6 |
|    9 |    9 |
+------+------+
EXPLAIN select /*+ use_hash(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |HASH SEMI JOIN   |     |7       |20          |
|1 |├─TABLE FULL SCAN|xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|116     |6           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    4 |
|    6 |    6 |
|    9 |    9 |
|    3 |    3 |
|    5 |    6 |
|    5 |    5 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE SEMI JOIN    |     |7       |23          |
|1 |├─SORT             |     |8       |4           |
|2 |│ └─TABLE FULL SCAN|xy_t2|8       |3           |
|3 |└─SORT             |     |116     |19          |
|4 |  └─TABLE FULL SCAN|xy_t1|116     |6           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      sort_keys([xy_t2.c1, ASC])
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1]), filter(nil), rowset=256
      sort_keys([xy_t1.c1, ASC])
  4 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    5 |    6 |
|    5 |    4 |
|    6 |    6 |
|    9 |    9 |
+------+------+


****************  NL SEMI 最优
EXPLAIN select * from xy_t4 where exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |HASH SEMI JOIN   |             |2       |18          |
|1 |├─TABLE FULL SCAN|xy_t4        |2       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      equal_conds([xy_t4.c1 = xy_t1.c2]), other_conds(nil)
  1 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      access([xy_t4.c1], [xy_t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t4.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select * from xy_t4 where exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    3 |    3 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t4 xy_t1)*/ * from xy_t4 where exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
Query Plan
===============================================================
|ID|OPERATOR              |NAME         |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |             |2       |40          |
|1 |├─TABLE FULL SCAN     |xy_t4        |2       |3           |
|2 |└─TABLE RANGE SCAN    |xy_t1(idx_c2)|1       |18          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=16
      conds(nil), nl_params_([xy_t4.c1(:0)]), use_batch=false
  1 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=16
      access([xy_t4.c1], [xy_t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t4.__pk_increment]), range(MIN ; MAX)always true
  2 - output(nil), filter(nil), rowset=16
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN ; MAX), 
      range_cond([:0 = xy_t1.c2])
select /*+ use_nl(xy_t4 xy_t1)*/ * from xy_t4 where exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    3 |    3 |
+------+------+
EXPLAIN select /*+ use_hash(xy_t4 xy_t1)*/ * from xy_t4 where exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |HASH SEMI JOIN   |             |2       |18          |
|1 |├─TABLE FULL SCAN|xy_t4        |2       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      equal_conds([xy_t4.c1 = xy_t1.c2]), other_conds(nil)
  1 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      access([xy_t4.c1], [xy_t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t4.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select /*+ use_hash(xy_t4 xy_t1)*/ * from xy_t4 where exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    3 |    3 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t4 xy_t1)*/ * from xy_t4 where exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
Query Plan
============================================================
|ID|OPERATOR           |NAME         |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------
|0 |MERGE SEMI JOIN    |             |2       |8           |
|1 |├─SORT             |             |2       |3           |
|2 |│ └─TABLE FULL SCAN|xy_t4        |2       |3           |
|3 |└─TABLE FULL SCAN  |xy_t1(idx_c2)|116     |6           |
============================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      equal_conds([xy_t4.c1 = xy_t1.c2]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      sort_keys([xy_t4.c1, ASC])
  2 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      access([xy_t4.c1], [xy_t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t4.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select /*+ use_merge(xy_t4 xy_t1)*/ * from xy_t4 where exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    3 |    3 |
+------+------+


****************  MERGE SEMI 最优
EXPLAIN select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |MERGE SEMI JOIN  |             |8       |9           |
|1 |├─TABLE FULL SCAN|xy_t2(idx_c2)|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c2 = xy_t1.c2]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t2.c2], [xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c2], [xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    5 |    6 |
|    6 |    6 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
Query Plan
===============================================================
|ID|OPERATOR              |NAME         |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |             |8       |153         |
|1 |├─TABLE FULL SCAN     |xy_t2(idx_c2)|8       |3           |
|2 |└─TABLE RANGE SCAN    |xy_t1(idx_c2)|1       |18          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      conds(nil), nl_params_([xy_t2.c2(:0)]), use_batch=false
  1 - output([xy_t2.c2], [xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c2], [xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output(nil), filter(nil), rowset=16
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN ; MAX), 
      range_cond([:0 = xy_t1.c2])
select /*+ use_nl(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    5 |    6 |
|    6 |    6 |
+------+------+
EXPLAIN select /*+ use_hash(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |HASH SEMI JOIN   |             |8       |20          |
|1 |├─TABLE FULL SCAN|xy_t2(idx_c2)|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c2 = xy_t1.c2]), other_conds(nil)
  1 - output([xy_t2.c2], [xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c2], [xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select /*+ use_hash(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    6 |    6 |
| NULL |    1 |
|    5 |    6 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |MERGE SEMI JOIN  |             |8       |9           |
|1 |├─TABLE FULL SCAN|xy_t2(idx_c2)|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c2 = xy_t1.c2]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t2.c2], [xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c2], [xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select /*+ use_merge(xy_t2 xy_t1)*/ * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    5 |    6 |
|    6 |    6 |
+------+------+


***************** RIGHT HASH ANTI 最优
EXPLAIN select * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT ANTI JOIN |     |66      |24          |
|1 |├─TABLE FULL SCAN    |xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|116     |8           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t1 xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN |     |66      |20          |
|1 |├─TABLE FULL SCAN     |xy_t1|116     |8           |
|2 |└─MATERIAL            |     |8       |3           |
|3 |  └─TABLE FULL SCAN   |xy_t2|8       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      conds([xy_t2.c1 = xy_t1.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t2.c1]), filter(nil), rowset=256
  3 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t1 xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
+------+------+
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT ANTI JOIN |     |66      |24          |
|1 |├─TABLE FULL SCAN    |xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|116     |8           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE ANTI JOIN    |     |66      |38          |
|1 |├─SORT             |     |116     |25          |
|2 |│ └─TABLE FULL SCAN|xy_t1|116     |8           |
|3 |└─SORT             |     |8       |3           |
|4 |  └─TABLE FULL SCAN|xy_t2|8       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      sort_keys([xy_t1.c1, ASC])
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t2.c1]), filter(nil), rowset=256
      sort_keys([xy_t2.c1, ASC])
  4 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    0 |    0 |
|    0 |    0 |
|    0 |    0 |
|    2 |    2 |
|    2 |    2 |
|    2 |    2 |
|    2 |    2 |
|    2 | NULL |
|    2 | NULL |
|    2 | NULL |
|    2 | NULL |
|    7 |    0 |
|    7 |    0 |
|    7 |    0 |
|    7 |    0 |
|    7 |    7 |
|    7 |    7 |
|    7 |    7 |
|    7 |    7 |
|    8 |    0 |
|    8 |    0 |
|    8 |    0 |
|    8 |    0 |
|    8 |    5 |
|    8 |    5 |
|    8 |    5 |
|    8 |    5 |
|    8 |    8 |
|    8 |    8 |
|    8 |    8 |
|    8 |    8 |
|   10 |   10 |
|   10 |   10 |
|   10 |   10 |
|   10 |   10 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
| NULL |    1 |
| NULL |    1 |
| NULL |    1 |
| NULL |    1 |
+------+------+
EXPLAIN select /*+ no_rewrite */ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |SUBPLAN FILTER   |     |58      |2088        |
|1 |├─TABLE FULL SCAN|xy_t1|116     |8           |
|2 |└─TABLE FULL SCAN|xy_t2|1       |18          |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter([(T_OP_NOT_EXISTS, subquery(1))]), rowset=256
      exec_params_([xy_t1.c1(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([1]), filter([xy_t2.c1 = :0]), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ no_rewrite */ * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
+------+------+


***************** HASH ANTI 最优
EXPLAIN select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |HASH ANTI JOIN   |     |1       |19          |
|1 |├─TABLE FULL SCAN|xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|116     |6           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN |     |1       |13          |
|1 |├─TABLE FULL SCAN     |xy_t2|8       |3           |
|2 |└─MATERIAL            |     |116     |9           |
|3 |  └─TABLE FULL SCAN   |xy_t1|116     |6           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      conds([xy_t2.c1 = xy_t1.c1]), nl_params_(nil), use_batch=false
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1]), filter(nil), rowset=256
  3 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
+------+------+
EXPLAIN select /*+ use_hash(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |HASH ANTI JOIN   |     |1       |19          |
|1 |├─TABLE FULL SCAN|xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|116     |6           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE ANTI JOIN    |     |1       |23          |
|1 |├─SORT             |     |8       |4           |
|2 |│ └─TABLE FULL SCAN|xy_t2|8       |3           |
|3 |└─SORT             |     |116     |19          |
|4 |  └─TABLE FULL SCAN|xy_t1|116     |6           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      sort_keys([xy_t2.c1, ASC])
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1]), filter(nil), rowset=256
      sort_keys([xy_t1.c1, ASC])
  4 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
+------+------+


****************  NL ANTI 最优
EXPLAIN select * from xy_t4 where not exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |HASH ANTI JOIN   |             |1       |18          |
|1 |├─TABLE FULL SCAN|xy_t4        |2       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      equal_conds([xy_t4.c1 = xy_t1.c2]), other_conds(nil)
  1 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      access([xy_t4.c1], [xy_t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t4.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select * from xy_t4 where not exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+ use_nl(xy_t4 xy_t1)*/ * from xy_t4 where not exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
Query Plan
===============================================================
|ID|OPERATOR              |NAME         |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN |             |1       |40          |
|1 |├─TABLE FULL SCAN     |xy_t4        |2       |3           |
|2 |└─TABLE RANGE SCAN    |xy_t1(idx_c2)|1       |18          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=16
      conds(nil), nl_params_([xy_t4.c1(:0)]), use_batch=false
  1 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=16
      access([xy_t4.c1], [xy_t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t4.__pk_increment]), range(MIN ; MAX)always true
  2 - output(nil), filter(nil), rowset=16
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN ; MAX), 
      range_cond([:0 = xy_t1.c2])
select /*+ use_nl(xy_t4 xy_t1)*/ * from xy_t4 where not exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+ use_hash(xy_t4 xy_t1)*/ * from xy_t4 where not exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |HASH ANTI JOIN   |             |1       |18          |
|1 |├─TABLE FULL SCAN|xy_t4        |2       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      equal_conds([xy_t4.c1 = xy_t1.c2]), other_conds(nil)
  1 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      access([xy_t4.c1], [xy_t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t4.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select /*+ use_hash(xy_t4 xy_t1)*/ * from xy_t4 where not exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+ use_merge(xy_t4 xy_t1)*/ * from xy_t4 where not exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
Query Plan
============================================================
|ID|OPERATOR           |NAME         |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------
|0 |MERGE ANTI JOIN    |             |1       |8           |
|1 |├─SORT             |             |2       |3           |
|2 |│ └─TABLE FULL SCAN|xy_t4        |2       |3           |
|3 |└─TABLE FULL SCAN  |xy_t1(idx_c2)|116     |6           |
============================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      equal_conds([xy_t4.c1 = xy_t1.c2]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      sort_keys([xy_t4.c1, ASC])
  2 - output([xy_t4.c1], [xy_t4.c2]), filter(nil), rowset=256
      access([xy_t4.c1], [xy_t4.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t4.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select /*+ use_merge(xy_t4 xy_t1)*/ * from xy_t4 where not exists (select 1 from xy_t1 where xy_t4.c1 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+


****************  MERGE ANTI 最优
EXPLAIN select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |MERGE ANTI JOIN  |             |1       |9           |
|1 |├─TABLE FULL SCAN|xy_t2(idx_c2)|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c2 = xy_t1.c2]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t2.c2], [xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c2], [xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    4 |
|    9 |    9 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
Query Plan
===============================================================
|ID|OPERATOR              |NAME         |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN |             |1       |153         |
|1 |├─TABLE FULL SCAN     |xy_t2(idx_c2)|8       |3           |
|2 |└─TABLE RANGE SCAN    |xy_t1(idx_c2)|1       |18          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      conds(nil), nl_params_([xy_t2.c2(:0)]), use_batch=false
  1 - output([xy_t2.c2], [xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c2], [xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output(nil), filter(nil), rowset=16
      access(nil), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN ; MAX), 
      range_cond([:0 = xy_t1.c2])
select /*+ use_nl(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    4 |
|    9 |    9 |
+------+------+
EXPLAIN select /*+ use_hash(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |HASH ANTI JOIN   |             |1       |19          |
|1 |├─TABLE FULL SCAN|xy_t2(idx_c2)|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c2 = xy_t1.c2]), other_conds(nil)
  1 - output([xy_t2.c2], [xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c2], [xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select /*+ use_hash(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
|    9 |    9 |
|    5 |    4 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
Query Plan
==========================================================
|ID|OPERATOR         |NAME         |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |MERGE ANTI JOIN  |             |1       |9           |
|1 |├─TABLE FULL SCAN|xy_t2(idx_c2)|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1(idx_c2)|116     |6           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c2 = xy_t1.c2]), other_conds(nil)
      merge_directions([ASC])
  1 - output([xy_t2.c2], [xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c2], [xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select /*+ use_merge(xy_t2 xy_t1)*/ * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c2 = xy_t1.c2);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    4 |
|    9 |    9 |
+------+------+


*************** 测试3表情况
EXPLAIN select sum(c1), sum(c2) from xy_t1 where exists (select 1 from xy_t3 where c1 = xy_t1.c1) and  exists (select 1 from xy_t2 where c1 = xy_t1.c1);
Query Plan
==========================================================
|ID|OPERATOR                 |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |SCALAR GROUP BY          |     |1       |34          |
|1 |└─HASH RIGHT SEMI JOIN   |     |51      |33          |
|2 |  ├─TABLE FULL SCAN      |xy_t3|12      |3           |
|3 |  └─HASH RIGHT SEMI JOIN |     |51      |23          |
|4 |    ├─TABLE FULL SCAN    |xy_t2|8       |3           |
|5 |    └─TABLE FULL SCAN    |xy_t1|116     |8           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t3.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t3.c1]), filter(nil), rowset=256
      access([xy_t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t3.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  4 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select sum(c1), sum(c2) from xy_t1 where exists (select 1 from xy_t3 where c1 = xy_t1.c1) and  exists (select 1 from xy_t2 where c1 = xy_t1.c1);
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|     224 |     168 |
+---------+---------+
EXPLAIN select /*+ use_hash(xy_t3, xy_t1) use_hash(xy_t2, xy_t1)*/ sum(c1), sum(c2) from xy_t1 where exists (select 1 from xy_t3 where c1 = xy_t1.c1) and  exists (select 1 from xy_t2 where c1 = xy_t1.c1);
Query Plan
==========================================================
|ID|OPERATOR                 |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |SCALAR GROUP BY          |     |1       |34          |
|1 |└─HASH RIGHT SEMI JOIN   |     |51      |33          |
|2 |  ├─TABLE FULL SCAN      |xy_t3|12      |3           |
|3 |  └─HASH RIGHT SEMI JOIN |     |51      |23          |
|4 |    ├─TABLE FULL SCAN    |xy_t2|8       |3           |
|5 |    └─TABLE FULL SCAN    |xy_t1|116     |8           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t3.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t3.c1]), filter(nil), rowset=256
      access([xy_t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t3.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  4 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t3, xy_t1) use_hash(xy_t2, xy_t1)*/ sum(c1), sum(c2) from xy_t1 where exists (select 1 from xy_t3 where c1 = xy_t1.c1) and  exists (select 1 from xy_t2 where c1 = xy_t1.c1);
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|     224 |     168 |
+---------+---------+
EXPLAIN select /*+ no_rewrite*/ sum(c1), sum(c2) from xy_t1 where exists (select 1 from xy_t3 where c1 = xy_t1.c1) and  exists (select 1 from xy_t2 where c1 = xy_t1.c1);
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SCALAR GROUP BY    |     |1       |4168        |
|1 |└─SUBPLAN FILTER   |     |42      |4167        |
|2 |  ├─TABLE FULL SCAN|xy_t1|116     |8           |
|3 |  ├─TABLE FULL SCAN|xy_t3|1       |18          |
|4 |  └─TABLE FULL SCAN|xy_t2|1       |18          |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)])
  1 - output([xy_t1.c1], [xy_t1.c2]), filter([(T_OP_EXISTS, subquery(1))], [(T_OP_EXISTS, subquery(2))]), rowset=256
      exec_params_([xy_t1.c1(:0)], [xy_t1.c1(:1)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([1]), filter([xy_t3.c1 = :0]), rowset=256
      access([xy_t3.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t3.__pk_increment]), range(MIN ; MAX)always true
  4 - output([1]), filter([xy_t2.c1 = :1]), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
select /*+ no_rewrite*/ sum(c1), sum(c2) from xy_t1 where exists (select 1 from xy_t3 where c1 = xy_t1.c1) and  exists (select 1 from xy_t2 where c1 = xy_t1.c1);
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|     224 |     168 |
+---------+---------+


EXPLAIN select sum(c1), sum(c2) from xy_t1 where not exists (select 1 from xy_t3 where c2 = xy_t1.c2) and  exists (select 1 from xy_t2 where c2 = xy_t1.c2);
Query Plan
==============================================================
|ID|OPERATOR             |NAME         |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |SCALAR GROUP BY      |             |1       |26          |
|1 |└─MERGE SEMI JOIN    |             |20      |25          |
|2 |  ├─MERGE ANTI JOIN  |             |32      |20          |
|3 |  │ ├─TABLE FULL SCAN|xy_t1(idx_c2)|116     |8           |
|4 |  │ └─TABLE FULL SCAN|xy_t3(idx_c2)|12      |3           |
|5 |  └─TABLE FULL SCAN  |xy_t2(idx_c2)|8       |3           |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)])
  1 - output([xy_t1.c2], [xy_t1.c1]), filter(nil), rowset=256
      equal_conds([xy_t2.c2 = xy_t1.c2]), other_conds(nil)
      merge_directions([ASC])
  2 - output([xy_t1.c2], [xy_t1.c1]), filter(nil), rowset=256
      equal_conds([xy_t3.c2 = xy_t1.c2]), other_conds(nil)
      merge_directions([ASC])
  3 - output([xy_t1.c2], [xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c2], [xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c2], [xy_t1.c1], [xy_t1.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([xy_t3.c2]), filter(nil), rowset=256
      access([xy_t3.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t3.c2], [xy_t3.c1], [xy_t3.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
select sum(c1), sum(c2) from xy_t1 where not exists (select 1 from xy_t3 where c2 = xy_t1.c2) and  exists (select 1 from xy_t2 where c2 = xy_t1.c2);
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|    NULL |    NULL |
+---------+---------+
EXPLAIN select /*+ no_rewrite*/ sum(c1), sum(c2) from xy_t1 where not exists (select 1 from xy_t3 where c2 = xy_t1.c2) and  exists (select 1 from xy_t2 where c2 = xy_t1.c2);
Query Plan
=========================================================================
|ID|OPERATOR                        |NAME         |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |SCALAR GROUP BY                 |             |1       |3565        |
|1 |└─SUBPLAN FILTER                |             |42      |3563        |
|2 |  ├─TABLE FULL SCAN             |xy_t1        |116     |8           |
|3 |  ├─DISTRIBUTED TABLE RANGE SCAN|xy_t3(idx_c2)|1       |16          |
|4 |  └─DISTRIBUTED TABLE RANGE SCAN|xy_t2(idx_c2)|1       |16          |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)]), filter(nil), rowset=256
      group(nil), agg_func([T_FUN_SUM(xy_t1.c1)], [T_FUN_SUM(xy_t1.c2)])
  1 - output([xy_t1.c2], [xy_t1.c1]), filter([(T_OP_NOT_EXISTS, subquery(1))], [(T_OP_EXISTS, subquery(2))]), rowset=256
      exec_params_([xy_t1.c2(:0)], [xy_t1.c2(:1)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=true
  2 - output([xy_t1.c2], [xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c2], [xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([1]), filter(nil), rowset=256
      access([GROUP_ID]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t3.c2], [xy_t3.c1], [xy_t3.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true, 
      range_cond([xy_t3.c2 = :0])
  4 - output([1]), filter(nil), rowset=256
      access([GROUP_ID]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c2], [xy_t2.c1], [xy_t2.__pk_increment]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true, 
      range_cond([xy_t2.c2 = :1])
select /*+ no_rewrite*/ sum(c1), sum(c2) from xy_t1 where not exists (select 1 from xy_t3 where c2 = xy_t1.c2) and  exists (select 1 from xy_t2 where c2 = xy_t1.c2);
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|    NULL |    NULL |
+---------+---------+


*************** 测试limit下压 HASH RIGHT SEMI加limit后情况, limit 小时, SEMI代价会小, limit 太大后代价不影响
EXPLAIN select * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN |     |51      |23          |
|1 |├─TABLE FULL SCAN    |xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|116     |8           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
+------+------+
EXPLAIN select * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1) limit 3;
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |LIMIT                  |     |3       |7           |
|1 |└─HASH RIGHT SEMI JOIN |     |3       |7           |
|2 |  ├─TABLE FULL SCAN    |xy_t2|8       |3           |
|3 |  └─TABLE FULL SCAN    |xy_t1|7       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      limit(3), offset(nil)
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1) limit 3;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
+------+------+
EXPLAIN select * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1) limit 1000;
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |LIMIT                  |     |51      |23          |
|1 |└─HASH RIGHT SEMI JOIN |     |51      |23          |
|2 |  ├─TABLE FULL SCAN    |xy_t2|8       |3           |
|3 |  └─TABLE FULL SCAN    |xy_t1|116     |8           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      limit(1000), offset(nil)
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t1 where exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1) limit 1000;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
|    1 |    1 |
|    5 |    5 |
|    5 |    5 |
|    5 |    7 |
|    6 |    7 |
|    6 |    6 |
|    6 | NULL |
|    9 |    0 |
|    9 |    7 |
|    1 |    1 |
|    3 |    3 |
+------+------+


*************** 测试limit下压 HASH LEFT SEMI加limit后情况, limit不影响SEMI代价
EXPLAIN select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |HASH SEMI JOIN   |     |7       |20          |
|1 |├─TABLE FULL SCAN|xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|116     |6           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    4 |
|    6 |    6 |
|    9 |    9 |
|    3 |    3 |
|    5 |    6 |
|    5 |    5 |
+------+------+
EXPLAIN select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1) limit 3;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |LIMIT              |     |3       |20          |
|1 |└─HASH SEMI JOIN   |     |3       |20          |
|2 |  ├─TABLE FULL SCAN|xy_t2|8       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|116     |6           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      limit(3), offset(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1) limit 3;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    4 |
|    5 |    6 |
+------+------+
EXPLAIN select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1) limit 1000;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |LIMIT              |     |7       |20          |
|1 |└─HASH SEMI JOIN   |     |7       |20          |
|2 |  ├─TABLE FULL SCAN|xy_t2|8       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|116     |6           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      limit(1000), offset(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t2 where exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1) limit 1000;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    4 |
|    6 |    6 |
|    9 |    9 |
|    3 |    3 |
|    5 |    6 |
|    5 |    5 |
+------+------+


*************** 测试limit下压 HASH RIGHT ANTI加limit后情况, limit 小时, ANTI代价会小, limit 太大后代价不影响
EXPLAIN select * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |HASH RIGHT ANTI JOIN |     |66      |24          |
|1 |├─TABLE FULL SCAN    |xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN    |xy_t1|116     |8           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
+------+------+
EXPLAIN select * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1) limit 3;
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |LIMIT                  |     |3       |7           |
|1 |└─HASH RIGHT ANTI JOIN |     |3       |7           |
|2 |  ├─TABLE FULL SCAN    |xy_t2|8       |3           |
|3 |  └─TABLE FULL SCAN    |xy_t1|6       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      limit(3), offset(nil)
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t2.c1]), filter(nil), rowset=16
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1) limit 3;
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
+------+------+
EXPLAIN select * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1) limit 1000;
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |LIMIT                  |     |66      |24          |
|1 |└─HASH RIGHT ANTI JOIN |     |66      |24          |
|2 |  ├─TABLE FULL SCAN    |xy_t2|8       |3           |
|3 |  └─TABLE FULL SCAN    |xy_t1|116     |8           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      limit(1000), offset(nil)
  1 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t2.c1]), filter(nil), rowset=256
      access([xy_t2.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=256
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t1 where not exists (select 1 from xy_t2 where xy_t2.c1 = xy_t1.c1) limit 1000;
+------+------+
| c1   | c2   |
+------+------+
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|    0 |    0 |
|    2 | NULL |
|    2 |    2 |
|    7 |    7 |
|    7 |    0 |
|    8 |    0 |
|    8 |    8 |
|    8 |    5 |
|   10 |   10 |
| NULL |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
|   20 |    1 |
+------+------+


*************** 测试limit下压 HASH LEFT ANTI加limit后情况, limit 不影响ANTI代价
EXPLAIN select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |HASH ANTI JOIN   |     |1       |19          |
|1 |├─TABLE FULL SCAN|xy_t2|8       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|116     |6           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1);
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
+------+------+
EXPLAIN select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1) limit 3;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |LIMIT              |     |1       |19          |
|1 |└─HASH ANTI JOIN   |     |1       |19          |
|2 |  ├─TABLE FULL SCAN|xy_t2|8       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|116     |6           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      limit(3), offset(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1) limit 3;
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
+------+------+
EXPLAIN select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1) limit 1000;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |LIMIT              |     |1       |19          |
|1 |└─HASH ANTI JOIN   |     |1       |19          |
|2 |  ├─TABLE FULL SCAN|xy_t2|8       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|116     |6           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      limit(1000), offset(nil)
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds(nil)
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=256
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1]), filter(nil), rowset=256
      access([xy_t1.c1]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.__pk_increment]), range(MIN ; MAX)always true
select * from xy_t2 where not exists (select 1 from xy_t1 where xy_t2.c1 = xy_t1.c1) limit 1000;
+------+------+
| c1   | c2   |
+------+------+
| NULL |    1 |
+------+------+

drop table xy_t1, xy_t2, xy_t3;


************** 测试SEMI/ANTI 含unique order的场景
create table xy_t1(c1 int primary key, c2 int, c3 int);
create table xy_t2(c1 int primary key, c2 int, c3 int);
insert/*insert trace*/ into xy_t1 values(0, 0, 0), (1,1, 1), (2,2, 2), (3,5, 5), (5,5, 5), (6,7,7), (7,6, 6), (8, 7,8);
insert/*insert trace*/ into xy_t2 values(1,1, 1), (3,3,3), (4,5,5), (5,5, 5), (6,6,7);


//两边都无序hash right
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where c2 in (select c2 from xy_t2 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |SORT                   |     |1       |7           |
|1 |└─HASH RIGHT SEMI JOIN |     |1       |7           |
|2 |  ├─TABLE FULL SCAN    |xy_t2|5       |3           |
|3 |  └─TABLE FULL SCAN    |xy_t1|8       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC], [xy_t1.c3, ASC])
  1 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      equal_conds([xy_t1.c2 = xy_t2.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
  2 - output([xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where c2 in (select c2 from xy_t2 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    6 |    6 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where c2 in (select c2 from xy_t2 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |SORT                 |     |1       |7           |
|1 |└─MERGE SEMI JOIN    |     |1       |7           |
|2 |  ├─SORT             |     |8       |4           |
|3 |  │ └─TABLE FULL SCAN|xy_t1|8       |3           |
|4 |  └─SORT             |     |5       |3           |
|5 |    └─TABLE FULL SCAN|xy_t2|5       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC], [xy_t1.c3, ASC]), prefix_pos(1)
  1 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      equal_conds([xy_t1.c2 = xy_t2.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
      merge_directions([ASC])
  2 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC])
  3 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
  4 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC])
  5 - output([xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where c2 in (select c2 from xy_t2 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    6 |    6 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where c2 in (select c2 from xy_t2 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
=========================================================
|ID|OPERATOR                |NAME |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |SORT                    |     |1       |4           |
|1 |└─NESTED-LOOP SEMI JOIN |     |1       |4           |
|2 |  ├─TABLE FULL SCAN     |xy_t1|8       |3           |
|3 |  └─MATERIAL            |     |5       |3           |
|4 |    └─TABLE FULL SCAN   |xy_t2|5       |3           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC], [xy_t1.c3, ASC])
  1 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      conds([xy_t1.c3 < xy_t2.c3], [xy_t1.c2 = xy_t2.c2]), nl_params_(nil), use_batch=false
  2 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
  3 - output([xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
  4 - output([xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where c2 in (select c2 from xy_t2 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    6 |    6 |
+------+------+
EXPLAIN select /*+ no_rewrite*/ c2, c3 from xy_t1 where c2 in (select c2 from xy_t2 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SORT               |     |4       |147         |
|1 |└─SUBPLAN FILTER   |     |4       |146         |
|2 |  ├─TABLE FULL SCAN|xy_t1|8       |3           |
|3 |  └─TABLE FULL SCAN|xy_t2|2       |18          |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC], [xy_t1.c3, ASC])
  1 - output([xy_t1.c2], [xy_t1.c3]), filter([xy_t1.c2 = ANY(subquery(1))]), rowset=16
      exec_params_([xy_t1.c3(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  2 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
  3 - output([xy_t2.c2]), filter([:0 < xy_t2.c3]), rowset=16
      access([xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
select /*+ no_rewrite*/ c2, c3 from xy_t1 where c2 in (select c2 from xy_t2 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    6 |    6 |
+------+------+


//两边都无序hash left
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where c2 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SORT               |     |1       |7           |
|1 |└─HASH SEMI JOIN   |     |1       |7           |
|2 |  ├─TABLE FULL SCAN|xy_t2|5       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|8       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC], [xy_t2.c3, ASC])
  1 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      equal_conds([xy_t2.c2 = xy_t1.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
  2 - output([xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where c2 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    6 |    7 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where c2 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |SORT                 |     |1       |7           |
|1 |└─MERGE SEMI JOIN    |     |1       |7           |
|2 |  ├─SORT             |     |5       |3           |
|3 |  │ └─TABLE FULL SCAN|xy_t2|5       |3           |
|4 |  └─SORT             |     |8       |4           |
|5 |    └─TABLE FULL SCAN|xy_t1|8       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC], [xy_t2.c3, ASC]), prefix_pos(1)
  1 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      equal_conds([xy_t2.c2 = xy_t1.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
      merge_directions([ASC])
  2 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC])
  3 - output([xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  4 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC])
  5 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where c2 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    6 |    7 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where c2 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
=========================================================
|ID|OPERATOR                |NAME |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |SORT                    |     |1       |3           |
|1 |└─NESTED-LOOP SEMI JOIN |     |1       |3           |
|2 |  ├─TABLE FULL SCAN     |xy_t2|5       |3           |
|3 |  └─MATERIAL            |     |8       |4           |
|4 |    └─TABLE FULL SCAN   |xy_t1|8       |3           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC], [xy_t2.c3, ASC])
  1 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      conds([xy_t1.c3 < xy_t2.c3], [xy_t2.c2 = xy_t1.c2]), nl_params_(nil), use_batch=false
  2 - output([xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
  4 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where c2 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    6 |    7 |
+------+------+
EXPLAIN select /*+ no_rewrite*/ c2, c3 from xy_t2 where c2 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SORT               |     |3       |93          |
|1 |└─SUBPLAN FILTER   |     |3       |92          |
|2 |  ├─TABLE FULL SCAN|xy_t2|5       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|3       |18          |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC], [xy_t2.c3, ASC])
  1 - output([xy_t2.c2], [xy_t2.c3]), filter([xy_t2.c2 = ANY(subquery(1))]), rowset=16
      exec_params_([xy_t2.c3(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  2 - output([xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c2]), filter([xy_t1.c3 < :0]), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ no_rewrite*/ c2, c3 from xy_t2 where c2 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    6 |    7 |
+------+------+


//两边唯一有序, 改写为inner join
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c1 from xy_t1 where xy_t1.c2 < xy_t2.c2) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SORT               |     |5       |8           |
|1 |└─HASH JOIN        |     |5       |7           |
|2 |  ├─TABLE FULL SCAN|xy_t2|5       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|8       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds([xy_t1.c2 < xy_t2.c2])
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c1 from xy_t1 where xy_t1.c2 < xy_t2.c2) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c1 from xy_t1 where xy_t1.c2 < xy_t2.c2) order by 1,2;
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |MERGE JOIN       |     |5       |6           |
|1 |├─TABLE FULL SCAN|xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|8       |3           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      equal_conds([xy_t2.c1 = xy_t1.c1]), other_conds([xy_t1.c2 < xy_t2.c2])
      merge_directions([ASC])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c1 from xy_t1 where xy_t1.c2 < xy_t2.c2) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN select /*+ no_rewrite*/ c1, c2 from xy_t2 where c1 in (select c1 from xy_t1 where xy_t1.c2 < xy_t2.c2) order by 1,2;
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |SUBPLAN FILTER   |     |3       |92          |
|1 |├─TABLE FULL SCAN|xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|3       |18          |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter([xy_t2.c1 = ANY(subquery(1))]), rowset=16
      exec_params_([xy_t2.c2(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1]), filter([xy_t1.c2 < :0]), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ no_rewrite*/ c1, c2 from xy_t2 where c1 in (select c1 from xy_t1 where xy_t1.c2 < xy_t2.c2) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
+----+------+


// 一边唯一有序
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SORT               |     |1       |7           |
|1 |└─HASH SEMI JOIN   |     |1       |7           |
|2 |  ├─TABLE FULL SCAN|xy_t2|5       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|8       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      equal_conds([xy_t2.c1 = xy_t1.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
  2 - output([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  6 |    6 |
+----+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE SEMI JOIN    |     |1       |7           |
|1 |├─TABLE FULL SCAN  |xy_t2|5       |3           |
|2 |└─SORT             |     |8       |4           |
|3 |  └─TABLE FULL SCAN|xy_t1|8       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      equal_conds([xy_t2.c1 = xy_t1.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
      merge_directions([ASC])
  1 - output([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  2 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC])
  3 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  6 |    6 |
+----+------+
EXPLAIN select /*+ use_nl(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN |     |1       |3           |
|1 |├─TABLE FULL SCAN     |xy_t2|5       |3           |
|2 |└─MATERIAL            |     |8       |4           |
|3 |  └─TABLE FULL SCAN   |xy_t1|8       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      conds([xy_t1.c3 < xy_t2.c3], [xy_t2.c1 = xy_t1.c2]), nl_params_(nil), use_batch=false
  1 - output([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  2 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
  3 - output([xy_t1.c3], [xy_t1.c2]), filter(nil), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where c1 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  6 |    6 |
+----+------+
EXPLAIN select /*+ no_rewrite*/ c1, c2 from xy_t2 where c1 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |SUBPLAN FILTER   |     |3       |93          |
|1 |├─TABLE FULL SCAN|xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|3       |18          |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter([xy_t2.c1 = ANY(subquery(1))]), rowset=16
      exec_params_([xy_t2.c3(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  1 - output([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  2 - output([xy_t1.c2]), filter([xy_t1.c3 < :0]), rowset=16
      access([xy_t1.c3], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ no_rewrite*/ c1, c2 from xy_t2 where c1 in (select c2 from xy_t1 where xy_t1.c3 < xy_t2.c3) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  6 |    6 |
+----+------+


//两边都无序hash right
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c2 = xy_t2.c2 and xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |SORT                   |     |8       |8           |
|1 |└─HASH RIGHT ANTI JOIN |     |8       |7           |
|2 |  ├─TABLE FULL SCAN    |xy_t2|5       |3           |
|3 |  └─TABLE FULL SCAN    |xy_t1|8       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC], [xy_t1.c3, ASC])
  1 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      equal_conds([xy_t1.c2 = xy_t2.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
  2 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      access([xy_t2.c2], [xy_t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      access([xy_t1.c2], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c2 = xy_t2.c2 and xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    0 |    0 |
|    1 |    1 |
|    2 |    2 |
|    5 |    5 |
|    5 |    5 |
|    7 |    7 |
|    7 |    8 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c2 = xy_t2.c2 and xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |SORT                 |     |8       |8           |
|1 |└─MERGE ANTI JOIN    |     |8       |7           |
|2 |  ├─SORT             |     |8       |4           |
|3 |  │ └─TABLE FULL SCAN|xy_t1|8       |3           |
|4 |  └─SORT             |     |5       |3           |
|5 |    └─TABLE FULL SCAN|xy_t2|5       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC], [xy_t1.c3, ASC]), prefix_pos(1)
  1 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      equal_conds([xy_t1.c2 = xy_t2.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
      merge_directions([ASC])
  2 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC])
  3 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      access([xy_t1.c2], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
  4 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC])
  5 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      access([xy_t2.c2], [xy_t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c2 = xy_t2.c2 and xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    0 |    0 |
|    1 |    1 |
|    2 |    2 |
|    5 |    5 |
|    5 |    5 |
|    7 |    7 |
|    7 |    8 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c2 = xy_t2.c2 and xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
=========================================================
|ID|OPERATOR                |NAME |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |SORT                    |     |8       |4           |
|1 |└─NESTED-LOOP ANTI JOIN |     |8       |4           |
|2 |  ├─TABLE FULL SCAN     |xy_t1|8       |3           |
|3 |  └─MATERIAL            |     |5       |3           |
|4 |    └─TABLE FULL SCAN   |xy_t2|5       |3           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC], [xy_t1.c3, ASC])
  1 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      conds([xy_t1.c3 < xy_t2.c3], [xy_t1.c2 = xy_t2.c2]), nl_params_(nil), use_batch=false
  2 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      access([xy_t1.c2], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
  3 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
  4 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      access([xy_t2.c2], [xy_t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t1 xy_t2)*/ c2, c3 from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c2 = xy_t2.c2 and xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    0 |    0 |
|    1 |    1 |
|    2 |    2 |
|    5 |    5 |
|    5 |    5 |
|    7 |    7 |
|    7 |    8 |
+------+------+
EXPLAIN select /*+ no_rewrite*/ c2, c3 from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c2 = xy_t2.c2 and xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SORT               |     |4       |147         |
|1 |└─SUBPLAN FILTER   |     |4       |146         |
|2 |  ├─TABLE FULL SCAN|xy_t1|8       |3           |
|3 |  └─TABLE FULL SCAN|xy_t2|1       |18          |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC], [xy_t1.c3, ASC])
  1 - output([xy_t1.c2], [xy_t1.c3]), filter([(T_OP_NOT_EXISTS, subquery(1))]), rowset=16
      exec_params_([xy_t1.c2(:0)], [xy_t1.c3(:1)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  2 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      access([xy_t1.c2], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
  3 - output([1]), filter([:0 = xy_t2.c2], [:1 < xy_t2.c3]), rowset=16
      access([xy_t2.c2], [xy_t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
select /*+ no_rewrite*/ c2, c3 from xy_t1 where not exists (select 1 from xy_t2 where xy_t1.c2 = xy_t2.c2 and xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    0 |    0 |
|    1 |    1 |
|    2 |    2 |
|    5 |    5 |
|    5 |    5 |
|    7 |    7 |
|    7 |    8 |
+------+------+


//两边都无序hash left
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c2 = xy_t2.c2 and  xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SORT               |     |5       |7           |
|1 |└─HASH ANTI JOIN   |     |5       |7           |
|2 |  ├─TABLE FULL SCAN|xy_t2|5       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|8       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC], [xy_t2.c3, ASC])
  1 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      equal_conds([xy_t1.c2 = xy_t2.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
  2 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      access([xy_t2.c2], [xy_t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      access([xy_t1.c2], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c2 = xy_t2.c2 and  xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    5 |    5 |
+------+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c2 = xy_t2.c2 and  xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |SORT                 |     |5       |7           |
|1 |└─MERGE ANTI JOIN    |     |5       |7           |
|2 |  ├─SORT             |     |5       |3           |
|3 |  │ └─TABLE FULL SCAN|xy_t2|5       |3           |
|4 |  └─SORT             |     |8       |4           |
|5 |    └─TABLE FULL SCAN|xy_t1|8       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC], [xy_t2.c3, ASC]), prefix_pos(1)
  1 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      equal_conds([xy_t1.c2 = xy_t2.c2]), other_conds([xy_t1.c3 < xy_t2.c3])
      merge_directions([ASC])
  2 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC])
  3 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      access([xy_t2.c2], [xy_t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  4 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      sort_keys([xy_t1.c2, ASC])
  5 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      access([xy_t1.c2], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c2 = xy_t2.c2 and  xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    5 |    5 |
+------+------+
EXPLAIN select /*+ use_nl(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c2 = xy_t2.c2 and  xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
=========================================================
|ID|OPERATOR                |NAME |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |SORT                    |     |5       |4           |
|1 |└─NESTED-LOOP ANTI JOIN |     |5       |3           |
|2 |  ├─TABLE FULL SCAN     |xy_t2|5       |3           |
|3 |  └─MATERIAL            |     |8       |4           |
|4 |    └─TABLE FULL SCAN   |xy_t1|8       |3           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC], [xy_t2.c3, ASC])
  1 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      conds([xy_t1.c3 < xy_t2.c3], [xy_t1.c2 = xy_t2.c2]), nl_params_(nil), use_batch=false
  2 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      access([xy_t2.c2], [xy_t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
  4 - output([xy_t1.c2], [xy_t1.c3]), filter(nil), rowset=16
      access([xy_t1.c2], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t1 xy_t2)*/ c2, c3 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c2 = xy_t2.c2 and  xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    5 |    5 |
+------+------+
EXPLAIN select /*+ no_rewrite*/ c2, c3 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c2 = xy_t2.c2 and  xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SORT               |     |3       |93          |
|1 |└─SUBPLAN FILTER   |     |3       |92          |
|2 |  ├─TABLE FULL SCAN|xy_t2|5       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|1       |18          |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      sort_keys([xy_t2.c2, ASC], [xy_t2.c3, ASC])
  1 - output([xy_t2.c2], [xy_t2.c3]), filter([(T_OP_NOT_EXISTS, subquery(1))]), rowset=16
      exec_params_([xy_t2.c2(:0)], [xy_t2.c3(:1)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=false
  2 - output([xy_t2.c2], [xy_t2.c3]), filter(nil), rowset=16
      access([xy_t2.c2], [xy_t2.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([1]), filter([xy_t1.c2 = :0], [xy_t1.c3 < :1]), rowset=16
      access([xy_t1.c2], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false,false], 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ no_rewrite*/ c2, c3 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c2 = xy_t2.c2 and  xy_t1.c3 < xy_t2.c3) order by 1,2;
+------+------+
| c2   | c3   |
+------+------+
|    1 |    1 |
|    3 |    3 |
|    5 |    5 |
|    5 |    5 |
+------+------+


// 两边唯一有序
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c1 and xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
====================================================
|ID|OPERATOR           |NAME |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |SORT               |     |5       |8           |
|1 |└─HASH ANTI JOIN   |     |5       |7           |
|2 |  ├─TABLE FULL SCAN|xy_t2|5       |3           |
|3 |  └─TABLE FULL SCAN|xy_t1|8       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c3 < xy_t2.c3])
  2 - output([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([xy_t1.c1], [xy_t1.c3]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c1 and xy_t1.c3 < xy_t2.c3) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  3 |    3 |
|  4 |    5 |
|  5 |    5 |
|  6 |    6 |
+----+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c1 and xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
==================================================
|ID|OPERATOR         |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |MERGE ANTI JOIN  |     |5       |6           |
|1 |├─TABLE FULL SCAN|xy_t2|5       |3           |
|2 |└─TABLE FULL SCAN|xy_t1|8       |3           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      equal_conds([xy_t1.c1 = xy_t2.c1]), other_conds([xy_t1.c3 < xy_t2.c3])
      merge_directions([ASC])
  1 - output([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  2 - output([xy_t1.c1], [xy_t1.c3]), filter(nil), rowset=16
      access([xy_t1.c1], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c1 and xy_t1.c3 < xy_t2.c3) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  3 |    3 |
|  4 |    5 |
|  5 |    5 |
|  6 |    6 |
+----+------+
EXPLAIN select /*+ use_nl(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c1 and xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
=======================================================
|ID|OPERATOR              |NAME |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN |     |5       |97          |
|1 |├─TABLE FULL SCAN     |xy_t2|5       |3           |
|2 |└─TABLE GET           |xy_t1|1       |18          |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      conds(nil), nl_params_([xy_t2.c1(:0)], [xy_t2.c3(:1)]), use_batch=false
  1 - output([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  2 - output(nil), filter([xy_t1.c3 < :1]), rowset=16
      access([xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t1.c1]), range(MIN ; MAX), 
      range_cond([xy_t1.c1 = :0])
select /*+ use_nl(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c1 and xy_t1.c3 < xy_t2.c3) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  3 |    3 |
|  4 |    5 |
|  5 |    5 |
|  6 |    6 |
+----+------+
EXPLAIN select /*+ no_rewrite*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c1 and xy_t1.c3 < xy_t2.c3) order by 1,2;
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |SUBPLAN FILTER         |     |3       |80          |
|1 |├─TABLE FULL SCAN      |xy_t2|5       |3           |
|2 |└─DISTRIBUTED TABLE GET|xy_t1|1       |16          |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter([(T_OP_NOT_EXISTS, subquery(1))]), rowset=16
      exec_params_([xy_t2.c1(:0)], [xy_t2.c3(:1)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=true
  1 - output([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c3], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  2 - output([1]), filter([xy_t1.c3 < :1]), rowset=16
      access([GROUP_ID], [xy_t1.c3]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true, 
      range_cond([xy_t1.c1 = :0])
select /*+ no_rewrite*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c1 and xy_t1.c3 < xy_t2.c3) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  3 |    3 |
|  4 |    5 |
|  5 |    5 |
|  6 |    6 |
+----+------+


//一边唯一有序
EXPLAIN select /*+ use_hash(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c2 and xy_t1.c2 < xy_t2.c2) order by 1,2;
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |SORT                   |     |5       |6           |
|1 |└─HASH RIGHT ANTI JOIN |     |5       |6           |
|2 |  ├─SUBPLAN SCAN       |VIEW1|1       |3           |
|3 |  │ └─TABLE FULL SCAN  |xy_t1|1       |3           |
|4 |  └─TABLE FULL SCAN    |xy_t2|5       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      equal_conds([VIEW1.xy_t1.c1 = xy_t2.c2]), other_conds(nil)
  2 - output([VIEW1.xy_t1.c1]), filter(nil), rowset=16
      access([VIEW1.xy_t1.c1])
  3 - output([xy_t1.c1]), filter([xy_t1.c1 > xy_t1.c2]), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
  4 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
select /*+ use_hash(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c2 and xy_t1.c2 < xy_t2.c2) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  3 |    3 |
|  4 |    5 |
|  5 |    5 |
|  6 |    6 |
+----+------+
EXPLAIN select /*+ use_merge(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c2 and xy_t1.c2 < xy_t2.c2) order by 1,2;
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |SORT                 |     |5       |7           |
|1 |└─HASH ANTI JOIN     |     |5       |7           |
|2 |  ├─TABLE FULL SCAN  |xy_t2|5       |3           |
|3 |  └─SUBPLAN SCAN     |VIEW1|1       |3           |
|4 |    └─TABLE FULL SCAN|xy_t1|1       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      equal_conds([VIEW1.xy_t1.c1 = xy_t2.c2]), other_conds(nil)
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([VIEW1.xy_t1.c1]), filter(nil), rowset=16
      access([VIEW1.xy_t1.c1])
  4 - output([xy_t1.c1]), filter([xy_t1.c1 > xy_t1.c2]), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_merge(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c2 and xy_t1.c2 < xy_t2.c2) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  3 |    3 |
|  4 |    5 |
|  5 |    5 |
|  6 |    6 |
+----+------+
EXPLAIN select /*+ use_nl(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c2 and xy_t1.c2 < xy_t2.c2) order by 1,2;
Query Plan
======================================================
|ID|OPERATOR             |NAME |EST.ROWS|EST.TIME(us)|
------------------------------------------------------
|0 |SORT                 |     |5       |7           |
|1 |└─HASH ANTI JOIN     |     |5       |7           |
|2 |  ├─TABLE FULL SCAN  |xy_t2|5       |3           |
|3 |  └─SUBPLAN SCAN     |VIEW1|1       |3           |
|4 |    └─TABLE FULL SCAN|xy_t1|1       |3           |
======================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      sort_keys([xy_t2.c1, ASC])
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      equal_conds([VIEW1.xy_t1.c1 = xy_t2.c2]), other_conds(nil)
  2 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  3 - output([VIEW1.xy_t1.c1]), filter(nil), rowset=16
      access([VIEW1.xy_t1.c1])
  4 - output([xy_t1.c1]), filter([xy_t1.c1 > xy_t1.c2]), rowset=16
      access([xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true
select /*+ use_nl(xy_t1 xy_t2)*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c2 and xy_t1.c2 < xy_t2.c2) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  3 |    3 |
|  4 |    5 |
|  5 |    5 |
|  6 |    6 |
+----+------+
EXPLAIN select /*+ no_rewrite*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c2 and xy_t1.c2 < xy_t2.c2) order by 1,2;
Query Plan
========================================================
|ID|OPERATOR               |NAME |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |SUBPLAN FILTER         |     |3       |79          |
|1 |├─TABLE FULL SCAN      |xy_t2|5       |3           |
|2 |└─DISTRIBUTED TABLE GET|xy_t1|1       |16          |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([xy_t2.c1], [xy_t2.c2]), filter([(T_OP_NOT_EXISTS, subquery(1))]), rowset=16
      exec_params_([xy_t2.c2(:0)]), onetime_exprs_(nil), init_plan_idxs_(nil), use_batch=true
  1 - output([xy_t2.c1], [xy_t2.c2]), filter(nil), rowset=16
      access([xy_t2.c1], [xy_t2.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([xy_t2.c1]), range(MIN ; MAX)always true
  2 - output([1]), filter([xy_t1.c1 > xy_t1.c2]), rowset=16
      access([GROUP_ID], [xy_t1.c1], [xy_t1.c2]), partitions(p0)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([xy_t1.c1]), range(MIN ; MAX)always true, 
      range_cond([xy_t1.c1 = :0])
select /*+ no_rewrite*/ c1, c2 from xy_t2 where not exists (select 1 from xy_t1 where xy_t1.c1 = xy_t2.c2 and xy_t1.c2 < xy_t2.c2) order by 1,2;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  3 |    3 |
|  4 |    5 |
|  5 |    5 |
|  6 |    6 |
+----+------+

drop table xy_t1, xy_t2;


