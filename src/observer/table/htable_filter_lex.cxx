#line 2 "../../../src/observer/table/htable_filter_lex.cxx"
#line 7 "../../../src/observer/table/htable_filter_lex.lxx"
  /**
 * Copyright (c) 2023 OceanBase
 * OceanBase CE is licensed under Mulan PubL v2.
 * You can use this software according to the terms and conditions of the Mulan PubL v2.
 * You may obtain a copy of Mulan PubL v2 at:
 *          http://license.coscl.org.cn/MulanPubL-2.0
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PubL v2 for more details.
 */
#define USING_LOG_PREFIX SERVER
#include "observer/table/ob_htable_filter_parser.h"
#include "observer/table/ob_htable_filters.h"
#include "observer/table/htable_filter_tab.hxx"
using namespace oceanbase::common;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"



#line 25 "../../../src/observer/table/htable_filter_lex.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE ob_hfilter_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE ob_hfilter_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via ob_hfilter_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void ob_hfilter_restart (FILE *input_file ,yyscan_t yyscanner );
void ob_hfilter__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE ob_hfilter__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void ob_hfilter__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ob_hfilter__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ob_hfilter_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void ob_hfilter_pop_buffer_state (yyscan_t yyscanner );

static void ob_hfilter_ensure_buffer_stack (yyscan_t yyscanner );
static void ob_hfilter__load_buffer_state (yyscan_t yyscanner );
static void ob_hfilter__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER ob_hfilter__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE ob_hfilter__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE ob_hfilter__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE ob_hfilter__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *ob_hfilter_alloc (yy_size_t ,yyscan_t yyscanner );
void *ob_hfilter_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void ob_hfilter_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer ob_hfilter__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        ob_hfilter_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ob_hfilter__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        ob_hfilter_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ob_hfilter__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ob_hfilter_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 51
#define YY_END_OF_BUFFER 52
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[450] =
    {   0,
        0,    0,    0,    0,   52,   50,   49,   49,   50,   50,
       19,   48,   50,   18,   12,    7,   10,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   20,   22,    8,    5,   18,   11,
        9,    0,    0,    0,    0,    0,    0,    0,    0,   14,
        0,    0,    0,    4,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    6,   20,   21,    3,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    1,    0,    0,   16,    0,    0,    0,    0,
        0,   17,    0,    0,    0,    0,    0,    0,    0,   13,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    2,
        0,    0,    0,    0,    0,    0,    0,   15,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   29,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   24,    0,    0,    0,    0,    0,    0,
        0,   42,    0,    0,    0,    0,    0,    0,    0,   46,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   34,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   25,   30,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   36,    0,    0,    0,    0,   40,   37,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   32,    0,   33,    0,    0,    0,    0,    0,    0,
       47,    0,    0,    0,    0,    0,   39,    0,   38,    0,

        0,   45,   43,    0,    0,    0,    0,    0,    0,    0,
       28,    0,    0,    0,    0,   31,    0,    0,    0,    0,
        0,    0,    0,   26,    0,    0,    0,    0,    0,    0,
        0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
       27,    0,    0,    0,    0,    0,    0,   44,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    1,    1,    1,    5,    6,    7,
        7,    1,    8,    7,    8,    1,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,   10,
       11,   12,    1,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
        1,    1,    1,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,    1,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,    1,   64,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[452] =
    {   0,
        0,    0,  876,  863,  867,  886,  886,  886,  855,  860,
      886,  886,  855,  854,  850,  886,  849,   40,   46,   50,
       55,   44,   53,   39,   47,   46,   75,   45,   92,   59,
       95,   70,   64,  232,    0,  278,  886,  886,   81,  886,
      886,   69,   69,   66,   90,   96,   92,   85,  108,   44,
       89,  103,   41,  886,  108,  111,  116,  107,   99,  110,
      115,  123,  114,  107,  117,  120,  886,    0,  886,  886,
      141,  125,  143,  138,  148,  140,  134,  149,  148,  148,
      144,  150,  160,  160,  156,  164,  163,  165,  158,  164,
      171,  172,  158,  168,  170,  169,  183,  192,  189,  189,

      185,  190,  197,  199,  204,  199,  209,  207,  208,  204,
      210,  209,  886,  216,  206,  886,  220,  222,  227,  216,
      226,  886,  207,  222,  216,  230,  230,  241,  245,  886,
      252,  240,  258,  253,  255,  262,  265,  250,  264,  886,
      258,  295,  268,  270,  272,  265,  271,  886,  257,  271,
      269,  274,  294,  292,  287,  294,  311,  301,  316,  309,
      315,  306,  320,  321,  322,  312,  319,  305,  309,  311,
      327,  329,  313,  331,  343,  348,  342,  357,  350,  353,
      354,  356,  356,  349,  363,  366,  359,  362,  355,  364,
      363,  374,  376,  374,  382,  369,  382,  378,  385,  382,

      388,  397,  399,  401,  398,  398,  406,  411,  415,  415,
      403,  421,  406,  413,  426,  420,  414,  422,  421,  435,
      420,  419,  433,  435,  886,  434,  455,  439,  455,  447,
      449,  456,  461,  466,  467,  459,  469,  464,  465,  466,
      459,  460,  470,  471,  886,  480,  478,  479,  477,  473,
      485,  476,  505,  501,  508,  489,  512,  514,  510,  505,
      499,  504,  506,  512,  522,  508,  522,  513,  520,  522,
      523,  532,  530,  886,  521,  536,  523,  537,  536,  549,
      540,  886,  555,  559,  565,  557,  556,  562,  570,  886,
      557,  558,  557,  573,  569,  576,  563,  574,  576,  577,

      578,  579,  583,  581,  577,  589,  886,  584,  604,  607,
      608,  615,  613,  605,  619,  620,  613,  617,  610,  611,
      618,  621,  632,  886,  625,  620,  628,  623,  624,  632,
      633,  640,  637,  638,  636,  643,  659,  660,  662,  655,
      657,  666,  661,  668,  886,  886,  660,  662,  665,  672,
      673,  679,  681,  670,  672,  683,  688,  692,  677,  692,
      679,  694,  696,  886,  695,  697,  708,  703,  886,  886,
      715,  711,  721,  725,  725,  727,  728,  718,  731,  732,
      727,  886,  720,  886,  732,  727,  736,  730,  725,  740,
      886,  733,  734,  734,  761,  755,  886,  746,  886,  769,

      767,  886,  886,  775,  764,  775,  777,  773,  766,  769,
      886,  771,  779,  769,  785,  886,  771,  782,  792,  780,
      798,  781,  796,  886,  791,  798,  799,  809,  803,  812,
      818,  886,  819,  823,  814,  829,  830,  819,  820,  820,
      886,  833,  831,  830,  823,  838,  828,  886,  886,  883,
       77
    } ;

static yyconst flex_int16_t yy_def[452] =
    {   0,
      449,    1,  450,  450,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  451,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  451,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,    0,  449,
      449
    } ;

static yyconst flex_int16_t yy_nxt[951] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,    6,   19,   20,    6,   21,    6,    6,
       22,   23,    6,   24,   25,   26,   27,   28,   29,   30,
       31,    6,   32,   33,    6,    6,    6,    6,   18,    6,
       19,   20,    6,   21,    6,    6,   22,   23,    6,   24,
       25,   26,   27,   28,   29,   30,   31,    6,   32,   33,
        6,    6,    6,   34,   42,   43,   45,   46,   49,   51,
       52,   44,   53,   50,   54,   47,   57,   68,   82,   60,
       61,   79,   65,   66,   70,   71,   48,   55,   72,   39,
       42,   43,   45,   46,   49,   51,   52,   44,   53,   50,

       54,   47,   57,   56,   58,   60,   61,   62,   65,   66,
       70,   71,   48,   55,   72,   63,   73,   59,   74,   75,
       76,   77,   78,   64,   80,   81,   83,   84,   85,   56,
       58,   86,   87,   62,   88,   89,   90,   91,   92,   93,
       94,   63,   73,   59,   74,   75,   76,   77,   78,   64,
       80,   81,   83,   84,   85,   95,   96,   86,   87,   97,
       88,   89,   90,   91,   92,   93,   94,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
      111,   95,   96,  112,  113,   97,  114,  115,  116,  117,
      118,  119,  120,   98,   99,  100,  101,  102,  103,  104,

      105,  106,  107,  108,  109,  110,  111,  121,  122,  112,
      113,  123,  114,  115,  116,  117,  118,  119,  120,  124,
      125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
      135,  136,  137,  121,  122,  138,  139,  123,  140,  141,
      142,  143,  144,  145,  146,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  147,
      148,  138,  139,  149,  140,  141,  142,  143,  144,  145,
      146,  150,  152,  151,  153,  154,  155,  156,  157,  158,
      159,  160,  161,   69,  166,  147,  148,  167,  168,  149,
      169,  170,  171,  172,  173,   67,  174,  150,  152,  151,

      153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
      166,  175,  176,  167,  168,  177,  169,  170,  171,  172,
      173,  163,  174,  164,  178,  179,  180,  165,  181,  182,
      183,  184,  185,  187,  188,  162,  189,  175,  176,  190,
      191,  177,  192,  193,  194,  195,  196,  163,  186,  164,
      178,  179,  180,  165,  181,  182,  183,  184,  185,  187,
      188,  197,  189,  198,  199,  190,  191,  200,  192,  193,
      194,  195,  196,  201,  186,  202,  203,  204,  205,  206,
      207,  208,  209,  210,  211,  212,  213,  197,  214,  198,
      199,  216,  217,  200,  218,  215,  219,  220,  221,  201,

      222,  202,  203,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  223,  214,  224,  225,  216,  217,  226,
      218,  215,  219,  220,  221,  227,  222,  228,  229,  230,
      231,  232,  233,  234,  235,  236,  237,  238,  239,  223,
      240,  224,  225,  241,  242,  226,  243,  244,  245,  246,
      247,  227,  248,  228,  229,  230,  231,  232,  233,  234,
      235,  236,  237,  238,  239,  249,  240,  250,  251,  241,
      242,  252,  243,  244,  245,  246,  247,  253,  248,  254,
      255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
      265,  249,  266,  250,  251,  267,  268,  252,  269,  270,

      271,  272,  273,  253,  274,  254,  255,  256,  257,  258,
      259,  260,  261,  262,  263,  264,  265,  275,  266,  276,
      277,  267,  268,  278,  269,  270,  271,  272,  273,  279,
      274,  280,  281,  282,  283,  284,  285,  286,  287,  288,
      289,  290,  291,  275,  292,  276,  277,  293,  294,  278,
      295,  296,  297,  298,  299,  279,  300,  280,  281,  282,
      283,  284,  285,  286,  287,  288,  289,  290,  291,  301,
      292,  302,  303,  293,  294,  304,  295,  296,  297,  298,
      299,  305,  300,  306,  307,  308,  309,  310,  311,  312,
      313,  314,  315,  316,  317,  301,  318,  302,  303,  319,

      320,  304,  321,  322,  323,  324,  325,  305,  326,  306,
      307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
      317,  327,  318,  328,  329,  319,  320,  330,  321,  322,
      323,  324,  325,  331,  326,  332,  333,  334,  335,  336,
      337,  338,  339,  340,  341,  342,  343,  327,  344,  328,
      329,  345,  346,  330,  347,  348,  349,  350,  351,  331,
      352,  332,  333,  334,  335,  336,  337,  338,  339,  340,
      341,  342,  343,  353,  344,  354,  355,  345,  346,  356,
      347,  348,  349,  350,  351,  357,  352,  358,  359,  360,
      361,  362,  363,  364,  365,  366,  367,  368,  369,  353,

      370,  354,  355,  371,  372,  356,  373,  374,  375,  376,
      377,  357,  378,  358,  359,  360,  361,  362,  363,  364,
      365,  366,  367,  368,  369,  379,  370,  380,  381,  371,
      372,  382,  373,  374,  375,  376,  377,  383,  378,  384,
      385,  386,  387,  388,  389,  390,  391,  392,  393,  394,
      395,  379,  396,  380,  381,  397,  398,  382,  399,  400,
      401,  402,  403,  383,  404,  384,  385,  386,  387,  388,
      389,  390,  391,  392,  393,  394,  395,  405,  396,  406,
      407,  397,  398,  408,  399,  400,  401,  402,  403,  409,
      404,  410,  411,  412,  413,  414,  415,  416,  417,  418,

      419,  420,  421,  405,  422,  406,  407,  423,  424,  408,
      425,  426,  427,  428,  429,  409,  430,  410,  411,  412,
      413,  414,  415,  416,  417,  418,  419,  420,  421,  431,
      422,  432,  433,  423,  424,  434,  425,  426,  427,  428,
      429,  435,  430,  436,  437,  438,  439,  440,  441,  442,
      443,  444,  445,  446,  447,  431,  448,  432,  433,   41,
       40,  434,   39,   39,   38,   37,  449,  435,   36,  436,
      437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
      447,   36,  448,   35,   35,    5,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449
    } ;

static yyconst flex_int16_t yy_chk[951] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   19,   25,   22,   26,   21,   28,  451,   53,   30,
       30,   50,   32,   33,   42,   43,   21,   27,   44,   39,
       18,   19,   20,   21,   22,   23,   24,   19,   25,   22,

       26,   21,   28,   27,   29,   30,   30,   31,   32,   33,
       42,   43,   21,   27,   44,   31,   45,   29,   46,   46,
       47,   48,   49,   31,   51,   52,   55,   56,   57,   27,
       29,   58,   59,   31,   60,   61,   62,   63,   64,   65,
       66,   31,   45,   29,   46,   46,   47,   48,   49,   31,
       51,   52,   55,   56,   57,   71,   72,   58,   59,   73,
       60,   61,   62,   63,   64,   65,   66,   74,   75,   76,
       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   71,   72,   88,   89,   73,   90,   91,   92,   93,
       94,   95,   96,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   84,   85,   86,   87,   97,   98,   88,
       89,   99,   90,   91,   92,   93,   94,   95,   96,  100,
      101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
      111,  112,  114,   97,   98,  115,  117,   99,  118,  119,
      120,  121,  123,  124,  125,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  114,  126,
      127,  115,  117,  128,  118,  119,  120,  121,  123,  124,
      125,  129,  131,  129,  132,  133,  134,  135,  136,  137,
      138,  139,  141,   36,  143,  126,  127,  144,  145,  128,
      146,  147,  149,  150,  151,   34,  152,  129,  131,  129,

      132,  133,  134,  135,  136,  137,  138,  139,  141,  142,
      143,  153,  154,  144,  145,  155,  146,  147,  149,  150,
      151,  142,  152,  142,  156,  157,  158,  142,  159,  160,
      161,  162,  163,  164,  165,  142,  166,  153,  154,  167,
      168,  155,  169,  170,  171,  172,  173,  142,  163,  142,
      156,  157,  158,  142,  159,  160,  161,  162,  163,  164,
      165,  174,  166,  175,  176,  167,  168,  177,  169,  170,
      171,  172,  173,  178,  163,  179,  180,  181,  182,  183,
      184,  185,  186,  187,  188,  189,  190,  174,  191,  175,
      176,  192,  193,  177,  194,  191,  195,  196,  197,  178,

      198,  179,  180,  181,  182,  183,  184,  185,  186,  187,
      188,  189,  190,  199,  191,  200,  201,  192,  193,  202,
      194,  191,  195,  196,  197,  203,  198,  204,  205,  206,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  199,
      216,  200,  201,  217,  218,  202,  219,  220,  221,  222,
      223,  203,  224,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  214,  215,  226,  216,  227,  228,  217,
      218,  229,  219,  220,  221,  222,  223,  230,  224,  231,
      232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
      242,  226,  243,  227,  228,  244,  246,  229,  247,  248,

      249,  250,  251,  230,  252,  231,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  253,  243,  254,
      255,  244,  246,  256,  247,  248,  249,  250,  251,  257,
      252,  258,  259,  260,  261,  262,  263,  264,  265,  266,
      267,  268,  269,  253,  270,  254,  255,  271,  272,  256,
      273,  275,  276,  277,  278,  257,  279,  258,  259,  260,
      261,  262,  263,  264,  265,  266,  267,  268,  269,  280,
      270,  281,  283,  271,  272,  284,  273,  275,  276,  277,
      278,  285,  279,  286,  287,  288,  289,  291,  292,  293,
      294,  295,  296,  297,  298,  280,  299,  281,  283,  300,

      301,  284,  302,  303,  304,  305,  306,  285,  308,  286,
      287,  288,  289,  291,  292,  293,  294,  295,  296,  297,
      298,  309,  299,  310,  311,  300,  301,  312,  302,  303,
      304,  305,  306,  313,  308,  314,  315,  316,  317,  318,
      319,  320,  321,  322,  323,  325,  326,  309,  327,  310,
      311,  328,  329,  312,  330,  331,  332,  333,  334,  313,
      335,  314,  315,  316,  317,  318,  319,  320,  321,  322,
      323,  325,  326,  336,  327,  337,  338,  328,  329,  339,
      330,  331,  332,  333,  334,  340,  335,  341,  342,  343,
      344,  347,  348,  349,  350,  351,  352,  353,  354,  336,

      355,  337,  338,  356,  357,  339,  358,  359,  360,  361,
      362,  340,  363,  341,  342,  343,  344,  347,  348,  349,
      350,  351,  352,  353,  354,  365,  355,  366,  367,  356,
      357,  368,  358,  359,  360,  361,  362,  371,  363,  372,
      373,  374,  375,  376,  377,  377,  378,  379,  380,  381,
      383,  365,  385,  366,  367,  386,  387,  368,  388,  389,
      390,  392,  393,  371,  394,  372,  373,  374,  375,  376,
      377,  377,  378,  379,  380,  381,  383,  395,  385,  396,
      398,  386,  387,  400,  388,  389,  390,  392,  393,  401,
      394,  404,  405,  406,  407,  408,  409,  410,  412,  413,

      414,  415,  417,  395,  418,  396,  398,  419,  420,  400,
      421,  422,  423,  425,  426,  401,  427,  404,  405,  406,
      407,  408,  409,  410,  412,  413,  414,  415,  417,  428,
      418,  429,  430,  419,  420,  431,  421,  422,  423,  425,
      426,  433,  427,  434,  435,  436,  437,  438,  439,  440,
      442,  443,  444,  445,  446,  428,  447,  429,  430,   17,
       15,  431,   14,   13,   10,    9,    5,  433,    4,  434,
      435,  436,  437,  438,  439,  440,  442,  443,  444,  445,
      446,    3,  447,  450,  450,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[52] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../src/observer/table/htable_filter_lex.lxx"
#define YY_NO_INPUT 1


#line 834 "../../../src/observer/table/htable_filter_lex.cxx"

#define INITIAL 0
#define IN_STRING 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE oceanbase::table::ObHTableFilterParser *

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int ob_hfilter_lex_init (yyscan_t* scanner);

int ob_hfilter_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ob_hfilter_lex_destroy (yyscan_t yyscanner );

int ob_hfilter_get_debug (yyscan_t yyscanner );

void ob_hfilter_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE ob_hfilter_get_extra (yyscan_t yyscanner );

void ob_hfilter_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *ob_hfilter_get_in (yyscan_t yyscanner );

void ob_hfilter_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *ob_hfilter_get_out (yyscan_t yyscanner );

void ob_hfilter_set_out  (FILE * out_str ,yyscan_t yyscanner );

int ob_hfilter_get_leng (yyscan_t yyscanner );

char *ob_hfilter_get_text (yyscan_t yyscanner );

int ob_hfilter_get_lineno (yyscan_t yyscanner );

void ob_hfilter_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * ob_hfilter_get_lval (yyscan_t yyscanner );

void ob_hfilter_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *ob_hfilter_get_lloc (yyscan_t yyscanner );
    
        void ob_hfilter_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ob_hfilter_wrap (yyscan_t yyscanner );
#else
extern int ob_hfilter_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ob_hfilter_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int ob_hfilter_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 32 "../../../src/observer/table/htable_filter_lex.lxx"

  /* rules */
#line 1075 "../../../src/observer/table/htable_filter_lex.cxx"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			ob_hfilter_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				ob_hfilter__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		ob_hfilter__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 450 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 886 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "../../../src/observer/table/htable_filter_lex.lxx"
{ return SKIP; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 35 "../../../src/observer/table/htable_filter_lex.lxx"
{ return WHILE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "../../../src/observer/table/htable_filter_lex.lxx"
{ return AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 37 "../../../src/observer/table/htable_filter_lex.lxx"
{ return OR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 38 "../../../src/observer/table/htable_filter_lex.lxx"
{ return T_AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 39 "../../../src/observer/table/htable_filter_lex.lxx"
{ return T_OR; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "../../../src/observer/table/htable_filter_lex.lxx"
{ return EQUAL; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "../../../src/observer/table/htable_filter_lex.lxx"
{ return NOT_EQUAL; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "../../../src/observer/table/htable_filter_lex.lxx"
{ return GREATER_OR_EQUAL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "../../../src/observer/table/htable_filter_lex.lxx"
{ return GREATER; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "../../../src/observer/table/htable_filter_lex.lxx"
{ return LESS_OR_EQUAL; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "../../../src/observer/table/htable_filter_lex.lxx"
{ return LESS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "../../../src/observer/table/htable_filter_lex.lxx"
{ return NO_OP; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "../../../src/observer/table/htable_filter_lex.lxx"
{ return IS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "../../../src/observer/table/htable_filter_lex.lxx"
{ return IS_NOT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 51 "../../../src/observer/table/htable_filter_lex.lxx"
{
yylval->ival = 1;
return BOOL_VALUE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 56 "../../../src/observer/table/htable_filter_lex.lxx"
{
yylval->ival = 0;
return BOOL_VALUE;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 61 "../../../src/observer/table/htable_filter_lex.lxx"
{
  errno = 0;
  yylval->lval = strtoll(yytext, NULL, 10);
  if (ERANGE == errno)
  {
    ob_hfilter_error(yylloc, yyextra, "integar value out of range");
  }
  return INT_VALUE;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 71 "../../../src/observer/table/htable_filter_lex.lxx"
{
BEGIN(IN_STRING);
char *buf = static_cast<char*>(yyextra->alloc(yyextra->get_input_len()+1));
if (NULL == buf) {
yyextra->error_code_ = oceanbase::common::OB_ALLOCATE_MEMORY_FAILED;
ob_hfilter_error(yylloc, yyextra, "no memory");
return ERROR;
}
yylval->sval.len_ = 0;
yylval->sval.str_ = buf;
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 82 "../../../src/observer/table/htable_filter_lex.lxx"
{
    memcpy(yylval->sval.str_+yylval->sval.len_, yytext, yyleng);
    yylval->sval.len_ += yyleng;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 86 "../../../src/observer/table/htable_filter_lex.lxx"
{
    yylval->sval.str_[yylval->sval.len_++] = '\'';
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 89 "../../../src/observer/table/htable_filter_lex.lxx"
{
    BEGIN(INITIAL);
    return STRING_VALUE;
}
	YY_BREAK
case YY_STATE_EOF(IN_STRING):
#line 93 "../../../src/observer/table/htable_filter_lex.lxx"
{
  ob_hfilter_error(yylloc, yyextra, "unterminated quoted string");
  return ERROR;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "../../../src/observer/table/htable_filter_lex.lxx"
{ return RowFilter; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "../../../src/observer/table/htable_filter_lex.lxx"
{ return ValueFilter; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "../../../src/observer/table/htable_filter_lex.lxx"
{ return QualifierFilter; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "../../../src/observer/table/htable_filter_lex.lxx"
{ return SingleColumnValueFilter; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "../../../src/observer/table/htable_filter_lex.lxx"
{ return SingleColumnValueExcludeFilter; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "../../../src/observer/table/htable_filter_lex.lxx"
{ return DependentColumnFilter; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "../../../src/observer/table/htable_filter_lex.lxx"
{ return PageFilter; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "../../../src/observer/table/htable_filter_lex.lxx"
{ return RandomRowFilter; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "../../../src/observer/table/htable_filter_lex.lxx"
{ return ColumnPaginationFilter; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "../../../src/observer/table/htable_filter_lex.lxx"
{ return ColumnPrefixFilter; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "../../../src/observer/table/htable_filter_lex.lxx"
{ return FirstKeyOnlyFilter; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "../../../src/observer/table/htable_filter_lex.lxx"
{ return KeyOnlyFilter; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "../../../src/observer/table/htable_filter_lex.lxx"
{ return FuzzyRowFilter; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "../../../src/observer/table/htable_filter_lex.lxx"
{ return TimestampsFilter; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "../../../src/observer/table/htable_filter_lex.lxx"
{ return ColumnValueFilter; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "../../../src/observer/table/htable_filter_lex.lxx"
{ return MultiRowRangeFilter; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "../../../src/observer/table/htable_filter_lex.lxx"
{ return InclusiveStopFilter; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "../../../src/observer/table/htable_filter_lex.lxx"
{ return ColumnRangeFilter; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "../../../src/observer/table/htable_filter_lex.lxx"
{ return MultipleColumnPrefixFilter; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "../../../src/observer/table/htable_filter_lex.lxx"
{ return FamilyFilter; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "../../../src/observer/table/htable_filter_lex.lxx"
{ return ColumnCountGetFilter; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "../../../src/observer/table/htable_filter_lex.lxx"
{ return FirstKeyValueMatchingQualifiersFilter; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "../../../src/observer/table/htable_filter_lex.lxx"
{ return CheckAndMutateFilter; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "../../../src/observer/table/htable_filter_lex.lxx"
{ return PrefixFilter; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "../../../src/observer/table/htable_filter_lex.lxx"
{ return TableCompareFilter; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 124 "../../../src/observer/table/htable_filter_lex.lxx"
{
    return yytext[0];
}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 128 "../../../src/observer/table/htable_filter_lex.lxx"
{/*skip*/}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 130 "../../../src/observer/table/htable_filter_lex.lxx"
{
    return END;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 134 "../../../src/observer/table/htable_filter_lex.lxx"
{
  ob_hfilter_error(yylloc, yyextra, "mystery charactor '%c'", *yytext);
  return ERROR;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 138 "../../../src/observer/table/htable_filter_lex.lxx"
ECHO;
	YY_BREAK
#line 1481 "../../../src/observer/table/htable_filter_lex.cxx"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * ob_hfilter_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( ob_hfilter_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ob_hfilter_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ob_hfilter_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ob_hfilter_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ob_hfilter_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 450 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 450 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 449);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					ob_hfilter_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ob_hfilter_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void ob_hfilter_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        ob_hfilter_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            ob_hfilter__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	ob_hfilter__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	ob_hfilter__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void ob_hfilter__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ob_hfilter_pop_buffer_state();
	 *		ob_hfilter_push_buffer_state(new_buffer);
     */
	ob_hfilter_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	ob_hfilter__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (ob_hfilter_wrap()) processing, but the only time this flag
	 * is looked at is after ob_hfilter_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void ob_hfilter__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE ob_hfilter__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ob_hfilter_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ob_hfilter__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ob_hfilter_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ob_hfilter__create_buffer()" );

	b->yy_is_our_buffer = 1;

	ob_hfilter__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with ob_hfilter__create_buffer()
 * @param yyscanner The scanner object.
 */
    void ob_hfilter__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ob_hfilter_free((void *) b->yy_ch_buf ,yyscanner );

	ob_hfilter_free((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a ob_hfilter_restart() or at EOF.
 */
    static void ob_hfilter__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	ob_hfilter__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then ob_hfilter__init_buffer was _probably_
     * called from ob_hfilter_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void ob_hfilter__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		ob_hfilter__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void ob_hfilter_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	ob_hfilter_ensure_buffer_stack(yyscanner);

	/* This block is copied from ob_hfilter__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from ob_hfilter__switch_to_buffer. */
	ob_hfilter__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void ob_hfilter_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	ob_hfilter__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		ob_hfilter__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void ob_hfilter_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ob_hfilter_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ob_hfilter_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ob_hfilter_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ob_hfilter_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE ob_hfilter__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) ob_hfilter_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ob_hfilter__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	ob_hfilter__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ob_hfilter_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ob_hfilter__scan_bytes() instead.
 */
YY_BUFFER_STATE ob_hfilter__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return ob_hfilter__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to ob_hfilter_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE ob_hfilter__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) ob_hfilter_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in ob_hfilter__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = ob_hfilter__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in ob_hfilter__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE ob_hfilter_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int ob_hfilter_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int ob_hfilter_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *ob_hfilter_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *ob_hfilter_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int ob_hfilter_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *ob_hfilter_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void ob_hfilter_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ob_hfilter_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ob_hfilter_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ob_hfilter_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ob_hfilter_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see ob_hfilter__switch_to_buffer
 */
void ob_hfilter_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void ob_hfilter_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int ob_hfilter_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void ob_hfilter_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * ob_hfilter_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void ob_hfilter_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *ob_hfilter_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void ob_hfilter_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* ob_hfilter_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int ob_hfilter_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) ob_hfilter_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* ob_hfilter_lex_init_extra has the same functionality as ob_hfilter_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to ob_hfilter_alloc in
 * the yyextra field.
 */

int ob_hfilter_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    ob_hfilter_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) ob_hfilter_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    ob_hfilter_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ob_hfilter_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ob_hfilter_lex_init()
     */
    return 0;
}

/* ob_hfilter_lex_destroy is for both reentrant and non-reentrant scanners. */
int ob_hfilter_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		ob_hfilter__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ob_hfilter_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	ob_hfilter_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        ob_hfilter_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ob_hfilter_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    ob_hfilter_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

#define YYTABLES_NAME "yytables"

#line 138 "../../../src/observer/table/htable_filter_lex.lxx"


  /* user code */

#pragma GCC diagnostic pop

